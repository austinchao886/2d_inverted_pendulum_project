
RosRobotControllerM4_mecanum_12V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08012578  08012578  00013578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cd0  08012cd0  0001408c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012cd0  08012cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cd8  08012cd8  0001408c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cd8  08012cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012cdc  08012cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08012ce0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001408c  2**0
                  CONTENTS
 10 .bss          00016df4  2000008c  2000008c  0001408c  2**2
                  ALLOC
 11 ._user_heap_stack 00000800  20016e80  20016e80  0001408c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001408c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003258a  00000000  00000000  000140bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008896  00000000  00000000  00046646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002908  00000000  00000000  0004eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f3e  00000000  00000000  000517e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ff60  00000000  00000000  00053726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000400b0  00000000  00000000  00083686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f66f8  00000000  00000000  000c3736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b9e2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aefc  00000000  00000000  001b9e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  001c4d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012560 	.word	0x08012560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08012560 	.word	0x08012560

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000eac:	4a28      	ldr	r2, [pc, #160]	@ (8000f50 <MX_ADC1_Init+0xb8>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000eb2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <MX_ADC1_Init+0xbc>)
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000efa:	f002 febb 	bl	8003c74 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fe4e 	bl	8001ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f08:	2311      	movs	r3, #17
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f10:	2307      	movs	r3, #7
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000f1a:	f003 f8ef 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fe3e 	bl	8001ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000f36:	f003 f8e1 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f40:	f000 fe30 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000a8 	.word	0x200000a8
 8000f50:	40012000 	.word	0x40012000
 8000f54:	0f000001 	.word	0x0f000001

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2f      	ldr	r2, [pc, #188]	@ (8001034 <HAL_ADC_MspInit+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d157      	bne.n	800102a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a2d      	ldr	r2, [pc, #180]	@ (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481d      	ldr	r0, [pc, #116]	@ (800103c <HAL_ADC_MspInit+0xe4>)
 8000fc6:	f004 f845 	bl	8005054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <HAL_ADC_MspInit+0xec>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001000:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100e:	480c      	ldr	r0, [pc, #48]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8001010:	f003 fc12 	bl	8004838 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800101a:	f000 fdc3 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8001022:	639a      	str	r2, [r3, #56]	@ 0x38
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_ADC_MspInit+0xe8>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40012000 	.word	0x40012000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400
 8001040:	200000f0 	.word	0x200000f0
 8001044:	40026410 	.word	0x40026410

08001048 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_CRC_Init+0x20>)
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <MX_CRC_Init+0x24>)
 8001050:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_CRC_Init+0x20>)
 8001054:	f003 fbd4 	bl	8004800 <HAL_CRC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800105e:	f000 fda1 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000150 	.word	0x20000150
 800106c:	40023000 	.word	0x40023000

08001070 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_CRC_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_CRC_MspInit+0x40>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <HAL_CRC_MspInit+0x40>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_CRC_MspInit+0x40>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023000 	.word	0x40023000
 80010b0:	40023800 	.word	0x40023800

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <MX_DMA_Init+0x78>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a1a      	ldr	r2, [pc, #104]	@ (800112c <MX_DMA_Init+0x78>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <MX_DMA_Init+0x78>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_DMA_Init+0x78>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <MX_DMA_Init+0x78>)
 80010e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_DMA_Init+0x78>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2105      	movs	r1, #5
 80010f6:	200f      	movs	r0, #15
 80010f8:	f003 fb58 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010fc:	200f      	movs	r0, #15
 80010fe:	f003 fb71 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	2010      	movs	r0, #16
 8001108:	f003 fb50 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800110c:	2010      	movs	r0, #16
 800110e:	f003 fb69 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	2011      	movs	r0, #17
 8001118:	f003 fb48 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800111c:	2011      	movs	r0, #17
 800111e:	f003 fb61 	bl	80047e4 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
    specified, or call vTaskDelay()). If the application makes use of the
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
    /* This function will be called by each tick interrupt if
    configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
    added here, but the tick hook is called from an interrupt context, so
    code must not attempt to block, and only the interrupt safe FreeRTOS API
    functions can be used (those that end in FromISR()). */
    lv_tick_inc(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f00e fff0 	bl	8010128 <lv_tick_inc>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of packet_tx_idle */
  packet_tx_idleHandle = osSemaphoreNew(1, 0, &packet_tx_idle_attributes);
 8001150:	4a6a      	ldr	r2, [pc, #424]	@ (80012fc <MX_FREERTOS_Init+0x1b0>)
 8001152:	2100      	movs	r1, #0
 8001154:	2001      	movs	r0, #1
 8001156:	f00b faf8 	bl	800c74a <osSemaphoreNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a68      	ldr	r2, [pc, #416]	@ (8001300 <MX_FREERTOS_Init+0x1b4>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of packet_rx_not_empty */
  packet_rx_not_emptyHandle = osSemaphoreNew(1, 0, &packet_rx_not_empty_attributes);
 8001160:	4a68      	ldr	r2, [pc, #416]	@ (8001304 <MX_FREERTOS_Init+0x1b8>)
 8001162:	2100      	movs	r1, #0
 8001164:	2001      	movs	r0, #1
 8001166:	f00b faf0 	bl	800c74a <osSemaphoreNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a66      	ldr	r2, [pc, #408]	@ (8001308 <MX_FREERTOS_Init+0x1bc>)
 800116e:	6013      	str	r3, [r2, #0]

  /* creation of IMU_data_ready */
  IMU_data_readyHandle = osSemaphoreNew(1, 0, &IMU_data_ready_attributes);
 8001170:	4a66      	ldr	r2, [pc, #408]	@ (800130c <MX_FREERTOS_Init+0x1c0>)
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f00b fae8 	bl	800c74a <osSemaphoreNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a64      	ldr	r2, [pc, #400]	@ (8001310 <MX_FREERTOS_Init+0x1c4>)
 800117e:	6013      	str	r3, [r2, #0]

  /* creation of sbus_data_ready_01_ */
  sbus_data_ready_01_Handle = osSemaphoreNew(1, 0, &sbus_data_ready_01__attributes);
 8001180:	4a64      	ldr	r2, [pc, #400]	@ (8001314 <MX_FREERTOS_Init+0x1c8>)
 8001182:	2100      	movs	r1, #0
 8001184:	2001      	movs	r0, #1
 8001186:	f00b fae0 	bl	800c74a <osSemaphoreNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a62      	ldr	r2, [pc, #392]	@ (8001318 <MX_FREERTOS_Init+0x1cc>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of spi_tx_finished */
  spi_tx_finishedHandle = osSemaphoreNew(1, 0, &spi_tx_finished_attributes);
 8001190:	4a62      	ldr	r2, [pc, #392]	@ (800131c <MX_FREERTOS_Init+0x1d0>)
 8001192:	2100      	movs	r1, #0
 8001194:	2001      	movs	r0, #1
 8001196:	f00b fad8 	bl	800c74a <osSemaphoreNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a60      	ldr	r2, [pc, #384]	@ (8001320 <MX_FREERTOS_Init+0x1d4>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_tx_idle */
  bluetooth_tx_idleHandle = osSemaphoreNew(1, 0, &bluetooth_tx_idle_attributes);
 80011a0:	4a60      	ldr	r2, [pc, #384]	@ (8001324 <MX_FREERTOS_Init+0x1d8>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	2001      	movs	r0, #1
 80011a6:	f00b fad0 	bl	800c74a <osSemaphoreNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001328 <MX_FREERTOS_Init+0x1dc>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* creation of serial_servo_rx_complete */
  serial_servo_rx_completeHandle = osSemaphoreNew(1, 1, &serial_servo_rx_complete_attributes);
 80011b0:	4a5e      	ldr	r2, [pc, #376]	@ (800132c <MX_FREERTOS_Init+0x1e0>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	2001      	movs	r0, #1
 80011b6:	f00b fac8 	bl	800c74a <osSemaphoreNew>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001330 <MX_FREERTOS_Init+0x1e4>)
 80011be:	6013      	str	r3, [r2, #0]
    /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of button_timer */
  button_timerHandle = osTimerNew(button_timer_callback, osTimerPeriodic, NULL, &button_timer_attributes);
 80011c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001334 <MX_FREERTOS_Init+0x1e8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	2101      	movs	r1, #1
 80011c6:	485c      	ldr	r0, [pc, #368]	@ (8001338 <MX_FREERTOS_Init+0x1ec>)
 80011c8:	f00b f8c8 	bl	800c35c <osTimerNew>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a5b      	ldr	r2, [pc, #364]	@ (800133c <MX_FREERTOS_Init+0x1f0>)
 80011d0:	6013      	str	r3, [r2, #0]

  /* creation of led_timer */
  led_timerHandle = osTimerNew(led_timer_callback, osTimerPeriodic, NULL, &led_timer_attributes);
 80011d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001340 <MX_FREERTOS_Init+0x1f4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	2101      	movs	r1, #1
 80011d8:	485a      	ldr	r0, [pc, #360]	@ (8001344 <MX_FREERTOS_Init+0x1f8>)
 80011da:	f00b f8bf 	bl	800c35c <osTimerNew>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a59      	ldr	r2, [pc, #356]	@ (8001348 <MX_FREERTOS_Init+0x1fc>)
 80011e2:	6013      	str	r3, [r2, #0]

  /* creation of lvgl_timer */
  lvgl_timerHandle = osTimerNew(lvgl_timer_callback, osTimerPeriodic, NULL, &lvgl_timer_attributes);
 80011e4:	4b59      	ldr	r3, [pc, #356]	@ (800134c <MX_FREERTOS_Init+0x200>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	4859      	ldr	r0, [pc, #356]	@ (8001350 <MX_FREERTOS_Init+0x204>)
 80011ec:	f00b f8b6 	bl	800c35c <osTimerNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a58      	ldr	r2, [pc, #352]	@ (8001354 <MX_FREERTOS_Init+0x208>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* creation of buzzer_timer */
  buzzer_timerHandle = osTimerNew(buzzer_timer_callback, osTimerPeriodic, NULL, &buzzer_timer_attributes);
 80011f6:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <MX_FREERTOS_Init+0x20c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	2101      	movs	r1, #1
 80011fc:	4857      	ldr	r0, [pc, #348]	@ (800135c <MX_FREERTOS_Init+0x210>)
 80011fe:	f00b f8ad 	bl	800c35c <osTimerNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a56      	ldr	r2, [pc, #344]	@ (8001360 <MX_FREERTOS_Init+0x214>)
 8001206:	6013      	str	r3, [r2, #0]

  /* creation of battery_check_timer */
  battery_check_timerHandle = osTimerNew(battery_check_timer_callback, osTimerPeriodic, NULL, &battery_check_timer_attributes);
 8001208:	4b56      	ldr	r3, [pc, #344]	@ (8001364 <MX_FREERTOS_Init+0x218>)
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	4856      	ldr	r0, [pc, #344]	@ (8001368 <MX_FREERTOS_Init+0x21c>)
 8001210:	f00b f8a4 	bl	800c35c <osTimerNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a55      	ldr	r2, [pc, #340]	@ (800136c <MX_FREERTOS_Init+0x220>)
 8001218:	6013      	str	r3, [r2, #0]

  /* creation of IMU_read_timer */
  IMU_read_timerHandle = osTimerNew(IMU_read_timer_callback, osTimerPeriodic, NULL, &IMU_read_timer_attributes);
 800121a:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <MX_FREERTOS_Init+0x224>)
 800121c:	2200      	movs	r2, #0
 800121e:	2101      	movs	r1, #1
 8001220:	4854      	ldr	r0, [pc, #336]	@ (8001374 <MX_FREERTOS_Init+0x228>)
 8001222:	f00b f89b 	bl	800c35c <osTimerNew>
 8001226:	4603      	mov	r3, r0
 8001228:	4a53      	ldr	r2, [pc, #332]	@ (8001378 <MX_FREERTOS_Init+0x22c>)
 800122a:	6013      	str	r3, [r2, #0]
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of packet_tx_queue */
  packet_tx_queueHandle = osMessageQueueNew (64, sizeof(void*), &packet_tx_queue_attributes);
 800122c:	4a53      	ldr	r2, [pc, #332]	@ (800137c <MX_FREERTOS_Init+0x230>)
 800122e:	2104      	movs	r1, #4
 8001230:	2040      	movs	r0, #64	@ 0x40
 8001232:	f00b fba9 	bl	800c988 <osMessageQueueNew>
 8001236:	4603      	mov	r3, r0
 8001238:	4a51      	ldr	r2, [pc, #324]	@ (8001380 <MX_FREERTOS_Init+0x234>)
 800123a:	6013      	str	r3, [r2, #0]

  /* creation of lvgl_event_queue */
  lvgl_event_queueHandle = osMessageQueueNew (16, sizeof(void*), &lvgl_event_queue_attributes);
 800123c:	4a51      	ldr	r2, [pc, #324]	@ (8001384 <MX_FREERTOS_Init+0x238>)
 800123e:	2104      	movs	r1, #4
 8001240:	2010      	movs	r0, #16
 8001242:	f00b fba1 	bl	800c988 <osMessageQueueNew>
 8001246:	4603      	mov	r3, r0
 8001248:	4a4f      	ldr	r2, [pc, #316]	@ (8001388 <MX_FREERTOS_Init+0x23c>)
 800124a:	6013      	str	r3, [r2, #0]

  /* creation of moving_ctrl_queue */
  moving_ctrl_queueHandle = osMessageQueueNew (32, sizeof(char), &moving_ctrl_queue_attributes);
 800124c:	4a4f      	ldr	r2, [pc, #316]	@ (800138c <MX_FREERTOS_Init+0x240>)
 800124e:	2101      	movs	r1, #1
 8001250:	2020      	movs	r0, #32
 8001252:	f00b fb99 	bl	800c988 <osMessageQueueNew>
 8001256:	4603      	mov	r3, r0
 8001258:	4a4d      	ldr	r2, [pc, #308]	@ (8001390 <MX_FREERTOS_Init+0x244>)
 800125a:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_tx_queue */
  bluetooth_tx_queueHandle = osMessageQueueNew (8, 8, &bluetooth_tx_queue_attributes);
 800125c:	4a4d      	ldr	r2, [pc, #308]	@ (8001394 <MX_FREERTOS_Init+0x248>)
 800125e:	2108      	movs	r1, #8
 8001260:	2008      	movs	r0, #8
 8001262:	f00b fb91 	bl	800c988 <osMessageQueueNew>
 8001266:	4603      	mov	r3, r0
 8001268:	4a4b      	ldr	r2, [pc, #300]	@ (8001398 <MX_FREERTOS_Init+0x24c>)
 800126a:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800126c:	4a4b      	ldr	r2, [pc, #300]	@ (800139c <MX_FREERTOS_Init+0x250>)
 800126e:	2100      	movs	r1, #0
 8001270:	484b      	ldr	r0, [pc, #300]	@ (80013a0 <MX_FREERTOS_Init+0x254>)
 8001272:	f00a ffb1 	bl	800c1d8 <osThreadNew>
 8001276:	4603      	mov	r3, r0
 8001278:	4a4a      	ldr	r2, [pc, #296]	@ (80013a4 <MX_FREERTOS_Init+0x258>)
 800127a:	6013      	str	r3, [r2, #0]

  /* creation of imu_task */
  imu_taskHandle = osThreadNew(imu_task_entry, NULL, &imu_task_attributes);
 800127c:	4a4a      	ldr	r2, [pc, #296]	@ (80013a8 <MX_FREERTOS_Init+0x25c>)
 800127e:	2100      	movs	r1, #0
 8001280:	484a      	ldr	r0, [pc, #296]	@ (80013ac <MX_FREERTOS_Init+0x260>)
 8001282:	f00a ffa9 	bl	800c1d8 <osThreadNew>
 8001286:	4603      	mov	r3, r0
 8001288:	4a49      	ldr	r2, [pc, #292]	@ (80013b0 <MX_FREERTOS_Init+0x264>)
 800128a:	6013      	str	r3, [r2, #0]

  /* creation of packet_tx_task */
  packet_tx_taskHandle = osThreadNew(packet_tx_task_entry, NULL, &packet_tx_task_attributes);
 800128c:	4a49      	ldr	r2, [pc, #292]	@ (80013b4 <MX_FREERTOS_Init+0x268>)
 800128e:	2100      	movs	r1, #0
 8001290:	4849      	ldr	r0, [pc, #292]	@ (80013b8 <MX_FREERTOS_Init+0x26c>)
 8001292:	f00a ffa1 	bl	800c1d8 <osThreadNew>
 8001296:	4603      	mov	r3, r0
 8001298:	4a48      	ldr	r2, [pc, #288]	@ (80013bc <MX_FREERTOS_Init+0x270>)
 800129a:	6013      	str	r3, [r2, #0]

  /* creation of packet_rx_task */
  packet_rx_taskHandle = osThreadNew(packet_rx_task_entry, NULL, &packet_rx_task_attributes);
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <MX_FREERTOS_Init+0x274>)
 800129e:	2100      	movs	r1, #0
 80012a0:	4848      	ldr	r0, [pc, #288]	@ (80013c4 <MX_FREERTOS_Init+0x278>)
 80012a2:	f00a ff99 	bl	800c1d8 <osThreadNew>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a47      	ldr	r2, [pc, #284]	@ (80013c8 <MX_FREERTOS_Init+0x27c>)
 80012aa:	6013      	str	r3, [r2, #0]

  /* creation of sbus_rx_task */
  sbus_rx_taskHandle = osThreadNew(sbus_rx_task_entry, NULL, &sbus_rx_task_attributes);
 80012ac:	4a47      	ldr	r2, [pc, #284]	@ (80013cc <MX_FREERTOS_Init+0x280>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4847      	ldr	r0, [pc, #284]	@ (80013d0 <MX_FREERTOS_Init+0x284>)
 80012b2:	f00a ff91 	bl	800c1d8 <osThreadNew>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a46      	ldr	r2, [pc, #280]	@ (80013d4 <MX_FREERTOS_Init+0x288>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* creation of gui_task */
  gui_taskHandle = osThreadNew(gui_task_entry, NULL, &gui_task_attributes);
 80012bc:	4a46      	ldr	r2, [pc, #280]	@ (80013d8 <MX_FREERTOS_Init+0x28c>)
 80012be:	2100      	movs	r1, #0
 80012c0:	4846      	ldr	r0, [pc, #280]	@ (80013dc <MX_FREERTOS_Init+0x290>)
 80012c2:	f00a ff89 	bl	800c1d8 <osThreadNew>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a45      	ldr	r2, [pc, #276]	@ (80013e0 <MX_FREERTOS_Init+0x294>)
 80012ca:	6013      	str	r3, [r2, #0]

  /* creation of app_task */
  app_taskHandle = osThreadNew(app_task_entry, NULL, &app_task_attributes);
 80012cc:	4a45      	ldr	r2, [pc, #276]	@ (80013e4 <MX_FREERTOS_Init+0x298>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4845      	ldr	r0, [pc, #276]	@ (80013e8 <MX_FREERTOS_Init+0x29c>)
 80012d2:	f00a ff81 	bl	800c1d8 <osThreadNew>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a44      	ldr	r2, [pc, #272]	@ (80013ec <MX_FREERTOS_Init+0x2a0>)
 80012da:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_task */
  bluetooth_taskHandle = osThreadNew(bluetooth_task_entry, NULL, &bluetooth_task_attributes);
 80012dc:	4a44      	ldr	r2, [pc, #272]	@ (80013f0 <MX_FREERTOS_Init+0x2a4>)
 80012de:	2100      	movs	r1, #0
 80012e0:	4844      	ldr	r0, [pc, #272]	@ (80013f4 <MX_FREERTOS_Init+0x2a8>)
 80012e2:	f00a ff79 	bl	800c1d8 <osThreadNew>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a43      	ldr	r2, [pc, #268]	@ (80013f8 <MX_FREERTOS_Init+0x2ac>)
 80012ea:	6013      	str	r3, [r2, #0]
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of sbus_data_ready_event_ */
  sbus_data_ready_event_Handle = osEventFlagsNew(&sbus_data_ready_event__attributes);
 80012ec:	4843      	ldr	r0, [pc, #268]	@ (80013fc <MX_FREERTOS_Init+0x2b0>)
 80012ee:	f00b f8df 	bl	800c4b0 <osEventFlagsNew>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a42      	ldr	r2, [pc, #264]	@ (8001400 <MX_FREERTOS_Init+0x2b4>)
 80012f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08012954 	.word	0x08012954
 8001300:	20002668 	.word	0x20002668
 8001304:	08012964 	.word	0x08012964
 8001308:	2000266c 	.word	0x2000266c
 800130c:	08012974 	.word	0x08012974
 8001310:	20002670 	.word	0x20002670
 8001314:	08012984 	.word	0x08012984
 8001318:	20002674 	.word	0x20002674
 800131c:	08012994 	.word	0x08012994
 8001320:	20002678 	.word	0x20002678
 8001324:	080129a4 	.word	0x080129a4
 8001328:	2000267c 	.word	0x2000267c
 800132c:	080129b4 	.word	0x080129b4
 8001330:	20002680 	.word	0x20002680
 8001334:	080128f4 	.word	0x080128f4
 8001338:	0800acd5 	.word	0x0800acd5
 800133c:	20002548 	.word	0x20002548
 8001340:	08012904 	.word	0x08012904
 8001344:	0800b331 	.word	0x0800b331
 8001348:	20002578 	.word	0x20002578
 800134c:	08012914 	.word	0x08012914
 8001350:	08001455 	.word	0x08001455
 8001354:	200025a8 	.word	0x200025a8
 8001358:	08012924 	.word	0x08012924
 800135c:	0800addd 	.word	0x0800addd
 8001360:	200025d8 	.word	0x200025d8
 8001364:	08012934 	.word	0x08012934
 8001368:	0800bf35 	.word	0x0800bf35
 800136c:	20002608 	.word	0x20002608
 8001370:	08012944 	.word	0x08012944
 8001374:	08001469 	.word	0x08001469
 8001378:	20002638 	.word	0x20002638
 800137c:	08012894 	.word	0x08012894
 8001380:	20002258 	.word	0x20002258
 8001384:	080128ac 	.word	0x080128ac
 8001388:	200023ac 	.word	0x200023ac
 800138c:	080128c4 	.word	0x080128c4
 8001390:	20002440 	.word	0x20002440
 8001394:	080128dc 	.word	0x080128dc
 8001398:	200024b4 	.word	0x200024b4
 800139c:	08012774 	.word	0x08012774
 80013a0:	08001405 	.word	0x08001405
 80013a4:	20000158 	.word	0x20000158
 80013a8:	08012798 	.word	0x08012798
 80013ac:	08001415 	.word	0x08001415
 80013b0:	200003b8 	.word	0x200003b8
 80013b4:	080127bc 	.word	0x080127bc
 80013b8:	0800ba31 	.word	0x0800ba31
 80013bc:	20000618 	.word	0x20000618
 80013c0:	080127e0 	.word	0x080127e0
 80013c4:	0800b9ed 	.word	0x0800b9ed
 80013c8:	20000878 	.word	0x20000878
 80013cc:	08012804 	.word	0x08012804
 80013d0:	08001425 	.word	0x08001425
 80013d4:	20000cd8 	.word	0x20000cd8
 80013d8:	08012828 	.word	0x08012828
 80013dc:	08001435 	.word	0x08001435
 80013e0:	20000f38 	.word	0x20000f38
 80013e4:	0801284c 	.word	0x0801284c
 80013e8:	0800bc81 	.word	0x0800bc81
 80013ec:	20001798 	.word	0x20001798
 80013f0:	08012870 	.word	0x08012870
 80013f4:	08001445 	.word	0x08001445
 80013f8:	20001ff8 	.word	0x20001ff8
 80013fc:	080129c4 	.word	0x080129c4
 8001400:	20002684 	.word	0x20002684

08001404 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for(;;) {
        osDelay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f00a ff75 	bl	800c2fc <osDelay>
 8001412:	e7fb      	b.n	800140c <StartDefaultTask+0x8>

08001414 <imu_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_task_entry */
__weak void imu_task_entry(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_task_entry */
    /* Infinite loop */
    for(;;) {
        osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f00a ff6d 	bl	800c2fc <osDelay>
 8001422:	e7fb      	b.n	800141c <imu_task_entry+0x8>

08001424 <sbus_rx_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sbus_rx_task_entry */
__weak void sbus_rx_task_entry(void *argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sbus_rx_task_entry */
    /* Infinite loop */
    for(;;) {
        osDelay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f00a ff65 	bl	800c2fc <osDelay>
 8001432:	e7fb      	b.n	800142c <sbus_rx_task_entry+0x8>

08001434 <gui_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gui_task_entry */
__weak void gui_task_entry(void *argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gui_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f00a ff5d 	bl	800c2fc <osDelay>
 8001442:	e7fb      	b.n	800143c <gui_task_entry+0x8>

08001444 <bluetooth_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_bluetooth_task_entry */
__weak void bluetooth_task_entry(void *argument)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN bluetooth_task_entry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f00a ff55 	bl	800c2fc <osDelay>
 8001452:	e7fb      	b.n	800144c <bluetooth_task_entry+0x8>

08001454 <lvgl_timer_callback>:
  /* USER CODE END led_timer_callback */
}

/* lvgl_timer_callback function */
__weak void lvgl_timer_callback(void *argument)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lvgl_timer_callback */

  /* USER CODE END lvgl_timer_callback */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <IMU_read_timer_callback>:
  /* USER CODE END battery_check_timer_callback */
}

/* IMU_read_timer_callback function */
__weak void IMU_read_timer_callback(void *argument)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU_read_timer_callback */

  /* USER CODE END IMU_read_timer_callback */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4b9f      	ldr	r3, [pc, #636]	@ (8001714 <MX_GPIO_Init+0x298>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a9e      	ldr	r2, [pc, #632]	@ (8001714 <MX_GPIO_Init+0x298>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b98      	ldr	r3, [pc, #608]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a97      	ldr	r2, [pc, #604]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b95      	ldr	r3, [pc, #596]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b91      	ldr	r3, [pc, #580]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a90      	ldr	r2, [pc, #576]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b8e      	ldr	r3, [pc, #568]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a89      	ldr	r2, [pc, #548]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b87      	ldr	r3, [pc, #540]	@ (8001714 <MX_GPIO_Init+0x298>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b83      	ldr	r3, [pc, #524]	@ (8001714 <MX_GPIO_Init+0x298>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a82      	ldr	r2, [pc, #520]	@ (8001714 <MX_GPIO_Init+0x298>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b80      	ldr	r3, [pc, #512]	@ (8001714 <MX_GPIO_Init+0x298>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b7c      	ldr	r3, [pc, #496]	@ (8001714 <MX_GPIO_Init+0x298>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a7b      	ldr	r2, [pc, #492]	@ (8001714 <MX_GPIO_Init+0x298>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b79      	ldr	r3, [pc, #484]	@ (8001714 <MX_GPIO_Init+0x298>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SERIAL_SERVO_TX_EN_Pin|SERIAL_SERVO_RX_EN_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001540:	4875      	ldr	r0, [pc, #468]	@ (8001718 <MX_GPIO_Init+0x29c>)
 8001542:	f003 ff3b 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SYS_GPIO_Port, LED_SYS_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800154c:	4872      	ldr	r0, [pc, #456]	@ (8001718 <MX_GPIO_Init+0x29c>)
 800154e:	f003 ff35 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BLK_Pin|LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 41b0 	mov.w	r1, #22528	@ 0x5800
 8001558:	4870      	ldr	r0, [pc, #448]	@ (800171c <MX_GPIO_Init+0x2a0>)
 800155a:	f003 ff2f 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001564:	486d      	ldr	r0, [pc, #436]	@ (800171c <MX_GPIO_Init+0x2a0>)
 8001566:	f003 ff29 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_SERVO_3_GPIO_Port, PWM_SERVO_3_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001570:	486b      	ldr	r0, [pc, #428]	@ (8001720 <MX_GPIO_Init+0x2a4>)
 8001572:	f003 ff23 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_SERVO_4_GPIO_Port, PWM_SERVO_4_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157c:	4868      	ldr	r0, [pc, #416]	@ (8001720 <MX_GPIO_Init+0x2a4>)
 800157e:	f003 ff1d 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|PWM_SERVO_1_Pin|PWM_SERVO_2_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001588:	4866      	ldr	r0, [pc, #408]	@ (8001724 <MX_GPIO_Init+0x2a8>)
 800158a:	f003 ff17 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12
 800158e:	f249 031c 	movw	r3, #36892	@ 0x901c
 8001592:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	2303      	movs	r3, #3
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	485d      	ldr	r0, [pc, #372]	@ (8001718 <MX_GPIO_Init+0x29c>)
 80015a4:	f003 fd56 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80015a8:	f64e 4337 	movw	r3, #60471	@ 0xec37
 80015ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ae:	2303      	movs	r3, #3
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4858      	ldr	r0, [pc, #352]	@ (8001720 <MX_GPIO_Init+0x2a4>)
 80015be:	f003 fd49 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80015c2:	23fc      	movs	r3, #252	@ 0xfc
 80015c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4853      	ldr	r0, [pc, #332]	@ (8001724 <MX_GPIO_Init+0x2a8>)
 80015d6:	f003 fd3d 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015da:	2306      	movs	r3, #6
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	484e      	ldr	r0, [pc, #312]	@ (8001728 <MX_GPIO_Init+0x2ac>)
 80015ee:	f003 fd31 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SERIAL_SERVO_TX_EN_Pin|SERIAL_SERVO_RX_EN_Pin;
 80015f2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4843      	ldr	r0, [pc, #268]	@ (8001718 <MX_GPIO_Init+0x29c>)
 800160c:	f003 fd22 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SYS_Pin;
 8001610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800161e:	2301      	movs	r3, #1
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SYS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	483b      	ldr	r0, [pc, #236]	@ (8001718 <MX_GPIO_Init+0x29c>)
 800162a:	f003 fd13 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_ITR_Pin;
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001634:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IMU_ITR_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4838      	ldr	r0, [pc, #224]	@ (8001728 <MX_GPIO_Init+0x2ac>)
 8001646:	f003 fd05 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD15 PD0 PD1
                           PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800164a:	f248 4393 	movw	r3, #33939	@ 0x8493
 800164e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	482f      	ldr	r0, [pc, #188]	@ (800171c <MX_GPIO_Init+0x2a0>)
 8001660:	f003 fcf8 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_BLK_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin;
 8001664:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4827      	ldr	r0, [pc, #156]	@ (800171c <MX_GPIO_Init+0x2a0>)
 800167e:	f003 fce9 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 8001682:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4821      	ldr	r0, [pc, #132]	@ (8001720 <MX_GPIO_Init+0x2a4>)
 800169c:	f003 fcda 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80016a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	481a      	ldr	r0, [pc, #104]	@ (8001724 <MX_GPIO_Init+0x2a8>)
 80016ba:	f003 fccb 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin;
 80016be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4813      	ldr	r0, [pc, #76]	@ (8001724 <MX_GPIO_Init+0x2a8>)
 80016d8:	f003 fcbc 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin;
 80016dc:	2308      	movs	r3, #8
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MOTOR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	480b      	ldr	r0, [pc, #44]	@ (800171c <MX_GPIO_Init+0x2a0>)
 80016f0:	f003 fcb0 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin;
 80016f4:	2303      	movs	r3, #3
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_GPIO_Init+0x29c>)
 8001708:	f003 fca4 	bl	8005054 <HAL_GPIO_Init>

}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	@ 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	40021000 	.word	0x40021000
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40020800 	.word	0x40020800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400

0800172c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <MX_I2C2_Init+0x54>)
 8001732:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <MX_I2C2_Init+0x58>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <MX_I2C2_Init+0x54>)
 8001738:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <MX_I2C2_Init+0x5c>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <MX_I2C2_Init+0x54>)
 800173e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001742:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <MX_I2C2_Init+0x54>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <MX_I2C2_Init+0x54>)
 800174c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001750:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <MX_I2C2_Init+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <MX_I2C2_Init+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <MX_I2C2_Init+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_I2C2_Init+0x54>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_I2C2_Init+0x54>)
 800176c:	f003 fea6 	bl	80054bc <HAL_I2C_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001776:	f000 fa15 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200026a8 	.word	0x200026a8
 8001784:	40005800 	.word	0x40005800
 8001788:	00061a80 	.word	0x00061a80

0800178c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a49      	ldr	r2, [pc, #292]	@ (80018d0 <HAL_I2C_MspInit+0x144>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	f040 808b 	bne.w	80018c6 <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <HAL_I2C_MspInit+0x148>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	4a46      	ldr	r2, [pc, #280]	@ (80018d4 <HAL_I2C_MspInit+0x148>)
 80017ba:	f043 0302 	orr.w	r3, r3, #2
 80017be:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c0:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <HAL_I2C_MspInit+0x148>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	2312      	movs	r3, #18
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017de:	2304      	movs	r3, #4
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	483b      	ldr	r0, [pc, #236]	@ (80018d8 <HAL_I2C_MspInit+0x14c>)
 80017ea:	f003 fc33 	bl	8005054 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <HAL_I2C_MspInit+0x148>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <HAL_I2C_MspInit+0x148>)
 80017f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <HAL_I2C_MspInit+0x148>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800180a:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 800180c:	4a34      	ldr	r2, [pc, #208]	@ (80018e0 <HAL_I2C_MspInit+0x154>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001810:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001812:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001816:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800183e:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001840:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001844:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001846:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800184c:	4823      	ldr	r0, [pc, #140]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 800184e:	f002 fff3 	bl	8004838 <HAL_DMA_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001858:	f000 f9a4 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a1f      	ldr	r2, [pc, #124]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38
 8001862:	4a1e      	ldr	r2, [pc, #120]	@ (80018dc <HAL_I2C_MspInit+0x150>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 800186a:	4a1f      	ldr	r2, [pc, #124]	@ (80018e8 <HAL_I2C_MspInit+0x15c>)
 800186c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800186e:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 8001870:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001874:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 8001878:	2240      	movs	r2, #64	@ 0x40
 800187a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 8001884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001888:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 800189e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018a2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80018aa:	480e      	ldr	r0, [pc, #56]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 80018ac:	f002 ffc4 	bl	8004838 <HAL_DMA_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 80018b6:	f000 f975 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c0:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <HAL_I2C_MspInit+0x158>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005800 	.word	0x40005800
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020400 	.word	0x40020400
 80018dc:	200026fc 	.word	0x200026fc
 80018e0:	40026040 	.word	0x40026040
 80018e4:	2000275c 	.word	0x2000275c
 80018e8:	400260b8 	.word	0x400260b8

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  //��־��ӡ���ܳ�ʼ��
  LOG_INIT();
 80018f2:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <main+0xd4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
  lwmem_assignmem(lwmem_regions);  /* ��̬�ڴ��ʼ�� */
 80018f8:	4932      	ldr	r1, [pc, #200]	@ (80019c4 <main+0xd8>)
 80018fa:	2000      	movs	r0, #0
 80018fc:	f00e fdf8 	bl	80104f0 <lwmem_assignmem_ex>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001900:	f002 f952 	bl	8003ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001904:	f000 f864 	bl	80019d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    //����IIC1
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <main+0xdc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <main+0xdc>)
 8001912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001916:	6413      	str	r3, [r2, #64]	@ 0x40
 8001918:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <main+0xdc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
    //����DMA����
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <main+0xdc>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <main+0xdc>)
 800192e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001932:	6313      	str	r3, [r2, #48]	@ 0x30
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <main+0xdc>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001940:	f7ff fd9c 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 8001944:	f7ff fbb6 	bl	80010b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001948:	f001 fda0 	bl	800348c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800194c:	f000 f930 	bl	8001bb0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001950:	f000 fef0 	bl	8002734 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001954:	f000 ffb4 	bl	80028c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001958:	f001 f8ae 	bl	8002ab8 <MX_TIM5_Init>
  MX_TIM9_Init();
 800195c:	f001 f936 	bl	8002bcc <MX_TIM9_Init>
  MX_TIM10_Init();
 8001960:	f001 f9a2 	bl	8002ca8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001964:	f001 f9ee 	bl	8002d44 <MX_TIM11_Init>
  MX_I2C2_Init();
 8001968:	f7ff fee0 	bl	800172c <MX_I2C2_Init>
  MX_UART5_Init();
 800196c:	f001 fd60 	bl	8003430 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8001970:	f001 fdb6 	bl	80034e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001974:	f001 fdde 	bl	8003534 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001978:	f001 fe06 	bl	8003588 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800197c:	f001 f8f0 	bl	8002b60 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001980:	f000 fff2 	bl	8002968 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001984:	f001 f844 	bl	8002a10 <MX_TIM4_Init>
  MX_TIM13_Init();
 8001988:	f001 fa92 	bl	8002eb0 <MX_TIM13_Init>
  MX_CRC_Init();
 800198c:	f7ff fb5c 	bl	8001048 <MX_CRC_Init>
  MX_TIM12_Init();
 8001990:	f001 fa26 	bl	8002de0 <MX_TIM12_Init>
  MX_ADC1_Init();
 8001994:	f7ff fa80 	bl	8000e98 <MX_ADC1_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001998:	f002 f868 	bl	8003a6c <MX_USB_OTG_HS_HCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800199c:	f000 f884 	bl	8001aa8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //��ӡ��Ϣ����printf()�������÷�һ�����ܹ����ݵȼ�����������־���
  LOG_DEBUG("Start...\r\n");
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <main+0xd4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <main+0xc2>
 80019a8:	4808      	ldr	r0, [pc, #32]	@ (80019cc <main+0xe0>)
 80019aa:	f00f f9b1 	bl	8010d10 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019ae:	f00a fbc9 	bl	800c144 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019b2:	f7ff fbcb 	bl	800114c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019b6:	f00a fbe9 	bl	800c18c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 80019ba:	bf00      	nop
 80019bc:	e7fd      	b.n	80019ba <main+0xce>
 80019be:	bf00      	nop
 80019c0:	20003930 	.word	0x20003930
 80019c4:	20000010 	.word	0x20000010
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08012730 	.word	0x08012730

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	@ 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	@ 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f00f fa76 	bl	8010ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <SystemClock_Config+0xd0>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <SystemClock_Config+0xd0>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a04:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <SystemClock_Config+0xd0>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <SystemClock_Config+0xd4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a22      	ldr	r2, [pc, #136]	@ (8001aa4 <SystemClock_Config+0xd4>)
 8001a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <SystemClock_Config+0xd4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a40:	2308      	movs	r3, #8
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a44:	23a8      	movs	r3, #168	@ 0xa8
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 fe75 	bl	8005744 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a60:	f000 f8a0 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2105      	movs	r1, #5
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 f8d6 	bl	8005c34 <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a8e:	f000 f889 	bl	8001ba4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001a92:	f004 f9b5 	bl	8005e00 <HAL_RCC_EnableCSS>
}
 8001a96:	bf00      	nop
 8001a98:	3750      	adds	r7, #80	@ 0x50
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40007000 	.word	0x40007000

08001aa8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2105      	movs	r1, #5
 8001ab0:	200b      	movs	r0, #11
 8001ab2:	f002 fe7b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ab6:	200b      	movs	r0, #11
 8001ab8:	f002 fe94 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2105      	movs	r1, #5
 8001ac0:	200c      	movs	r0, #12
 8001ac2:	f002 fe73 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ac6:	200c      	movs	r0, #12
 8001ac8:	f002 fe8c 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2105      	movs	r1, #5
 8001ad0:	200d      	movs	r0, #13
 8001ad2:	f002 fe6b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ad6:	200d      	movs	r0, #13
 8001ad8:	f002 fe84 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	200e      	movs	r0, #14
 8001ae2:	f002 fe63 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ae6:	200e      	movs	r0, #14
 8001ae8:	f002 fe7c 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2105      	movs	r1, #5
 8001af0:	2026      	movs	r0, #38	@ 0x26
 8001af2:	f002 fe5b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001af6:	2026      	movs	r0, #38	@ 0x26
 8001af8:	f002 fe74 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2105      	movs	r1, #5
 8001b00:	2027      	movs	r0, #39	@ 0x27
 8001b02:	f002 fe53 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b06:	2027      	movs	r0, #39	@ 0x27
 8001b08:	f002 fe6c 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2105      	movs	r1, #5
 8001b10:	2028      	movs	r0, #40	@ 0x28
 8001b12:	f002 fe4b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b16:	2028      	movs	r0, #40	@ 0x28
 8001b18:	f002 fe64 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* TIM8_UP_TIM13_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2105      	movs	r1, #5
 8001b20:	202c      	movs	r0, #44	@ 0x2c
 8001b22:	f002 fe43 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b26:	202c      	movs	r0, #44	@ 0x2c
 8001b28:	f002 fe5c 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2105      	movs	r1, #5
 8001b30:	202f      	movs	r0, #47	@ 0x2f
 8001b32:	f002 fe3b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b36:	202f      	movs	r0, #47	@ 0x2f
 8001b38:	f002 fe54 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2105      	movs	r1, #5
 8001b40:	2032      	movs	r0, #50	@ 0x32
 8001b42:	f002 fe33 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b46:	2032      	movs	r0, #50	@ 0x32
 8001b48:	f002 fe4c 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2105      	movs	r1, #5
 8001b50:	2035      	movs	r0, #53	@ 0x35
 8001b52:	f002 fe2b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001b56:	2035      	movs	r0, #53	@ 0x35
 8001b58:	f002 fe44 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2037      	movs	r0, #55	@ 0x37
 8001b62:	f002 fe23 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b66:	2037      	movs	r0, #55	@ 0x37
 8001b68:	f002 fe3c 	bl	80047e4 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	2047      	movs	r0, #71	@ 0x47
 8001b72:	f002 fe1b 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b76:	2047      	movs	r0, #71	@ 0x47
 8001b78:	f002 fe34 	bl	80047e4 <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b92:	f002 f82b 	bl	8003bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40002000 	.word	0x40002000

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <Error_Handler+0x8>

08001bb0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bb6:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <MX_SPI2_Init+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <MX_SPI2_Init+0x64>)
 8001c02:	f004 fa8f 	bl	8006124 <HAL_SPI_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c0c:	f7ff ffca 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200027bc 	.word	0x200027bc
 8001c18:	40003800 	.word	0x40003800

08001c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3f      	ldr	r2, [pc, #252]	@ (8001d38 <HAL_SPI_MspInit+0x11c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d177      	bne.n	8001d2e <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b3e      	ldr	r3, [pc, #248]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a3d      	ldr	r2, [pc, #244]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b37      	ldr	r3, [pc, #220]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b34      	ldr	r3, [pc, #208]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <HAL_SPI_MspInit+0x120>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c92:	2308      	movs	r3, #8
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4824      	ldr	r0, [pc, #144]	@ (8001d40 <HAL_SPI_MspInit+0x124>)
 8001cae:	f003 f9d1 	bl	8005054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481d      	ldr	r0, [pc, #116]	@ (8001d44 <HAL_SPI_MspInit+0x128>)
 8001cd0:	f003 f9c0 	bl	8005054 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <HAL_SPI_MspInit+0x130>)
 8001cd8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cec:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001cee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d12:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001d14:	f002 fd90 	bl	8004838 <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001d1e:	f7ff ff41 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001d26:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_SPI_MspInit+0x12c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	@ 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40003800 	.word	0x40003800
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020400 	.word	0x40020400
 8001d48:	2000283c 	.word	0x2000283c
 8001d4c:	40026070 	.word	0x40026070

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_MspInit+0x54>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a11      	ldr	r2, [pc, #68]	@ (8001da4 <HAL_MspInit+0x54>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_MspInit+0x54>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_MspInit+0x54>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_MspInit+0x54>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_MspInit+0x54>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	210f      	movs	r1, #15
 8001d92:	f06f 0001 	mvn.w	r0, #1
 8001d96:	f002 fd09 	bl	80047ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	@ 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <HAL_InitTick+0xe4>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	4a32      	ldr	r2, [pc, #200]	@ (8001e8c <HAL_InitTick+0xe4>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc8:	4b30      	ldr	r3, [pc, #192]	@ (8001e8c <HAL_InitTick+0xe4>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd4:	f107 0210 	add.w	r2, r7, #16
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f952 	bl	8006088 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dee:	f004 f923 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8001df2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001df4:	e004      	b.n	8001e00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001df6:	f004 f91f 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e02:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_InitTick+0xe8>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e10:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <HAL_InitTick+0xf0>)
 8001e12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e1a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001e34:	4817      	ldr	r0, [pc, #92]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e36:	f004 fa81 	bl	800633c <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11b      	bne.n	8001e80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001e48:	4812      	ldr	r0, [pc, #72]	@ (8001e94 <HAL_InitTick+0xec>)
 8001e4a:	f004 fad3 	bl	80063f4 <HAL_TIM_Base_Start_IT>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e5c:	202d      	movs	r0, #45	@ 0x2d
 8001e5e:	f002 fcc1 	bl	80047e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d808      	bhi.n	8001e7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	202d      	movs	r0, #45	@ 0x2d
 8001e6e:	f002 fc9d 	bl	80047ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_InitTick+0xf4>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e002      	b.n	8001e80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3738      	adds	r7, #56	@ 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	2000289c 	.word	0x2000289c
 8001e98:	40002000 	.word	0x40002000
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <serial_servo_checksum>:
int serial_servo_read_vin_limit(SerialServoControllerTypeDef *self, uint32_t servo_id, uint16_t limit[2]);
int serial_servo_read_vin(SerialServoControllerTypeDef *self, uint32_t servo_id, uint16_t *vin);
int serial_servo_read_load_unload(SerialServoControllerTypeDef *self, uint32_t servo_id, uint8_t* load_unload);

static inline uint8_t serial_servo_checksum(const uint8_t buf[])
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    uint16_t temp = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	81fb      	strh	r3, [r7, #14]
    for (int i = 2; i < buf[3] + 2; ++i) {
 8001eac:	2302      	movs	r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	e00a      	b.n	8001ec8 <serial_servo_checksum+0x28>
        temp += buf[i];
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	81fb      	strh	r3, [r7, #14]
    for (int i = 2; i < buf[3] + 2; ++i) {
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3303      	adds	r3, #3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dded      	ble.n	8001eb2 <serial_servo_checksum+0x12>
    }
    return (uint8_t)(~temp);
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <serial_servo_rx_handler>:

static inline int serial_servo_rx_handler(SerialServoControllerTypeDef *self, uint8_t rx_byte)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
    switch (self->rx_state) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b06      	cmp	r3, #6
 8001efe:	f200 8082 	bhi.w	8002006 <serial_servo_rx_handler+0x11a>
 8001f02:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <serial_servo_rx_handler+0x1c>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f25 	.word	0x08001f25
 8001f0c:	08001f43 	.word	0x08001f43
 8001f10:	08001f5f 	.word	0x08001f5f
 8001f14:	08001f6f 	.word	0x08001f6f
 8001f18:	08001f91 	.word	0x08001f91
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fdd 	.word	0x08001fdd
        case SERIAL_SERVO_RECV_STARTBYTE_1: {
            self->rx_state = SERIAL_SERVO_FRAME_HEADER == rx_byte ? SERIAL_SERVO_RECV_STARTBYTE_2 : SERIAL_SERVO_RECV_STARTBYTE_1;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b55      	cmp	r3, #85	@ 0x55
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	701a      	strb	r2, [r3, #0]
            self->rx_frame.header_1 = SERIAL_SERVO_FRAME_HEADER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2255      	movs	r2, #85	@ 0x55
 8001f3a:	705a      	strb	r2, [r3, #1]
            return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	e066      	b.n	8002010 <serial_servo_rx_handler+0x124>
        }
        case SERIAL_SERVO_RECV_STARTBYTE_2: {
            self->rx_state = 0x55 == rx_byte ? SERIAL_SERVO_RECV_SERVO_ID : SERIAL_SERVO_RECV_STARTBYTE_1;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	2b55      	cmp	r3, #85	@ 0x55
 8001f46:	d101      	bne.n	8001f4c <serial_servo_rx_handler+0x60>
 8001f48:	2202      	movs	r2, #2
 8001f4a:	e000      	b.n	8001f4e <serial_servo_rx_handler+0x62>
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	701a      	strb	r2, [r3, #0]
            self->rx_frame.header_2 = SERIAL_SERVO_FRAME_HEADER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2255      	movs	r2, #85	@ 0x55
 8001f56:	709a      	strb	r2, [r3, #2]
            return -2;
 8001f58:	f06f 0301 	mvn.w	r3, #1
 8001f5c:	e058      	b.n	8002010 <serial_servo_rx_handler+0x124>
        }
        case SERIAL_SERVO_RECV_SERVO_ID: {
            self->rx_frame.elements.servo_id = rx_byte;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	70da      	strb	r2, [r3, #3]
			self->rx_state = SERIAL_SERVO_RECV_LENGTH;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	701a      	strb	r2, [r3, #0]
            return 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e050      	b.n	8002010 <serial_servo_rx_handler+0x124>
        }
        case SERIAL_SERVO_RECV_LENGTH: {
            if(rx_byte > 7) {
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	2b07      	cmp	r3, #7
 8001f72:	d905      	bls.n	8001f80 <serial_servo_rx_handler+0x94>
                self->rx_state = SERIAL_SERVO_RECV_STARTBYTE_1; /* 包长度超过允许长度 */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
                return -3;
 8001f7a:	f06f 0302 	mvn.w	r3, #2
 8001f7e:	e047      	b.n	8002010 <serial_servo_rx_handler+0x124>
            }
            self->rx_frame.elements.length = rx_byte;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	711a      	strb	r2, [r3, #4]
            self->rx_state = SERIAL_SERVO_RECV_COMMAND;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	701a      	strb	r2, [r3, #0]
            return 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e03f      	b.n	8002010 <serial_servo_rx_handler+0x124>
        }
        case SERIAL_SERVO_RECV_COMMAND: {
            self->rx_frame.elements.command = rx_byte;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	715a      	strb	r2, [r3, #5]
            self->rx_args_index = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
            self->rx_state = self->rx_frame.elements.length == 6 ? SERIAL_SERVO_RECV_CHECKSUM : SERIAL_SERVO_RECV_ARGUMENTS; /* 没有参数的话直接进入校验字段 */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d101      	bne.n	8001fa8 <serial_servo_rx_handler+0xbc>
 8001fa4:	2206      	movs	r2, #6
 8001fa6:	e000      	b.n	8001faa <serial_servo_rx_handler+0xbe>
 8001fa8:	2205      	movs	r2, #5
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	701a      	strb	r2, [r3, #0]
            return 3;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e02e      	b.n	8002010 <serial_servo_rx_handler+0x124>
        }
        case SERIAL_SERVO_RECV_ARGUMENTS: {
            self->rx_frame.elements.args[self->rx_args_index++] = rx_byte;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6111      	str	r1, [r2, #16]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	719a      	strb	r2, [r3, #6]
            if (self->rx_args_index + 3 == self->rx_frame.elements.length) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	7912      	ldrb	r2, [r2, #4]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d102      	bne.n	8001fd8 <serial_servo_rx_handler+0xec>
                self->rx_state = SERIAL_SERVO_RECV_CHECKSUM;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	701a      	strb	r2, [r3, #0]
            }
            return 4;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e019      	b.n	8002010 <serial_servo_rx_handler+0x124>
        }
        case SERIAL_SERVO_RECV_CHECKSUM: {
            if(serial_servo_checksum((uint8_t*)&self->rx_frame) != rx_byte) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <serial_servo_checksum>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d005      	beq.n	8001ffc <serial_servo_rx_handler+0x110>
                self->rx_state = SERIAL_SERVO_RECV_STARTBYTE_1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
                return -99;
 8001ff6:	f06f 0362 	mvn.w	r3, #98	@ 0x62
 8001ffa:	e009      	b.n	8002010 <serial_servo_rx_handler+0x124>
            } else {
                self->rx_state = SERIAL_SERVO_RECV_STARTBYTE_1;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
                return 0;
 8002002:	2300      	movs	r3, #0
 8002004:	e004      	b.n	8002010 <serial_servo_rx_handler+0x124>
            }
        }

        default: {
            self->rx_state = SERIAL_SERVO_RECV_STARTBYTE_1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
            return -100;
 800200c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
        }
    }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800201c:	f004 f866 	bl	80060ec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x8>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <DMA1_Stream0_IRQHandler+0x10>)
 800205a:	f002 fd85 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000336c 	.word	0x2000336c

08002068 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <DMA1_Stream1_IRQHandler+0x10>)
 800206e:	f002 fd7b 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000348c 	.word	0x2000348c

0800207c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA1_Stream2_IRQHandler+0x10>)
 8002082:	f002 fd71 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200026fc 	.word	0x200026fc

08002090 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA1_Stream3_IRQHandler+0x10>)
 8002096:	f002 fd67 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200034ec 	.word	0x200034ec

080020a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <DMA1_Stream4_IRQHandler+0x10>)
 80020aa:	f002 fd5d 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000283c 	.word	0x2000283c

080020b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020bc:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <DMA1_Stream5_IRQHandler+0x10>)
 80020be:	f002 fd53 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200033cc 	.word	0x200033cc

080020cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <DMA1_Stream6_IRQHandler+0x10>)
 80020d2:	f002 fd49 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000342c 	.word	0x2000342c

080020e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020e0:	b4b0      	push	{r4, r5, r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
    extern EncoderMotorObjectTypeDef *motors[4];
    if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <TIM2_IRQHandler+0x58>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d11e      	bne.n	8002130 <TIM2_IRQHandler+0x50>
        __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <TIM2_IRQHandler+0x58>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f06f 0201 	mvn.w	r2, #1
 80020fa:	611a      	str	r2, [r3, #16]
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80020fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <TIM2_IRQHandler+0x58>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b10      	cmp	r3, #16
 8002108:	d109      	bne.n	800211e <TIM2_IRQHandler+0x3e>
            --motors[1]->overflow_num;
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <TIM2_IRQHandler+0x5c>)
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002112:	1e54      	subs	r4, r2, #1
 8002114:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002118:	e9c1 4502 	strd	r4, r5, [r1, #8]
    }
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800211c:	e008      	b.n	8002130 <TIM2_IRQHandler+0x50>
            ++motors[1]->overflow_num;
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <TIM2_IRQHandler+0x5c>)
 8002120:	685c      	ldr	r4, [r3, #4]
 8002122:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002126:	1c50      	adds	r0, r2, #1
 8002128:	f143 0100 	adc.w	r1, r3, #0
 800212c:	e9c4 0102 	strd	r0, r1, [r4, #8]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bcb0      	pop	{r4, r5, r7}
 8002136:	4770      	bx	lr
 8002138:	20002a0c 	.word	0x20002a0c
 800213c:	2000d210 	.word	0x2000d210

08002140 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002140:	b4b0      	push	{r4, r5, r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
    extern EncoderMotorObjectTypeDef *motors[4];

    if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET) {
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <TIM3_IRQHandler+0x58>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d11e      	bne.n	8002190 <TIM3_IRQHandler+0x50>
        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <TIM3_IRQHandler+0x58>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f06f 0201 	mvn.w	r2, #1
 800215a:	611a      	str	r2, [r3, #16]
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <TIM3_IRQHandler+0x58>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b10      	cmp	r3, #16
 8002168:	d109      	bne.n	800217e <TIM3_IRQHandler+0x3e>
            --motors[3]->overflow_num;
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <TIM3_IRQHandler+0x5c>)
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002172:	1e54      	subs	r4, r2, #1
 8002174:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002178:	e9c1 4502 	strd	r4, r5, [r1, #8]
    }
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800217c:	e008      	b.n	8002190 <TIM3_IRQHandler+0x50>
            ++motors[3]->overflow_num;
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <TIM3_IRQHandler+0x5c>)
 8002180:	68dc      	ldr	r4, [r3, #12]
 8002182:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002186:	1c50      	adds	r0, r2, #1
 8002188:	f143 0100 	adc.w	r1, r3, #0
 800218c:	e9c4 0102 	strd	r0, r1, [r4, #8]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bcb0      	pop	{r4, r5, r7}
 8002196:	4770      	bx	lr
 8002198:	20002ac0 	.word	0x20002ac0
 800219c:	2000d210 	.word	0x2000d210

080021a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021a0:	b4b0      	push	{r4, r5, r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
    extern EncoderMotorObjectTypeDef *motors[4];
    if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET) {
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <TIM4_IRQHandler+0x58>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d11e      	bne.n	80021f0 <TIM4_IRQHandler+0x50>
        __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <TIM4_IRQHandler+0x58>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f06f 0201 	mvn.w	r2, #1
 80021ba:	611a      	str	r2, [r3, #16]
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <TIM4_IRQHandler+0x58>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d109      	bne.n	80021de <TIM4_IRQHandler+0x3e>
            --motors[2]->overflow_num;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <TIM4_IRQHandler+0x5c>)
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80021d2:	1e54      	subs	r4, r2, #1
 80021d4:	f143 35ff 	adc.w	r5, r3, #4294967295
 80021d8:	e9c1 4502 	strd	r4, r5, [r1, #8]
    }
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021dc:	e008      	b.n	80021f0 <TIM4_IRQHandler+0x50>
            ++motors[2]->overflow_num;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <TIM4_IRQHandler+0x5c>)
 80021e0:	689c      	ldr	r4, [r3, #8]
 80021e2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80021e6:	1c50      	adds	r0, r2, #1
 80021e8:	f143 0100 	adc.w	r1, r3, #0
 80021ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bcb0      	pop	{r4, r5, r7}
 80021f6:	4770      	bx	lr
 80021f8:	20002b74 	.word	0x20002b74
 80021fc:	2000d210 	.word	0x2000d210

08002200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <USART2_IRQHandler+0x10>)
 8002206:	f005 fefb 	bl	8008000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20003204 	.word	0x20003204

08002214 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <USART3_IRQHandler+0x10>)
 800221a:	f005 fef1 	bl	8008000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000327c 	.word	0x2000327c

08002228 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    extern osSemaphoreId_t IMU_data_readyHandle;
    if(__HAL_GPIO_EXTI_GET_IT(IMU_ITR_Pin) != RESET) {	//�Ƿ�ΪIMU�ж������ź�
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <EXTI15_10_IRQHandler+0x28>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <EXTI15_10_IRQHandler+0x22>
        __HAL_GPIO_EXTI_CLEAR_IT(IMU_ITR_Pin);	//���IMU�ж������ź�
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <EXTI15_10_IRQHandler+0x28>)
 800223a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800223e:	615a      	str	r2, [r3, #20]
		//�����ź���
        osSemaphoreRelease(IMU_data_readyHandle);
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <EXTI15_10_IRQHandler+0x2c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f00a fb5b 	bl	800c900 <osSemaphoreRelease>
    }
  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40013c00 	.word	0x40013c00
 8002254:	20002670 	.word	0x20002670

08002258 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */
    if( __HAL_TIM_GET_FLAG(&htim12, TIM_FLAG_UPDATE) != RESET) {
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <TIM8_BRK_TIM12_IRQHandler+0x50>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10a      	bne.n	8002280 <TIM8_BRK_TIM12_IRQHandler+0x28>
        __HAL_TIM_CLEAR_FLAG(&htim12, TIM_FLAG_UPDATE);
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <TIM8_BRK_TIM12_IRQHandler+0x50>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f06f 0201 	mvn.w	r2, #1
 8002272:	611a      	str	r2, [r3, #16]
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800227a:	480c      	ldr	r0, [pc, #48]	@ (80022ac <TIM8_BRK_TIM12_IRQHandler+0x54>)
 800227c:	f003 f89e 	bl	80053bc <HAL_GPIO_WritePin>
    }
    if(__HAL_TIM_GET_FLAG(&htim12, TIM_FLAG_CC1) != RESET) {
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <TIM8_BRK_TIM12_IRQHandler+0x50>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d10a      	bne.n	80022a4 <TIM8_BRK_TIM12_IRQHandler+0x4c>
        __HAL_TIM_CLEAR_FLAG(&htim12, TIM_FLAG_CC1);
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <TIM8_BRK_TIM12_IRQHandler+0x50>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0202 	mvn.w	r2, #2
 8002296:	611a      	str	r2, [r3, #16]
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800229e:	4803      	ldr	r0, [pc, #12]	@ (80022ac <TIM8_BRK_TIM12_IRQHandler+0x54>)
 80022a0:	f003 f88c 	bl	80053bc <HAL_GPIO_WritePin>
    }
  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20002fac 	.word	0x20002fac
 80022ac:	40020000 	.word	0x40020000

080022b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
    extern PWMServoObjectTypeDef *pwm_servos[4];
    static uint32_t pwm_servo_index = 0;

    if(__HAL_TIM_GET_FLAG(&htim13, TIM_FLAG_CC1) != RESET) {
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <TIM8_UP_TIM13_IRQHandler+0x90>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d117      	bne.n	80022f2 <TIM8_UP_TIM13_IRQHandler+0x42>
        __HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_CC1);
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <TIM8_UP_TIM13_IRQHandler+0x90>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0202 	mvn.w	r2, #2
 80022ca:	611a      	str	r2, [r3, #16]
        pwm_servos[pwm_servo_index]->write_pin(0);
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002348 <TIM8_UP_TIM13_IRQHandler+0x98>)
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	2000      	movs	r0, #0
 80022da:	4798      	blx	r3
        pwm_servo_index = pwm_servo_index == 3 ? 0 : pwm_servo_index + 1;
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d003      	beq.n	80022ec <TIM8_UP_TIM13_IRQHandler+0x3c>
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	e000      	b.n	80022ee <TIM8_UP_TIM13_IRQHandler+0x3e>
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 80022f0:	6013      	str	r3, [r2, #0]
    }
    if(__HAL_TIM_GET_FLAG(&htim13, TIM_FLAG_UPDATE) != RESET) {
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <TIM8_UP_TIM13_IRQHandler+0x90>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d11d      	bne.n	800233c <TIM8_UP_TIM13_IRQHandler+0x8c>
        __HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_UPDATE);
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <TIM8_UP_TIM13_IRQHandler+0x90>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0201 	mvn.w	r2, #1
 8002308:	611a      	str	r2, [r3, #16]
        pwm_servos[pwm_servo_index]->write_pin(1);
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <TIM8_UP_TIM13_IRQHandler+0x98>)
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	2001      	movs	r0, #1
 8002318:	4798      	blx	r3
        pwm_servo_duty_compare(pwm_servos[pwm_servo_index]);
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <TIM8_UP_TIM13_IRQHandler+0x98>)
 8002320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002324:	4618      	mov	r0, r3
 8002326:	f008 fb37 	bl	800a998 <pwm_servo_duty_compare>
        __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, pwm_servos[pwm_servo_index]->duty_raw);
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <TIM8_UP_TIM13_IRQHandler+0x94>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a06      	ldr	r2, [pc, #24]	@ (8002348 <TIM8_UP_TIM13_IRQHandler+0x98>)
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	4b02      	ldr	r3, [pc, #8]	@ (8002340 <TIM8_UP_TIM13_IRQHandler+0x90>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20003060 	.word	0x20003060
 8002344:	20002950 	.word	0x20002950
 8002348:	2000d374 	.word	0x2000d374

0800234c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002352:	f004 fc05 	bl	8006b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000289c 	.word	0x2000289c

08002360 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <DMA1_Stream7_IRQHandler+0x10>)
 8002366:	f002 fbff 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000275c 	.word	0x2000275c

08002374 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002374:	b4b0      	push	{r4, r5, r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
    extern EncoderMotorObjectTypeDef *motors[4];
    if(__HAL_TIM_GET_FLAG(&htim5, TIM_FLAG_UPDATE) != RESET) {
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <TIM5_IRQHandler+0x58>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d11e      	bne.n	80023c4 <TIM5_IRQHandler+0x50>
        __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <TIM5_IRQHandler+0x58>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f06f 0201 	mvn.w	r2, #1
 800238e:	611a      	str	r2, [r3, #16]
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)) {
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <TIM5_IRQHandler+0x58>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b10      	cmp	r3, #16
 800239c:	d109      	bne.n	80023b2 <TIM5_IRQHandler+0x3e>
            --motors[0]->overflow_num;
 800239e:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <TIM5_IRQHandler+0x5c>)
 80023a0:	6819      	ldr	r1, [r3, #0]
 80023a2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80023a6:	1e54      	subs	r4, r2, #1
 80023a8:	f143 35ff 	adc.w	r5, r3, #4294967295
 80023ac:	e9c1 4502 	strd	r4, r5, [r1, #8]
        //printf("motor1, counts:%d", motors[0]->overflow_num * 60000 + __HAL_TIM_GetCounter(&htim5));
    }
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80023b0:	e008      	b.n	80023c4 <TIM5_IRQHandler+0x50>
            ++motors[0]->overflow_num;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <TIM5_IRQHandler+0x5c>)
 80023b4:	681c      	ldr	r4, [r3, #0]
 80023b6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80023ba:	1c50      	adds	r0, r2, #1
 80023bc:	f143 0100 	adc.w	r1, r3, #0
 80023c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bcb0      	pop	{r4, r5, r7}
 80023ca:	4770      	bx	lr
 80023cc:	20002c28 	.word	0x20002c28
 80023d0:	2000d210 	.word	0x2000d210

080023d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <UART5_IRQHandler+0x10>)
 80023da:	f005 fe11 	bl	8008000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20003114 	.word	0x20003114

080023e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
    extern EncoderMotorObjectTypeDef *motors[4];
    if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET) {
 80023f0:	492d      	ldr	r1, [pc, #180]	@ (80024a8 <TIM7_IRQHandler+0xc0>)
 80023f2:	6809      	ldr	r1, [r1, #0]
 80023f4:	6909      	ldr	r1, [r1, #16]
 80023f6:	f001 0101 	and.w	r1, r1, #1
 80023fa:	2901      	cmp	r1, #1
 80023fc:	d14f      	bne.n	800249e <TIM7_IRQHandler+0xb6>
        __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80023fe:	492a      	ldr	r1, [pc, #168]	@ (80024a8 <TIM7_IRQHandler+0xc0>)
 8002400:	6809      	ldr	r1, [r1, #0]
 8002402:	f06f 0001 	mvn.w	r0, #1
 8002406:	6108      	str	r0, [r1, #16]
		encoder_update(motors[0], 0.01, __HAL_TIM_GET_COUNTER(&htim5));
 8002408:	4928      	ldr	r1, [pc, #160]	@ (80024ac <TIM7_IRQHandler+0xc4>)
 800240a:	6808      	ldr	r0, [r1, #0]
 800240c:	4928      	ldr	r1, [pc, #160]	@ (80024b0 <TIM7_IRQHandler+0xc8>)
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8002412:	2600      	movs	r6, #0
 8002414:	460a      	mov	r2, r1
 8002416:	4633      	mov	r3, r6
 8002418:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80024b4 <TIM7_IRQHandler+0xcc>
 800241c:	f008 f8d2 	bl	800a5c4 <encoder_update>
		encoder_update(motors[1], 0.01, __HAL_TIM_GET_COUNTER(&htim2));
 8002420:	4b22      	ldr	r3, [pc, #136]	@ (80024ac <TIM7_IRQHandler+0xc4>)
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <TIM7_IRQHandler+0xd0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	2200      	movs	r2, #0
 800242c:	469a      	mov	sl, r3
 800242e:	4693      	mov	fp, r2
 8002430:	4652      	mov	r2, sl
 8002432:	465b      	mov	r3, fp
 8002434:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80024b4 <TIM7_IRQHandler+0xcc>
 8002438:	4608      	mov	r0, r1
 800243a:	f008 f8c3 	bl	800a5c4 <encoder_update>
		encoder_update(motors[2], 0.01, __HAL_TIM_GET_COUNTER(&htim4));
 800243e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <TIM7_IRQHandler+0xc4>)
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	4b1e      	ldr	r3, [pc, #120]	@ (80024bc <TIM7_IRQHandler+0xd4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	2200      	movs	r2, #0
 800244a:	4698      	mov	r8, r3
 800244c:	4691      	mov	r9, r2
 800244e:	4642      	mov	r2, r8
 8002450:	464b      	mov	r3, r9
 8002452:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80024b4 <TIM7_IRQHandler+0xcc>
 8002456:	4608      	mov	r0, r1
 8002458:	f008 f8b4 	bl	800a5c4 <encoder_update>
		encoder_update(motors[3], 0.01, __HAL_TIM_GET_COUNTER(&htim3));
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <TIM7_IRQHandler+0xc4>)
 800245e:	68d9      	ldr	r1, [r3, #12]
 8002460:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <TIM7_IRQHandler+0xd8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	461c      	mov	r4, r3
 800246a:	4615      	mov	r5, r2
 800246c:	4622      	mov	r2, r4
 800246e:	462b      	mov	r3, r5
 8002470:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80024b4 <TIM7_IRQHandler+0xcc>
 8002474:	4608      	mov	r0, r1
 8002476:	f008 f8a5 	bl	800a5c4 <encoder_update>
		for(int i = 0; i < 4; ++i) {
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	e00b      	b.n	8002498 <TIM7_IRQHandler+0xb0>
			encoder_motor_control(motors[i], 0.01);
 8002480:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <TIM7_IRQHandler+0xc4>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80024b4 <TIM7_IRQHandler+0xcc>
 800248c:	4618      	mov	r0, r3
 800248e:	f008 f8f9 	bl	800a684 <encoder_motor_control>
		for(int i = 0; i < 4; ++i) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b03      	cmp	r3, #3
 800249c:	ddf0      	ble.n	8002480 <TIM7_IRQHandler+0x98>
    }
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a8:	20002cdc 	.word	0x20002cdc
 80024ac:	2000d210 	.word	0x2000d210
 80024b0:	20002c28 	.word	0x20002c28
 80024b4:	3c23d70a 	.word	0x3c23d70a
 80024b8:	20002a0c 	.word	0x20002a0c
 80024bc:	20002b74 	.word	0x20002b74
 80024c0:	20002ac0 	.word	0x20002ac0

080024c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  
    extern SerialServoControllerTypeDef serial_servo_controller;
    extern osSemaphoreId_t serial_servo_rx_completeHandle;


    if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_TXE) != RESET) {
 80024c8:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <USART6_IRQHandler+0xe8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b80      	cmp	r3, #128	@ 0x80
 80024d4:	d11f      	bne.n	8002516 <USART6_IRQHandler+0x52>
        __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_TXE);
 80024d6:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <USART6_IRQHandler+0xe8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024de:	601a      	str	r2, [r3, #0]
        if(serial_servo_controller.tx_byte_index <( (serial_servo_controller.tx_frame.elements.length + 3) ) ){  /* 判断数据是否发鿁完房 */
 80024e0:	4b33      	ldr	r3, [pc, #204]	@ (80025b0 <USART6_IRQHandler+0xec>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	4a32      	ldr	r2, [pc, #200]	@ (80025b0 <USART6_IRQHandler+0xec>)
 80024e6:	7dd2      	ldrb	r2, [r2, #23]
 80024e8:	3203      	adds	r2, #3
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d20b      	bcs.n	8002506 <USART6_IRQHandler+0x42>
            huart6.Instance->DR = ((uint8_t*)(&serial_servo_controller.tx_frame))[serial_servo_controller.tx_byte_index++]; /* 继续发鿁下丿个字�? */
 80024ee:	4b30      	ldr	r3, [pc, #192]	@ (80025b0 <USART6_IRQHandler+0xec>)
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	492e      	ldr	r1, [pc, #184]	@ (80025b0 <USART6_IRQHandler+0xec>)
 80024f6:	624a      	str	r2, [r1, #36]	@ 0x24
 80024f8:	4a2e      	ldr	r2, [pc, #184]	@ (80025b4 <USART6_IRQHandler+0xf0>)
 80024fa:	4413      	add	r3, r2
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	e007      	b.n	8002516 <USART6_IRQHandler+0x52>
        } else {
            __HAL_UART_DISABLE_IT(&huart6, UART_IT_TXE);
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <USART6_IRQHandler+0xe8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002514:	60da      	str	r2, [r3, #12]
        }
    }
	
    if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_TC) != RESET) {
 8002516:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002520:	2b40      	cmp	r3, #64	@ 0x40
 8002522:	d121      	bne.n	8002568 <USART6_IRQHandler+0xa4>
        __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_TC);
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800252c:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(SERIAL_SERVO_RX_EN_GPIO_Port, SERIAL_SERVO_RX_EN_Pin, GPIO_PIN_RESET);  /* 转入接收模式 */
 800252e:	2200      	movs	r2, #0
 8002530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002534:	4820      	ldr	r0, [pc, #128]	@ (80025b8 <USART6_IRQHandler+0xf4>)
 8002536:	f002 ff41 	bl	80053bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SERIAL_SERVO_TX_EN_GPIO_Port, SERIAL_SERVO_TX_EN_Pin, GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	2180      	movs	r1, #128	@ 0x80
 800253e:	481e      	ldr	r0, [pc, #120]	@ (80025b8 <USART6_IRQHandler+0xf4>)
 8002540:	f002 ff3c 	bl	80053bc <HAL_GPIO_WritePin>
        if(serial_servo_controller.tx_only) {
 8002544:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <USART6_IRQHandler+0xec>)
 8002546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <USART6_IRQHandler+0x94>
            osSemaphoreRelease(serial_servo_rx_completeHandle);
 800254e:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <USART6_IRQHandler+0xf8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f00a f9d4 	bl	800c900 <osSemaphoreRelease>
        }
	    __HAL_UART_DISABLE_IT(&huart6, UART_IT_TC);
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <USART6_IRQHandler+0xe8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002566:	60da      	str	r2, [r3, #12]
    }

    if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) != RESET) {
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <USART6_IRQHandler+0xe8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d114      	bne.n	80025a0 <USART6_IRQHandler+0xdc>
        __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0220 	mvn.w	r2, #32
 800257e:	601a      	str	r2, [r3, #0]
        if(0 == serial_servo_rx_handler(&serial_servo_controller, (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF))) {
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <USART6_IRQHandler+0xe8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	4809      	ldr	r0, [pc, #36]	@ (80025b0 <USART6_IRQHandler+0xec>)
 800258c:	f7ff fcae 	bl	8001eec <serial_servo_rx_handler>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <USART6_IRQHandler+0xdc>
            osSemaphoreRelease(serial_servo_rx_completeHandle);
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <USART6_IRQHandler+0xf8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f00a f9b0 	bl	800c900 <osSemaphoreRelease>
        }
    }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <USART6_IRQHandler+0xe8>)
 80025a2:	f005 fd2d 	bl	8008000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */


  /* USER CODE END USART6_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200032f4 	.word	0x200032f4
 80025b0:	2000d384 	.word	0x2000d384
 80025b4:	2000d398 	.word	0x2000d398
 80025b8:	40021000 	.word	0x40021000
 80025bc:	20002680 	.word	0x20002680

080025c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e00a      	b.n	80025e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d2:	f3af 8000 	nop.w
 80025d6:	4601      	mov	r1, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	b2ca      	uxtb	r2, r1
 80025e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dbf0      	blt.n	80025d2 <_read+0x12>
  }

  return len;
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e009      	b.n	8002620 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	60ba      	str	r2, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3301      	adds	r3, #1
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	dbf1      	blt.n	800260c <_write+0x12>
  }
  return len;
 8002628:	687b      	ldr	r3, [r7, #4]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_close>:

int _close(int file)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800265a:	605a      	str	r2, [r3, #4]
  return 0;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <_isatty>:

int _isatty(int file)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <_sbrk+0x5c>)
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <_sbrk+0x60>)
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b0:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <_sbrk+0x64>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <_sbrk+0x68>)
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d207      	bcs.n	80026dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026cc:	f00e fc4e 	bl	8010f6c <__errno>
 80026d0:	4603      	mov	r3, r0
 80026d2:	220c      	movs	r2, #12
 80026d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e009      	b.n	80026f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <_sbrk+0x64>)
 80026ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20020000 	.word	0x20020000
 80026fc:	00000600 	.word	0x00000600
 8002700:	20002954 	.word	0x20002954
 8002704:	20016e80 	.word	0x20016e80

08002708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <SystemInit+0x28>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <SystemInit+0x28>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800271c:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <SystemInit+0x28>)
 800271e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002722:	609a      	str	r2, [r3, #8]
#endif
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b096      	sub	sp, #88	@ 0x58
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	611a      	str	r2, [r3, #16]
 8002762:	615a      	str	r2, [r3, #20]
 8002764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2220      	movs	r2, #32
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f00e fbaf 	bl	8010ed0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002772:	4b51      	ldr	r3, [pc, #324]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002774:	4a51      	ldr	r2, [pc, #324]	@ (80028bc <MX_TIM1_Init+0x188>)
 8002776:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 8002778:	4b4f      	ldr	r3, [pc, #316]	@ (80028b8 <MX_TIM1_Init+0x184>)
 800277a:	f240 3247 	movw	r2, #839	@ 0x347
 800277e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002780:	4b4d      	ldr	r3, [pc, #308]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002786:	4b4c      	ldr	r3, [pc, #304]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002788:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800278c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278e:	4b4a      	ldr	r3, [pc, #296]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002794:	4b48      	ldr	r3, [pc, #288]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800279a:	4b47      	ldr	r3, [pc, #284]	@ (80028b8 <MX_TIM1_Init+0x184>)
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027a0:	4845      	ldr	r0, [pc, #276]	@ (80028b8 <MX_TIM1_Init+0x184>)
 80027a2:	f003 fdcb 	bl	800633c <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80027ac:	f7ff f9fa 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027ba:	4619      	mov	r1, r3
 80027bc:	483e      	ldr	r0, [pc, #248]	@ (80028b8 <MX_TIM1_Init+0x184>)
 80027be:	f004 fbfd 	bl	8006fbc <HAL_TIM_ConfigClockSource>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027c8:	f7ff f9ec 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027cc:	483a      	ldr	r0, [pc, #232]	@ (80028b8 <MX_TIM1_Init+0x184>)
 80027ce:	f003 fee7 	bl	80065a0 <HAL_TIM_PWM_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027d8:	f7ff f9e4 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027e8:	4619      	mov	r1, r3
 80027ea:	4833      	ldr	r0, [pc, #204]	@ (80028b8 <MX_TIM1_Init+0x184>)
 80027ec:	f005 f87c 	bl	80078e8 <HAL_TIMEx_MasterConfigSynchronization>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80027f6:	f7ff f9d5 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fa:	2360      	movs	r3, #96	@ 0x60
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002802:	2300      	movs	r3, #0
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002806:	2300      	movs	r3, #0
 8002808:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800280a:	2304      	movs	r3, #4
 800280c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800281a:	2200      	movs	r2, #0
 800281c:	4619      	mov	r1, r3
 800281e:	4826      	ldr	r0, [pc, #152]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002820:	f004 fb0a 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800282a:	f7ff f9bb 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800282e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002832:	2204      	movs	r2, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4820      	ldr	r0, [pc, #128]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002838:	f004 fafe 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002842:	f7ff f9af 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284a:	2208      	movs	r2, #8
 800284c:	4619      	mov	r1, r3
 800284e:	481a      	ldr	r0, [pc, #104]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002850:	f004 faf2 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800285a:	f7ff f9a3 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800285e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002862:	220c      	movs	r2, #12
 8002864:	4619      	mov	r1, r3
 8002866:	4814      	ldr	r0, [pc, #80]	@ (80028b8 <MX_TIM1_Init+0x184>)
 8002868:	f004 fae6 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002872:	f7ff f997 	bl	8001ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800288a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800288e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4807      	ldr	r0, [pc, #28]	@ (80028b8 <MX_TIM1_Init+0x184>)
 800289a:	f005 f8a1 	bl	80079e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80028a4:	f7ff f97e 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028a8:	4803      	ldr	r0, [pc, #12]	@ (80028b8 <MX_TIM1_Init+0x184>)
 80028aa:	f000 fd11 	bl	80032d0 <HAL_TIM_MspPostInit>

}
 80028ae:	bf00      	nop
 80028b0:	3758      	adds	r7, #88	@ 0x58
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20002958 	.word	0x20002958
 80028bc:	40010000 	.word	0x40010000

080028c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	@ 0x30
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00e fafe 	bl	8010ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028dc:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <MX_TIM2_Init+0xa4>)
 80028de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <MX_TIM2_Init+0xa4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <MX_TIM2_Init+0xa4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <MX_TIM2_Init+0xa4>)
 80028f2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80028f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <MX_TIM2_Init+0xa4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <MX_TIM2_Init+0xa4>)
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002904:	2303      	movs	r3, #3
 8002906:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800290c:	2301      	movs	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4619      	mov	r1, r3
 800292e:	480d      	ldr	r0, [pc, #52]	@ (8002964 <MX_TIM2_Init+0xa4>)
 8002930:	f003 ffd4 	bl	80068dc <HAL_TIM_Encoder_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800293a:	f7ff f933 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4806      	ldr	r0, [pc, #24]	@ (8002964 <MX_TIM2_Init+0xa4>)
 800294c:	f004 ffcc 	bl	80078e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002956:	f7ff f925 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	3730      	adds	r7, #48	@ 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20002a0c 	.word	0x20002a0c

08002968 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	@ 0x30
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	2224      	movs	r2, #36	@ 0x24
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f00e faaa 	bl	8010ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 8002986:	4a21      	ldr	r2, [pc, #132]	@ (8002a0c <MX_TIM3_Init+0xa4>)
 8002988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800298a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 800298c:	2200      	movs	r2, #0
 800298e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8002996:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 8002998:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800299c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029a4:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029aa:	2303      	movs	r3, #3
 80029ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c2:	2301      	movs	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	480c      	ldr	r0, [pc, #48]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 80029d6:	f003 ff81 	bl	80068dc <HAL_TIM_Encoder_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80029e0:	f7ff f8e0 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <MX_TIM3_Init+0xa0>)
 80029f2:	f004 ff79 	bl	80078e8 <HAL_TIMEx_MasterConfigSynchronization>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029fc:	f7ff f8d2 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	@ 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20002ac0 	.word	0x20002ac0
 8002a0c:	40000400 	.word	0x40000400

08002a10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00e fa56 	bl	8010ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a2c:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a2e:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <MX_TIM4_Init+0xa4>)
 8002a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a32:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a40:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002a44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a52:	2303      	movs	r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a7e:	f003 ff2d 	bl	80068dc <HAL_TIM_Encoder_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a88:	f7ff f88c 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	@ (8002ab0 <MX_TIM4_Init+0xa0>)
 8002a9a:	f004 ff25 	bl	80078e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002aa4:	f7ff f87e 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	3730      	adds	r7, #48	@ 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20002b74 	.word	0x20002b74
 8002ab4:	40000800 	.word	0x40000800

08002ab8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	@ 0x30
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f00e fa02 	bl	8010ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ad4:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002ad6:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <MX_TIM5_Init+0xa4>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ada:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000;
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002ae8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002af6:	2280      	movs	r2, #128	@ 0x80
 8002af8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002afa:	2303      	movs	r3, #3
 8002afc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b02:	2301      	movs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b12:	2301      	movs	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	480c      	ldr	r0, [pc, #48]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002b26:	f003 fed9 	bl	80068dc <HAL_TIM_Encoder_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002b30:	f7ff f838 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4805      	ldr	r0, [pc, #20]	@ (8002b58 <MX_TIM5_Init+0xa0>)
 8002b42:	f004 fed1 	bl	80078e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002b4c:	f7ff f82a 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b50:	bf00      	nop
 8002b52:	3730      	adds	r7, #48	@ 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20002c28 	.word	0x20002c28
 8002b5c:	40000c00 	.word	0x40000c00

08002b60 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b66:	463b      	mov	r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002b70:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <MX_TIM7_Init+0x68>)
 8002b72:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002b76:	2253      	movs	r2, #83	@ 0x53
 8002b78:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002b80:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002b82:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002b86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b8e:	480d      	ldr	r0, [pc, #52]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002b90:	f003 fbd4 	bl	800633c <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002b9a:	f7ff f803 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4806      	ldr	r0, [pc, #24]	@ (8002bc4 <MX_TIM7_Init+0x64>)
 8002bac:	f004 fe9c 	bl	80078e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002bb6:	f7fe fff5 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20002cdc 	.word	0x20002cdc
 8002bc8:	40001400 	.word	0x40001400

08002bcc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	@ 0x30
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd2:	f107 0320 	add.w	r3, r7, #32
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <MX_TIM9_Init+0xd8>)
 8002bf6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8002bf8:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002bfa:	f240 3247 	movw	r2, #839	@ 0x347
 8002bfe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c0c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c14:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c16:	2280      	movs	r2, #128	@ 0x80
 8002c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002c1a:	4821      	ldr	r0, [pc, #132]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c1c:	f003 fb8e 	bl	800633c <HAL_TIM_Base_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8002c26:	f7fe ffbd 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002c30:	f107 0320 	add.w	r3, r7, #32
 8002c34:	4619      	mov	r1, r3
 8002c36:	481a      	ldr	r0, [pc, #104]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c38:	f004 f9c0 	bl	8006fbc <HAL_TIM_ConfigClockSource>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8002c42:	f7fe ffaf 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002c46:	4816      	ldr	r0, [pc, #88]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c48:	f003 fcaa 	bl	80065a0 <HAL_TIM_PWM_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002c52:	f7fe ffa7 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c56:	2360      	movs	r3, #96	@ 0x60
 8002c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c62:	2304      	movs	r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480c      	ldr	r0, [pc, #48]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c6e:	f004 f8e3 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002c78:	f7fe ff94 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4807      	ldr	r0, [pc, #28]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c84:	f004 f8d8 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8002c8e:	f7fe ff89 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002c92:	4803      	ldr	r0, [pc, #12]	@ (8002ca0 <MX_TIM9_Init+0xd4>)
 8002c94:	f000 fb1c 	bl	80032d0 <HAL_TIM_MspPostInit>

}
 8002c98:	bf00      	nop
 8002c9a:	3730      	adds	r7, #48	@ 0x30
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20002d90 	.word	0x20002d90
 8002ca4:	40014000 	.word	0x40014000

08002ca8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	615a      	str	r2, [r3, #20]
 8002cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d40 <MX_TIM10_Init+0x98>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cc8:	f240 3247 	movw	r2, #839	@ 0x347
 8002ccc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cda:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ce8:	4814      	ldr	r0, [pc, #80]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cea:	f003 fb27 	bl	800633c <HAL_TIM_Base_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002cf4:	f7fe ff56 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002cf8:	4810      	ldr	r0, [pc, #64]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002cfa:	f003 fc51 	bl	80065a0 <HAL_TIM_PWM_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002d04:	f7fe ff4e 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d08:	2360      	movs	r3, #96	@ 0x60
 8002d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d14:	2304      	movs	r3, #4
 8002d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4807      	ldr	r0, [pc, #28]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002d20:	f004 f88a 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002d2a:	f7fe ff3b 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002d2e:	4803      	ldr	r0, [pc, #12]	@ (8002d3c <MX_TIM10_Init+0x94>)
 8002d30:	f000 face 	bl	80032d0 <HAL_TIM_MspPostInit>

}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20002e44 	.word	0x20002e44
 8002d40:	40014400 	.word	0x40014400

08002d44 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ddc <MX_TIM11_Init+0x98>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 839;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d64:	f240 3247 	movw	r2, #839	@ 0x347
 8002d68:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d76:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d78:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d80:	2280      	movs	r2, #128	@ 0x80
 8002d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d84:	4814      	ldr	r0, [pc, #80]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d86:	f003 fad9 	bl	800633c <HAL_TIM_Base_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8002d90:	f7fe ff08 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002d94:	4810      	ldr	r0, [pc, #64]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002d96:	f003 fc03 	bl	80065a0 <HAL_TIM_PWM_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8002da0:	f7fe ff00 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da4:	2360      	movs	r3, #96	@ 0x60
 8002da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002db0:	2304      	movs	r3, #4
 8002db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	4619      	mov	r1, r3
 8002dba:	4807      	ldr	r0, [pc, #28]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002dbc:	f004 f83c 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8002dc6:	f7fe feed 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002dca:	4803      	ldr	r0, [pc, #12]	@ (8002dd8 <MX_TIM11_Init+0x94>)
 8002dcc:	f000 fa80 	bl	80032d0 <HAL_TIM_MspPostInit>

}
 8002dd0:	bf00      	nop
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20002ef8 	.word	0x20002ef8
 8002ddc:	40014800 	.word	0x40014800

08002de0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	@ 0x30
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	615a      	str	r2, [r3, #20]
 8002e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002e06:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e08:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <MX_TIM12_Init+0xcc>)
 8002e0a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 839;
 8002e0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e0e:	f240 3247 	movw	r2, #839	@ 0x347
 8002e12:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e1c:	2263      	movs	r2, #99	@ 0x63
 8002e1e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002e2c:	481e      	ldr	r0, [pc, #120]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e2e:	f003 fa85 	bl	800633c <HAL_TIM_Base_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002e38:	f7fe feb4 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e40:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002e42:	f107 0320 	add.w	r3, r7, #32
 8002e46:	4619      	mov	r1, r3
 8002e48:	4817      	ldr	r0, [pc, #92]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e4a:	f004 f8b7 	bl	8006fbc <HAL_TIM_ConfigClockSource>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002e54:	f7fe fea6 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8002e58:	4813      	ldr	r0, [pc, #76]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e5a:	f003 fb3b 	bl	80064d4 <HAL_TIM_OC_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002e64:	f7fe fe9e 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002e6c:	2332      	movs	r3, #50	@ 0x32
 8002e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	480a      	ldr	r0, [pc, #40]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e80:	f003 ff7e 	bl	8006d80 <HAL_TIM_OC_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002e8a:	f7fe fe8b 	bl	8001ba4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim12, TIM_CHANNEL_1);
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <MX_TIM12_Init+0xc8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	3730      	adds	r7, #48	@ 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20002fac 	.word	0x20002fac
 8002eac:	40001800 	.word	0x40001800

08002eb0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002eca:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <MX_TIM13_Init+0x90>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002ed0:	2253      	movs	r2, #83	@ 0x53
 8002ed2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4999;
 8002eda:	4b18      	ldr	r3, [pc, #96]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002edc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002ee0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee2:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002eee:	4813      	ldr	r0, [pc, #76]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002ef0:	f003 fa24 	bl	800633c <HAL_TIM_Base_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002efa:	f7fe fe53 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8002efe:	480f      	ldr	r0, [pc, #60]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002f00:	f003 fae8 	bl	80064d4 <HAL_TIM_OC_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002f0a:	f7fe fe4b 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2200      	movs	r2, #0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4805      	ldr	r0, [pc, #20]	@ (8002f3c <MX_TIM13_Init+0x8c>)
 8002f26:	f003 ff2b 	bl	8006d80 <HAL_TIM_OC_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002f30:	f7fe fe38 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20003060 	.word	0x20003060
 8002f40:	40001c00 	.word	0x40001c00

08002f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a4a      	ldr	r2, [pc, #296]	@ (800307c <HAL_TIM_Base_MspInit+0x138>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5a:	4b49      	ldr	r3, [pc, #292]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f66:	4b46      	ldr	r3, [pc, #280]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002f72:	e07e      	b.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM7)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a42      	ldr	r2, [pc, #264]	@ (8003084 <HAL_TIM_Base_MspInit+0x140>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	4b3f      	ldr	r3, [pc, #252]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	4a3e      	ldr	r2, [pc, #248]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002f88:	f043 0320 	orr.w	r3, r3, #32
 8002f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	6a3b      	ldr	r3, [r7, #32]
}
 8002f9a:	e06a      	b.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM9)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a39      	ldr	r2, [pc, #228]	@ (8003088 <HAL_TIM_Base_MspInit+0x144>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	4a34      	ldr	r2, [pc, #208]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fb6:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
}
 8002fc2:	e056      	b.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM10)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a30      	ldr	r2, [pc, #192]	@ (800308c <HAL_TIM_Base_MspInit+0x148>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10e      	bne.n	8002fec <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fde:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
}
 8002fea:	e042      	b.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM11)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a27      	ldr	r2, [pc, #156]	@ (8003090 <HAL_TIM_Base_MspInit+0x14c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4a20      	ldr	r2, [pc, #128]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
}
 8003012:	e02e      	b.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM12)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <HAL_TIM_Base_MspInit+0x150>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d116      	bne.n	800304c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2105      	movs	r1, #5
 800303e:	202b      	movs	r0, #43	@ 0x2b
 8003040:	f001 fbb4 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003044:	202b      	movs	r0, #43	@ 0x2b
 8003046:	f001 fbcd 	bl	80047e4 <HAL_NVIC_EnableIRQ>
}
 800304a:	e012      	b.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM13)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_TIM_Base_MspInit+0x154>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10d      	bne.n	8003072 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003064:	6413      	str	r3, [r2, #64]	@ 0x40
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_TIM_Base_MspInit+0x13c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40023800 	.word	0x40023800
 8003084:	40001400 	.word	0x40001400
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800
 8003094:	40001800 	.word	0x40001800
 8003098:	40001c00 	.word	0x40001c00

0800309c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b090      	sub	sp, #64	@ 0x40
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d153      	bne.n	8003166 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030c2:	4b7d      	ldr	r3, [pc, #500]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4a7c      	ldr	r2, [pc, #496]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ce:	4b7a      	ldr	r3, [pc, #488]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030de:	4b76      	ldr	r3, [pc, #472]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a75      	ldr	r2, [pc, #468]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b73      	ldr	r3, [pc, #460]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	4b6f      	ldr	r3, [pc, #444]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	4a6e      	ldr	r2, [pc, #440]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6313      	str	r3, [r2, #48]	@ 0x30
 8003106:	4b6c      	ldr	r3, [pc, #432]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311c:	2301      	movs	r3, #1
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003124:	2301      	movs	r3, #1
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800312c:	4619      	mov	r1, r3
 800312e:	4863      	ldr	r0, [pc, #396]	@ (80032bc <HAL_TIM_Encoder_MspInit+0x220>)
 8003130:	f001 ff90 	bl	8005054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003134:	2308      	movs	r3, #8
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800313c:	2301      	movs	r3, #1
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	2303      	movs	r3, #3
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003144:	2301      	movs	r3, #1
 8003146:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800314c:	4619      	mov	r1, r3
 800314e:	485c      	ldr	r0, [pc, #368]	@ (80032c0 <HAL_TIM_Encoder_MspInit+0x224>)
 8003150:	f001 ff80 	bl	8005054 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2105      	movs	r1, #5
 8003158:	201c      	movs	r0, #28
 800315a:	f001 fb27 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800315e:	201c      	movs	r0, #28
 8003160:	f001 fb40 	bl	80047e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003164:	e0a4      	b.n	80032b0 <HAL_TIM_Encoder_MspInit+0x214>
  else if(tim_encoderHandle->Instance==TIM3)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a56      	ldr	r2, [pc, #344]	@ (80032c4 <HAL_TIM_Encoder_MspInit+0x228>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d134      	bne.n	80031da <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	4b50      	ldr	r3, [pc, #320]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	4a4f      	ldr	r2, [pc, #316]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003180:	4b4d      	ldr	r3, [pc, #308]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	4a48      	ldr	r2, [pc, #288]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	6313      	str	r3, [r2, #48]	@ 0x30
 800319c:	4b46      	ldr	r3, [pc, #280]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031a8:	2330      	movs	r3, #48	@ 0x30
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031b8:	2302      	movs	r3, #2
 80031ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031c0:	4619      	mov	r1, r3
 80031c2:	483f      	ldr	r0, [pc, #252]	@ (80032c0 <HAL_TIM_Encoder_MspInit+0x224>)
 80031c4:	f001 ff46 	bl	8005054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2105      	movs	r1, #5
 80031cc:	201d      	movs	r0, #29
 80031ce:	f001 faed 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031d2:	201d      	movs	r0, #29
 80031d4:	f001 fb06 	bl	80047e4 <HAL_NVIC_EnableIRQ>
}
 80031d8:	e06a      	b.n	80032b0 <HAL_TIM_Encoder_MspInit+0x214>
  else if(tim_encoderHandle->Instance==TIM4)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3a      	ldr	r2, [pc, #232]	@ (80032c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d134      	bne.n	800324e <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	4b33      	ldr	r3, [pc, #204]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	4a32      	ldr	r2, [pc, #200]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f4:	4b30      	ldr	r3, [pc, #192]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	4a2b      	ldr	r2, [pc, #172]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003210:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800321c:	23c0      	movs	r3, #192	@ 0xc0
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800322c:	2302      	movs	r3, #2
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003234:	4619      	mov	r1, r3
 8003236:	4822      	ldr	r0, [pc, #136]	@ (80032c0 <HAL_TIM_Encoder_MspInit+0x224>)
 8003238:	f001 ff0c 	bl	8005054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800323c:	2200      	movs	r2, #0
 800323e:	2105      	movs	r1, #5
 8003240:	201e      	movs	r0, #30
 8003242:	f001 fab3 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003246:	201e      	movs	r0, #30
 8003248:	f001 facc 	bl	80047e4 <HAL_NVIC_EnableIRQ>
}
 800324c:	e030      	b.n	80032b0 <HAL_TIM_Encoder_MspInit+0x214>
  else if(tim_encoderHandle->Instance==TIM5)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1e      	ldr	r2, [pc, #120]	@ (80032cc <HAL_TIM_Encoder_MspInit+0x230>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d12b      	bne.n	80032b0 <HAL_TIM_Encoder_MspInit+0x214>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003262:	f043 0308 	orr.w	r3, r3, #8
 8003266:	6413      	str	r3, [r2, #64]	@ 0x40
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6313      	str	r3, [r2, #48]	@ 0x30
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003290:	2303      	movs	r3, #3
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003298:	2301      	movs	r3, #1
 800329a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032a0:	2302      	movs	r3, #2
 80032a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032a8:	4619      	mov	r1, r3
 80032aa:	4804      	ldr	r0, [pc, #16]	@ (80032bc <HAL_TIM_Encoder_MspInit+0x220>)
 80032ac:	f001 fed2 	bl	8005054 <HAL_GPIO_Init>
}
 80032b0:	bf00      	nop
 80032b2:	3740      	adds	r7, #64	@ 0x40
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00

080032d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08c      	sub	sp, #48	@ 0x30
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a49      	ldr	r2, [pc, #292]	@ (8003414 <HAL_TIM_MspPostInit+0x144>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11f      	bne.n	8003332 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	4b48      	ldr	r3, [pc, #288]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	4a47      	ldr	r2, [pc, #284]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 80032fc:	f043 0310 	orr.w	r3, r3, #16
 8003300:	6313      	str	r3, [r2, #48]	@ 0x30
 8003302:	4b45      	ldr	r3, [pc, #276]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|TIM1_CH2_Pin|TIM1_CH3_Pin|TIM1_CH4_Pin;
 800330e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800331c:	2302      	movs	r3, #2
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003320:	2301      	movs	r3, #1
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	483c      	ldr	r0, [pc, #240]	@ (800341c <HAL_TIM_MspPostInit+0x14c>)
 800332c:	f001 fe92 	bl	8005054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003330:	e06c      	b.n	800340c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM9)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3a      	ldr	r2, [pc, #232]	@ (8003420 <HAL_TIM_MspPostInit+0x150>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d11e      	bne.n	800337a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	4b35      	ldr	r3, [pc, #212]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	4a34      	ldr	r2, [pc, #208]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6313      	str	r3, [r2, #48]	@ 0x30
 800334c:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003358:	2360      	movs	r3, #96	@ 0x60
 800335a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003368:	2303      	movs	r3, #3
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800336c:	f107 031c 	add.w	r3, r7, #28
 8003370:	4619      	mov	r1, r3
 8003372:	482a      	ldr	r0, [pc, #168]	@ (800341c <HAL_TIM_MspPostInit+0x14c>)
 8003374:	f001 fe6e 	bl	8005054 <HAL_GPIO_Init>
}
 8003378:	e048      	b.n	800340c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a29      	ldr	r2, [pc, #164]	@ (8003424 <HAL_TIM_MspPostInit+0x154>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d11f      	bne.n	80033c4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 800338e:	f043 0302 	orr.w	r3, r3, #2
 8003392:	6313      	str	r3, [r2, #48]	@ 0x30
 8003394:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80033b2:	2303      	movs	r3, #3
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b6:	f107 031c 	add.w	r3, r7, #28
 80033ba:	4619      	mov	r1, r3
 80033bc:	481a      	ldr	r0, [pc, #104]	@ (8003428 <HAL_TIM_MspPostInit+0x158>)
 80033be:	f001 fe49 	bl	8005054 <HAL_GPIO_Init>
}
 80033c2:	e023      	b.n	800340c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	@ (800342c <HAL_TIM_MspPostInit+0x15c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d11e      	bne.n	800340c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <HAL_TIM_MspPostInit+0x148>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80033fc:	2303      	movs	r3, #3
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	4808      	ldr	r0, [pc, #32]	@ (8003428 <HAL_TIM_MspPostInit+0x158>)
 8003408:	f001 fe24 	bl	8005054 <HAL_GPIO_Init>
}
 800340c:	bf00      	nop
 800340e:	3730      	adds	r7, #48	@ 0x30
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40010000 	.word	0x40010000
 8003418:	40023800 	.word	0x40023800
 800341c:	40021000 	.word	0x40021000
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40020400 	.word	0x40020400
 800342c:	40014800 	.word	0x40014800

08003430 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003434:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <MX_UART5_Init+0x50>)
 8003436:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <MX_UART5_Init+0x54>)
 8003438:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 100000;
 800343a:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <MX_UART5_Init+0x50>)
 800343c:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <MX_UART5_Init+0x58>)
 800343e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8003440:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <MX_UART5_Init+0x50>)
 8003442:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003446:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 8003448:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <MX_UART5_Init+0x50>)
 800344a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800344e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <MX_UART5_Init+0x50>)
 8003452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003456:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <MX_UART5_Init+0x50>)
 800345a:	2204      	movs	r2, #4
 800345c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <MX_UART5_Init+0x50>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <MX_UART5_Init+0x50>)
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800346a:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_UART5_Init+0x50>)
 800346c:	f004 fb28 	bl	8007ac0 <HAL_UART_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8003476:	f7fe fb95 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20003114 	.word	0x20003114
 8003484:	40005000 	.word	0x40005000
 8003488:	000186a0 	.word	0x000186a0

0800348c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 8003492:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <MX_USART1_UART_Init+0x50>)
 8003494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 8003498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800349c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800349e:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034b2:	220c      	movs	r2, #12
 80034b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034c2:	4805      	ldr	r0, [pc, #20]	@ (80034d8 <MX_USART1_UART_Init+0x4c>)
 80034c4:	f004 fafc 	bl	8007ac0 <HAL_UART_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034ce:	f7fe fb69 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	2000318c 	.word	0x2000318c
 80034dc:	40011000 	.word	0x40011000

080034e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034e4:	4b11      	ldr	r3, [pc, #68]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 80034e6:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <MX_USART2_UART_Init+0x50>)
 80034e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 80034ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80034f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034f2:	4b0e      	ldr	r3, [pc, #56]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003504:	4b09      	ldr	r3, [pc, #36]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 8003506:	220c      	movs	r2, #12
 8003508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350a:	4b08      	ldr	r3, [pc, #32]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003510:	4b06      	ldr	r3, [pc, #24]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003516:	4805      	ldr	r0, [pc, #20]	@ (800352c <MX_USART2_UART_Init+0x4c>)
 8003518:	f004 fad2 	bl	8007ac0 <HAL_UART_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003522:	f7fe fb3f 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20003204 	.word	0x20003204
 8003530:	40004400 	.word	0x40004400

08003534 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003538:	4b10      	ldr	r3, [pc, #64]	@ (800357c <MX_USART3_UART_Init+0x48>)
 800353a:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <MX_USART3_UART_Init+0x4c>)
 800353c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800353e:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <MX_USART3_UART_Init+0x48>)
 8003540:	4a10      	ldr	r2, [pc, #64]	@ (8003584 <MX_USART3_UART_Init+0x50>)
 8003542:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <MX_USART3_UART_Init+0x48>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <MX_USART3_UART_Init+0x48>)
 800354c:	2200      	movs	r2, #0
 800354e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003550:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <MX_USART3_UART_Init+0x48>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <MX_USART3_UART_Init+0x48>)
 8003558:	220c      	movs	r2, #12
 800355a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355c:	4b07      	ldr	r3, [pc, #28]	@ (800357c <MX_USART3_UART_Init+0x48>)
 800355e:	2200      	movs	r2, #0
 8003560:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <MX_USART3_UART_Init+0x48>)
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003568:	4804      	ldr	r0, [pc, #16]	@ (800357c <MX_USART3_UART_Init+0x48>)
 800356a:	f004 faa9 	bl	8007ac0 <HAL_UART_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003574:	f7fe fb16 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	2000327c 	.word	0x2000327c
 8003580:	40004800 	.word	0x40004800
 8003584:	000f4240 	.word	0x000f4240

08003588 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800358c:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <MX_USART6_UART_Init+0x50>)
 8003590:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003592:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 8003594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003598:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	@ (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035c0:	f004 fa7e 	bl	8007ac0 <HAL_UART_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80035ca:	f7fe faeb 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200032f4 	.word	0x200032f4
 80035d8:	40011400 	.word	0x40011400

080035dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b092      	sub	sp, #72	@ 0x48
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a58      	ldr	r2, [pc, #352]	@ (800375c <HAL_UART_MspInit+0x180>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d17b      	bne.n	80036f6 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
 8003602:	4b57      	ldr	r3, [pc, #348]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4a56      	ldr	r2, [pc, #344]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003608:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360c:	6413      	str	r3, [r2, #64]	@ 0x40
 800360e:	4b54      	ldr	r3, [pc, #336]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003616:	633b      	str	r3, [r7, #48]	@ 0x30
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800361e:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	4a4f      	ldr	r2, [pc, #316]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6313      	str	r3, [r2, #48]	@ 0x30
 800362a:	4b4d      	ldr	r3, [pc, #308]	@ (8003760 <HAL_UART_MspInit+0x184>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <HAL_UART_MspInit+0x184>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	4a48      	ldr	r2, [pc, #288]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6313      	str	r3, [r2, #48]	@ 0x30
 8003646:	4b46      	ldr	r3, [pc, #280]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003660:	2303      	movs	r3, #3
 8003662:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003664:	2308      	movs	r3, #8
 8003666:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003668:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800366c:	4619      	mov	r1, r3
 800366e:	483d      	ldr	r0, [pc, #244]	@ (8003764 <HAL_UART_MspInit+0x188>)
 8003670:	f001 fcf0 	bl	8005054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SBUS_RX_Pin;
 8003674:	2304      	movs	r3, #4
 8003676:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003684:	2308      	movs	r3, #8
 8003686:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(SBUS_RX_GPIO_Port, &GPIO_InitStruct);
 8003688:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800368c:	4619      	mov	r1, r3
 800368e:	4836      	ldr	r0, [pc, #216]	@ (8003768 <HAL_UART_MspInit+0x18c>)
 8003690:	f001 fce0 	bl	8005054 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003694:	4b35      	ldr	r3, [pc, #212]	@ (800376c <HAL_UART_MspInit+0x190>)
 8003696:	4a36      	ldr	r2, [pc, #216]	@ (8003770 <HAL_UART_MspInit+0x194>)
 8003698:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800369a:	4b34      	ldr	r3, [pc, #208]	@ (800376c <HAL_UART_MspInit+0x190>)
 800369c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80036a0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a2:	4b32      	ldr	r3, [pc, #200]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a8:	4b30      	ldr	r3, [pc, #192]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ae:	4b2f      	ldr	r3, [pc, #188]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036b4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036b6:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80036c2:	4b2a      	ldr	r3, [pc, #168]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036c8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80036ca:	4b28      	ldr	r3, [pc, #160]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036d0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d2:	4b26      	ldr	r3, [pc, #152]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80036d8:	4824      	ldr	r0, [pc, #144]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036da:	f001 f8ad 	bl	8004838 <HAL_DMA_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80036e4:	f7fe fa5e 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a20      	ldr	r2, [pc, #128]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036ee:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_UART_MspInit+0x190>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80036f4:	e1af      	b.n	8003a56 <HAL_UART_MspInit+0x47a>
  else if(uartHandle->Instance==USART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <HAL_UART_MspInit+0x198>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d13d      	bne.n	800377c <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
 8003704:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <HAL_UART_MspInit+0x184>)
 800370a:	f043 0310 	orr.w	r3, r3, #16
 800370e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371c:	2300      	movs	r3, #0
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	4b0f      	ldr	r3, [pc, #60]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	4a0e      	ldr	r2, [pc, #56]	@ (8003760 <HAL_UART_MspInit+0x184>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6313      	str	r3, [r2, #48]	@ 0x30
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <HAL_UART_MspInit+0x184>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003738:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003746:	2303      	movs	r3, #3
 8003748:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800374a:	2307      	movs	r3, #7
 800374c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003752:	4619      	mov	r1, r3
 8003754:	4808      	ldr	r0, [pc, #32]	@ (8003778 <HAL_UART_MspInit+0x19c>)
 8003756:	f001 fc7d 	bl	8005054 <HAL_GPIO_Init>
}
 800375a:	e17c      	b.n	8003a56 <HAL_UART_MspInit+0x47a>
 800375c:	40005000 	.word	0x40005000
 8003760:	40023800 	.word	0x40023800
 8003764:	40020800 	.word	0x40020800
 8003768:	40020c00 	.word	0x40020c00
 800376c:	2000336c 	.word	0x2000336c
 8003770:	40026010 	.word	0x40026010
 8003774:	40011000 	.word	0x40011000
 8003778:	40020000 	.word	0x40020000
  else if(uartHandle->Instance==USART2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a90      	ldr	r2, [pc, #576]	@ (80039c4 <HAL_UART_MspInit+0x3e8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f040 808b 	bne.w	800389e <HAL_UART_MspInit+0x2c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	4b8e      	ldr	r3, [pc, #568]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	4a8d      	ldr	r2, [pc, #564]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003796:	6413      	str	r3, [r2, #64]	@ 0x40
 8003798:	4b8b      	ldr	r3, [pc, #556]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	4b87      	ldr	r3, [pc, #540]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	4a86      	ldr	r2, [pc, #536]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80037ae:	f043 0308 	orr.w	r3, r3, #8
 80037b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b4:	4b84      	ldr	r3, [pc, #528]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 80037c0:	2360      	movs	r3, #96	@ 0x60
 80037c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037cc:	2303      	movs	r3, #3
 80037ce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037d0:	2307      	movs	r3, #7
 80037d2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037d8:	4619      	mov	r1, r3
 80037da:	487c      	ldr	r0, [pc, #496]	@ (80039cc <HAL_UART_MspInit+0x3f0>)
 80037dc:	f001 fc3a 	bl	8005054 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80037e0:	4b7b      	ldr	r3, [pc, #492]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 80037e2:	4a7c      	ldr	r2, [pc, #496]	@ (80039d4 <HAL_UART_MspInit+0x3f8>)
 80037e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80037e6:	4b7a      	ldr	r3, [pc, #488]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 80037e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ee:	4b78      	ldr	r3, [pc, #480]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f4:	4b76      	ldr	r3, [pc, #472]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037fa:	4b75      	ldr	r3, [pc, #468]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 80037fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003800:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003802:	4b73      	ldr	r3, [pc, #460]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003808:	4b71      	ldr	r3, [pc, #452]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 800380a:	2200      	movs	r2, #0
 800380c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800380e:	4b70      	ldr	r3, [pc, #448]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 8003810:	2200      	movs	r2, #0
 8003812:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003814:	4b6e      	ldr	r3, [pc, #440]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 8003816:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800381a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800381c:	4b6c      	ldr	r3, [pc, #432]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 800381e:	2200      	movs	r2, #0
 8003820:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003822:	486b      	ldr	r0, [pc, #428]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 8003824:	f001 f808 	bl	8004838 <HAL_DMA_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_UART_MspInit+0x256>
      Error_Handler();
 800382e:	f7fe f9b9 	bl	8001ba4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a66      	ldr	r2, [pc, #408]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 8003836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003838:	4a65      	ldr	r2, [pc, #404]	@ (80039d0 <HAL_UART_MspInit+0x3f4>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800383e:	4b66      	ldr	r3, [pc, #408]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003840:	4a66      	ldr	r2, [pc, #408]	@ (80039dc <HAL_UART_MspInit+0x400>)
 8003842:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003844:	4b64      	ldr	r3, [pc, #400]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003846:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800384a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800384c:	4b62      	ldr	r3, [pc, #392]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 800384e:	2240      	movs	r2, #64	@ 0x40
 8003850:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003852:	4b61      	ldr	r3, [pc, #388]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003854:	2200      	movs	r2, #0
 8003856:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003858:	4b5f      	ldr	r3, [pc, #380]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 800385a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800385e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003860:	4b5d      	ldr	r3, [pc, #372]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003862:	2200      	movs	r2, #0
 8003864:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003866:	4b5c      	ldr	r3, [pc, #368]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800386c:	4b5a      	ldr	r3, [pc, #360]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 800386e:	2200      	movs	r2, #0
 8003870:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003872:	4b59      	ldr	r3, [pc, #356]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003874:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003878:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800387a:	4b57      	ldr	r3, [pc, #348]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 800387c:	2200      	movs	r2, #0
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003880:	4855      	ldr	r0, [pc, #340]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003882:	f000 ffd9 	bl	8004838 <HAL_DMA_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800388c:	f7fe f98a 	bl	8001ba4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a51      	ldr	r2, [pc, #324]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003894:	639a      	str	r2, [r3, #56]	@ 0x38
 8003896:	4a50      	ldr	r2, [pc, #320]	@ (80039d8 <HAL_UART_MspInit+0x3fc>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800389c:	e0db      	b.n	8003a56 <HAL_UART_MspInit+0x47a>
  else if(uartHandle->Instance==USART3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4f      	ldr	r2, [pc, #316]	@ (80039e0 <HAL_UART_MspInit+0x404>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	f040 80a5 	bne.w	80039f4 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	4b46      	ldr	r3, [pc, #280]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	4a45      	ldr	r2, [pc, #276]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ba:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	4b3f      	ldr	r3, [pc, #252]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a3e      	ldr	r2, [pc, #248]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b3c      	ldr	r3, [pc, #240]	@ (80039c8 <HAL_UART_MspInit+0x3ec>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MASTER_TX_Pin|MASTER_RX_Pin;
 80038e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f0:	2303      	movs	r3, #3
 80038f2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038f4:	2307      	movs	r3, #7
 80038f6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038fc:	4619      	mov	r1, r3
 80038fe:	4833      	ldr	r0, [pc, #204]	@ (80039cc <HAL_UART_MspInit+0x3f0>)
 8003900:	f001 fba8 	bl	8005054 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003904:	4b37      	ldr	r3, [pc, #220]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003906:	4a38      	ldr	r2, [pc, #224]	@ (80039e8 <HAL_UART_MspInit+0x40c>)
 8003908:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800390a:	4b36      	ldr	r3, [pc, #216]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 800390c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003910:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003912:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003918:	4b32      	ldr	r3, [pc, #200]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800391e:	4b31      	ldr	r3, [pc, #196]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003920:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003924:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003926:	4b2f      	ldr	r3, [pc, #188]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800392c:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003932:	4b2c      	ldr	r3, [pc, #176]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003938:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800393a:	4b2a      	ldr	r3, [pc, #168]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 800393c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003940:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003942:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003944:	2200      	movs	r2, #0
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003948:	4826      	ldr	r0, [pc, #152]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 800394a:	f000 ff75 	bl	8004838 <HAL_DMA_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_MspInit+0x37c>
      Error_Handler();
 8003954:	f7fe f926 	bl	8001ba4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800395e:	4a21      	ldr	r2, [pc, #132]	@ (80039e4 <HAL_UART_MspInit+0x408>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003964:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <HAL_UART_MspInit+0x410>)
 8003966:	4a22      	ldr	r2, [pc, #136]	@ (80039f0 <HAL_UART_MspInit+0x414>)
 8003968:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800396a:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <HAL_UART_MspInit+0x410>)
 800396c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003970:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <HAL_UART_MspInit+0x410>)
 8003974:	2240      	movs	r2, #64	@ 0x40
 8003976:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003978:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <HAL_UART_MspInit+0x410>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <HAL_UART_MspInit+0x410>)
 8003980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003984:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003986:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <HAL_UART_MspInit+0x410>)
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800398c:	4b17      	ldr	r3, [pc, #92]	@ (80039ec <HAL_UART_MspInit+0x410>)
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003992:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <HAL_UART_MspInit+0x410>)
 8003994:	2200      	movs	r2, #0
 8003996:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003998:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <HAL_UART_MspInit+0x410>)
 800399a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800399e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <HAL_UART_MspInit+0x410>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80039a6:	4811      	ldr	r0, [pc, #68]	@ (80039ec <HAL_UART_MspInit+0x410>)
 80039a8:	f000 ff46 	bl	8004838 <HAL_DMA_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_UART_MspInit+0x3da>
      Error_Handler();
 80039b2:	f7fe f8f7 	bl	8001ba4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <HAL_UART_MspInit+0x410>)
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80039bc:	4a0b      	ldr	r2, [pc, #44]	@ (80039ec <HAL_UART_MspInit+0x410>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80039c2:	e048      	b.n	8003a56 <HAL_UART_MspInit+0x47a>
 80039c4:	40004400 	.word	0x40004400
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020c00 	.word	0x40020c00
 80039d0:	200033cc 	.word	0x200033cc
 80039d4:	40026088 	.word	0x40026088
 80039d8:	2000342c 	.word	0x2000342c
 80039dc:	400260a0 	.word	0x400260a0
 80039e0:	40004800 	.word	0x40004800
 80039e4:	2000348c 	.word	0x2000348c
 80039e8:	40026028 	.word	0x40026028
 80039ec:	200034ec 	.word	0x200034ec
 80039f0:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <HAL_UART_MspInit+0x484>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d12b      	bne.n	8003a56 <HAL_UART_MspInit+0x47a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <HAL_UART_MspInit+0x488>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <HAL_UART_MspInit+0x488>)
 8003a08:	f043 0320 	orr.w	r3, r3, #32
 8003a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0e:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <HAL_UART_MspInit+0x488>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_UART_MspInit+0x488>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <HAL_UART_MspInit+0x488>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_UART_MspInit+0x488>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERIAL_SERVO_TX_Pin|SERIAL_SERVO_RX_Pin;
 8003a36:	23c0      	movs	r3, #192	@ 0xc0
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a46:	2308      	movs	r3, #8
 8003a48:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4805      	ldr	r0, [pc, #20]	@ (8003a68 <HAL_UART_MspInit+0x48c>)
 8003a52:	f001 faff 	bl	8005054 <HAL_GPIO_Init>
}
 8003a56:	bf00      	nop
 8003a58:	3748      	adds	r7, #72	@ 0x48
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40011400 	.word	0x40011400
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020800 	.word	0x40020800

08003a6c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a72:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8003a74:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8003a76:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a78:	220c      	movs	r2, #12
 8003a7a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8003a82:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8003aa6:	4805      	ldr	r0, [pc, #20]	@ (8003abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8003aa8:	f001 fca1 	bl	80053ee <HAL_HCD_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8003ab2:	f7fe f877 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2000354c 	.word	0x2000354c
 8003ac0:	40040000 	.word	0x40040000

08003ac4 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	@ (8003b48 <HAL_HCD_MspInit+0x84>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d12c      	bne.n	8003b40 <HAL_HCD_MspInit+0x7c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <HAL_HCD_MspInit+0x88>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a17      	ldr	r2, [pc, #92]	@ (8003b4c <HAL_HCD_MspInit+0x88>)
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_HCD_MspInit+0x88>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003b02:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003b14:	230c      	movs	r3, #12
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480c      	ldr	r0, [pc, #48]	@ (8003b50 <HAL_HCD_MspInit+0x8c>)
 8003b20:	f001 fa98 	bl	8005054 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	4b08      	ldr	r3, [pc, #32]	@ (8003b4c <HAL_HCD_MspInit+0x88>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	4a07      	ldr	r2, [pc, #28]	@ (8003b4c <HAL_HCD_MspInit+0x88>)
 8003b2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <HAL_HCD_MspInit+0x88>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	@ 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40040000 	.word	0x40040000
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020400 	.word	0x40020400

08003b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b58:	f7fe fdd6 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b5c:	480c      	ldr	r0, [pc, #48]	@ (8003b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b5e:	490d      	ldr	r1, [pc, #52]	@ (8003b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b60:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b64:	e002      	b.n	8003b6c <LoopCopyDataInit>

08003b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6a:	3304      	adds	r3, #4

08003b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b70:	d3f9      	bcc.n	8003b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b72:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b74:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b78:	e001      	b.n	8003b7e <LoopFillZerobss>

08003b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7c:	3204      	adds	r2, #4

08003b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b80:	d3fb      	bcc.n	8003b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b82:	f00d f9f9 	bl	8010f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b86:	f7fd feb1 	bl	80018ec <main>
  bx  lr    
 8003b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b94:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003b98:	08012ce0 	.word	0x08012ce0
  ldr r2, =_sbss
 8003b9c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003ba0:	20016e80 	.word	0x20016e80

08003ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ba4:	e7fe      	b.n	8003ba4 <ADC_IRQHandler>
	...

08003ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <HAL_Init+0x40>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_Init+0x40>)
 8003bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_Init+0x40>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <HAL_Init+0x40>)
 8003bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc4:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <HAL_Init+0x40>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	@ (8003be8 <HAL_Init+0x40>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	f000 fde0 	bl	8004796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fe f8e6 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bdc:	f7fe f8b8 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00

08003bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_IncTick+0x20>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_IncTick+0x24>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4a04      	ldr	r2, [pc, #16]	@ (8003c10 <HAL_IncTick+0x24>)
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000008 	.word	0x20000008
 8003c10:	2000392c 	.word	0x2000392c

08003c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return uwTick;
 8003c18:	4b03      	ldr	r3, [pc, #12]	@ (8003c28 <HAL_GetTick+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	2000392c 	.word	0x2000392c

08003c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7ff ffee 	bl	8003c14 <HAL_GetTick>
 8003c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d005      	beq.n	8003c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c46:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <HAL_Delay+0x44>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c52:	bf00      	nop
 8003c54:	f7ff ffde 	bl	8003c14 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d8f7      	bhi.n	8003c54 <HAL_Delay+0x28>
  {
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000008 	.word	0x20000008

08003c74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e033      	b.n	8003cf2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd f960 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003cba:	f023 0302 	bic.w	r3, r3, #2
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fb3a 	bl	8004340 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ce2:	e001      	b.n	8003ce8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_Start+0x1a>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0b2      	b.n	8003e7c <HAL_ADC_Start+0x180>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d018      	beq.n	8003d5e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d3c:	4b52      	ldr	r3, [pc, #328]	@ (8003e88 <HAL_ADC_Start+0x18c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_ADC_Start+0x190>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9a      	lsrs	r2, r3, #18
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d50:	e002      	b.n	8003d58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f9      	bne.n	8003d52 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d17a      	bne.n	8003e62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003daa:	d106      	bne.n	8003dba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	f023 0206 	bic.w	r2, r3, #6
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
 8003db8:	e002      	b.n	8003dc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dc8:	4b31      	ldr	r3, [pc, #196]	@ (8003e90 <HAL_ADC_Start+0x194>)
 8003dca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003dd4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d12a      	bne.n	8003e38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e94 <HAL_ADC_Start+0x198>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d015      	beq.n	8003e18 <HAL_ADC_Start+0x11c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a29      	ldr	r2, [pc, #164]	@ (8003e98 <HAL_ADC_Start+0x19c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d105      	bne.n	8003e02 <HAL_ADC_Start+0x106>
 8003df6:	4b26      	ldr	r3, [pc, #152]	@ (8003e90 <HAL_ADC_Start+0x194>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a25      	ldr	r2, [pc, #148]	@ (8003e9c <HAL_ADC_Start+0x1a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d136      	bne.n	8003e7a <HAL_ADC_Start+0x17e>
 8003e0c:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <HAL_ADC_Start+0x194>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d130      	bne.n	8003e7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d129      	bne.n	8003e7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	e020      	b.n	8003e7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <HAL_ADC_Start+0x198>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d11b      	bne.n	8003e7a <HAL_ADC_Start+0x17e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d114      	bne.n	8003e7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e00b      	b.n	8003e7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	431bde83 	.word	0x431bde83
 8003e90:	40012300 	.word	0x40012300
 8003e94:	40012000 	.word	0x40012000
 8003e98:	40012100 	.word	0x40012100
 8003e9c:	40012200 	.word	0x40012200

08003ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Start_DMA+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0e9      	b.n	8004092 <HAL_ADC_Start_DMA+0x1f2>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d018      	beq.n	8003f06 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ee4:	4b6d      	ldr	r3, [pc, #436]	@ (800409c <HAL_ADC_Start_DMA+0x1fc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6d      	ldr	r2, [pc, #436]	@ (80040a0 <HAL_ADC_Start_DMA+0x200>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0c9a      	lsrs	r2, r3, #18
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f9      	bne.n	8003efa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f14:	d107      	bne.n	8003f26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	f040 80a1 	bne.w	8004078 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f60:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f74:	d106      	bne.n	8003f84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f023 0206 	bic.w	r2, r3, #6
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f82:	e002      	b.n	8003f8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f92:	4b44      	ldr	r3, [pc, #272]	@ (80040a4 <HAL_ADC_Start_DMA+0x204>)
 8003f94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9a:	4a43      	ldr	r2, [pc, #268]	@ (80040a8 <HAL_ADC_Start_DMA+0x208>)
 8003f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa2:	4a42      	ldr	r2, [pc, #264]	@ (80040ac <HAL_ADC_Start_DMA+0x20c>)
 8003fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	4a41      	ldr	r2, [pc, #260]	@ (80040b0 <HAL_ADC_Start_DMA+0x210>)
 8003fac:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003fc6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	334c      	adds	r3, #76	@ 0x4c
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f000 fcd4 	bl	8004994 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d12a      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80040b4 <HAL_ADC_Start_DMA+0x214>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d015      	beq.n	800402e <HAL_ADC_Start_DMA+0x18e>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2c      	ldr	r2, [pc, #176]	@ (80040b8 <HAL_ADC_Start_DMA+0x218>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d105      	bne.n	8004018 <HAL_ADC_Start_DMA+0x178>
 800400c:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <HAL_ADC_Start_DMA+0x204>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a27      	ldr	r2, [pc, #156]	@ (80040bc <HAL_ADC_Start_DMA+0x21c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d136      	bne.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <HAL_ADC_Start_DMA+0x204>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d130      	bne.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d129      	bne.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	e020      	b.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <HAL_ADC_Start_DMA+0x214>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d11b      	bne.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d114      	bne.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	e00b      	b.n	8004090 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0210 	orr.w	r2, r3, #16
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000000 	.word	0x20000000
 80040a0:	431bde83 	.word	0x431bde83
 80040a4:	40012300 	.word	0x40012300
 80040a8:	08004539 	.word	0x08004539
 80040ac:	080045f3 	.word	0x080045f3
 80040b0:	0800460f 	.word	0x0800460f
 80040b4:	40012000 	.word	0x40012000
 80040b8:	40012100 	.word	0x40012100
 80040bc:	40012200 	.word	0x40012200

080040c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x1c>
 8004114:	2302      	movs	r3, #2
 8004116:	e105      	b.n	8004324 <HAL_ADC_ConfigChannel+0x228>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b09      	cmp	r3, #9
 8004126:	d925      	bls.n	8004174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68d9      	ldr	r1, [r3, #12]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	3b1e      	subs	r3, #30
 800413e:	2207      	movs	r2, #7
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43da      	mvns	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	400a      	ands	r2, r1
 800414c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68d9      	ldr	r1, [r3, #12]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	4618      	mov	r0, r3
 8004160:	4603      	mov	r3, r0
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4403      	add	r3, r0
 8004166:	3b1e      	subs	r3, #30
 8004168:	409a      	lsls	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e022      	b.n	80041ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6919      	ldr	r1, [r3, #16]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	2207      	movs	r2, #7
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4618      	mov	r0, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4403      	add	r3, r0
 80041b0:	409a      	lsls	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d824      	bhi.n	800420c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	3b05      	subs	r3, #5
 80041d4:	221f      	movs	r2, #31
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	400a      	ands	r2, r1
 80041e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4618      	mov	r0, r3
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	3b05      	subs	r3, #5
 80041fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34
 800420a:	e04c      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b0c      	cmp	r3, #12
 8004212:	d824      	bhi.n	800425e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	3b23      	subs	r3, #35	@ 0x23
 8004226:	221f      	movs	r2, #31
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43da      	mvns	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	400a      	ands	r2, r1
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4618      	mov	r0, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	3b23      	subs	r3, #35	@ 0x23
 8004250:	fa00 f203 	lsl.w	r2, r0, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
 800425c:	e023      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	3b41      	subs	r3, #65	@ 0x41
 8004270:	221f      	movs	r2, #31
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	400a      	ands	r2, r1
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	4618      	mov	r0, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	3b41      	subs	r3, #65	@ 0x41
 800429a:	fa00 f203 	lsl.w	r2, r0, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042a6:	4b22      	ldr	r3, [pc, #136]	@ (8004330 <HAL_ADC_ConfigChannel+0x234>)
 80042a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <HAL_ADC_ConfigChannel+0x238>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d109      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x1cc>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b12      	cmp	r3, #18
 80042ba:	d105      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a19      	ldr	r2, [pc, #100]	@ (8004334 <HAL_ADC_ConfigChannel+0x238>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d123      	bne.n	800431a <HAL_ADC_ConfigChannel+0x21e>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d003      	beq.n	80042e2 <HAL_ADC_ConfigChannel+0x1e6>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b11      	cmp	r3, #17
 80042e0:	d11b      	bne.n	800431a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d111      	bne.n	800431a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <HAL_ADC_ConfigChannel+0x23c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a10      	ldr	r2, [pc, #64]	@ (800433c <HAL_ADC_ConfigChannel+0x240>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	0c9a      	lsrs	r2, r3, #18
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800430c:	e002      	b.n	8004314 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3b01      	subs	r3, #1
 8004312:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f9      	bne.n	800430e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012300 	.word	0x40012300
 8004334:	40012000 	.word	0x40012000
 8004338:	20000000 	.word	0x20000000
 800433c:	431bde83 	.word	0x431bde83

08004340 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004348:	4b79      	ldr	r3, [pc, #484]	@ (8004530 <ADC_Init+0x1f0>)
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	4a58      	ldr	r2, [pc, #352]	@ (8004534 <ADC_Init+0x1f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	e00f      	b.n	800443e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800442c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800443c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0202 	bic.w	r2, r2, #2
 800444c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7e1b      	ldrb	r3, [r3, #24]
 8004458:	005a      	lsls	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800447a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800448a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	3b01      	subs	r3, #1
 8004498:	035a      	lsls	r2, r3, #13
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e007      	b.n	80044b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80044c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	051a      	lsls	r2, r3, #20
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044f6:	025a      	lsls	r2, r3, #9
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	029a      	lsls	r2, r3, #10
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40012300 	.word	0x40012300
 8004534:	0f000001 	.word	0x0f000001

08004538 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	d13c      	bne.n	80045cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d12b      	bne.n	80045c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004570:	2b00      	cmp	r3, #0
 8004572:	d127      	bne.n	80045c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800458c:	2b00      	cmp	r3, #0
 800458e:	d119      	bne.n	80045c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0220 	bic.w	r2, r2, #32
 800459e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff fd7b 	bl	80040c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045ca:	e00e      	b.n	80045ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fd85 	bl	80040e8 <HAL_ADC_ErrorCallback>
}
 80045de:	e004      	b.n	80045ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4798      	blx	r3
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fd67 	bl	80040d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	@ 0x40
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fd5a 	bl	80040e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800464c:	4b0c      	ldr	r3, [pc, #48]	@ (8004680 <__NVIC_SetPriorityGrouping+0x44>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004658:	4013      	ands	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800466c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800466e:	4a04      	ldr	r2, [pc, #16]	@ (8004680 <__NVIC_SetPriorityGrouping+0x44>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	60d3      	str	r3, [r2, #12]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004688:	4b04      	ldr	r3, [pc, #16]	@ (800469c <__NVIC_GetPriorityGrouping+0x18>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 0307 	and.w	r3, r3, #7
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	db0b      	blt.n	80046ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	f003 021f 	and.w	r2, r3, #31
 80046b8:	4907      	ldr	r1, [pc, #28]	@ (80046d8 <__NVIC_EnableIRQ+0x38>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2001      	movs	r0, #1
 80046c2:	fa00 f202 	lsl.w	r2, r0, r2
 80046c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e100 	.word	0xe000e100

080046dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	6039      	str	r1, [r7, #0]
 80046e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	db0a      	blt.n	8004706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	490c      	ldr	r1, [pc, #48]	@ (8004728 <__NVIC_SetPriority+0x4c>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	440b      	add	r3, r1
 8004700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004704:	e00a      	b.n	800471c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4908      	ldr	r1, [pc, #32]	@ (800472c <__NVIC_SetPriority+0x50>)
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	3b04      	subs	r3, #4
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	440b      	add	r3, r1
 800471a:	761a      	strb	r2, [r3, #24]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	@ 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f1c3 0307 	rsb	r3, r3, #7
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf28      	it	cs
 800474e:	2304      	movcs	r3, #4
 8004750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3304      	adds	r3, #4
 8004756:	2b06      	cmp	r3, #6
 8004758:	d902      	bls.n	8004760 <NVIC_EncodePriority+0x30>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3b03      	subs	r3, #3
 800475e:	e000      	b.n	8004762 <NVIC_EncodePriority+0x32>
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	401a      	ands	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004778:	f04f 31ff 	mov.w	r1, #4294967295
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	43d9      	mvns	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004788:	4313      	orrs	r3, r2
         );
}
 800478a:	4618      	mov	r0, r3
 800478c:	3724      	adds	r7, #36	@ 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ff4c 	bl	800463c <__NVIC_SetPriorityGrouping>
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047be:	f7ff ff61 	bl	8004684 <__NVIC_GetPriorityGrouping>
 80047c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	6978      	ldr	r0, [r7, #20]
 80047ca:	f7ff ffb1 	bl	8004730 <NVIC_EncodePriority>
 80047ce:	4602      	mov	r2, r0
 80047d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff ff80 	bl	80046dc <__NVIC_SetPriority>
}
 80047dc:	bf00      	nop
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ff54 	bl	80046a0 <__NVIC_EnableIRQ>
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e00e      	b.n	8004830 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	795b      	ldrb	r3, [r3, #5]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fc24 	bl	8001070 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004844:	f7ff f9e6 	bl	8003c14 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e099      	b.n	8004988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004874:	e00f      	b.n	8004896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004876:	f7ff f9cd 	bl	8003c14 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b05      	cmp	r3, #5
 8004882:	d908      	bls.n	8004896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2203      	movs	r2, #3
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e078      	b.n	8004988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e8      	bne.n	8004876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4b38      	ldr	r3, [pc, #224]	@ (8004990 <HAL_DMA_Init+0x158>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d107      	bne.n	8004900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	4313      	orrs	r3, r2
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0307 	bic.w	r3, r3, #7
 8004916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	2b04      	cmp	r3, #4
 8004928:	d117      	bne.n	800495a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fb0d 	bl	8004f5c <DMA_CheckFifoParam>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2240      	movs	r2, #64	@ 0x40
 800494c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004956:	2301      	movs	r3, #1
 8004958:	e016      	b.n	8004988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fac4 	bl	8004ef0 <DMA_CalcBaseAndBitshift>
 8004968:	4603      	mov	r3, r0
 800496a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	223f      	movs	r2, #63	@ 0x3f
 8004972:	409a      	lsls	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	f010803f 	.word	0xf010803f

08004994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_DMA_Start_IT+0x26>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e040      	b.n	8004a3c <HAL_DMA_Start_IT+0xa8>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d12f      	bne.n	8004a2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fa56 	bl	8004e94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ec:	223f      	movs	r2, #63	@ 0x3f
 80049ee:	409a      	lsls	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0216 	orr.w	r2, r2, #22
 8004a02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e005      	b.n	8004a3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a52:	f7ff f8df 	bl	8003c14 <HAL_GetTick>
 8004a56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d008      	beq.n	8004a76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2280      	movs	r2, #128	@ 0x80
 8004a68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e052      	b.n	8004b1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0216 	bic.w	r2, r2, #22
 8004a84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_DMA_Abort+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0208 	bic.w	r2, r2, #8
 8004ab4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac6:	e013      	b.n	8004af0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac8:	f7ff f8a4 	bl	8003c14 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d90c      	bls.n	8004af0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2203      	movs	r2, #3
 8004ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e015      	b.n	8004b1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e4      	bne.n	8004ac8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	223f      	movs	r2, #63	@ 0x3f
 8004b04:	409a      	lsls	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2280      	movs	r2, #128	@ 0x80
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e00c      	b.n	8004b5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2205      	movs	r2, #5
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b74:	4b8e      	ldr	r3, [pc, #568]	@ (8004db0 <HAL_DMA_IRQHandler+0x248>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a8e      	ldr	r2, [pc, #568]	@ (8004db4 <HAL_DMA_IRQHandler+0x24c>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	2208      	movs	r2, #8
 8004b94:	409a      	lsls	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01a      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	f043 0202 	orr.w	r2, r3, #2
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	2204      	movs	r2, #4
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d012      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	2210      	movs	r2, #16
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d043      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03c      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	2210      	movs	r2, #16
 8004c64:	409a      	lsls	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d024      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
 8004c96:	e01f      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
 8004ca8:	e016      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0208 	bic.w	r2, r2, #8
 8004cc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	2220      	movs	r2, #32
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 808f 	beq.w	8004e08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8087 	beq.w	8004e08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfe:	2220      	movs	r2, #32
 8004d00:	409a      	lsls	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d136      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0216 	bic.w	r2, r2, #22
 8004d20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_DMA_IRQHandler+0x1da>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0208 	bic.w	r2, r2, #8
 8004d50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	223f      	movs	r2, #63	@ 0x3f
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d07e      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
        }
        return;
 8004d7e:	e079      	b.n	8004e74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01d      	beq.n	8004dca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d031      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	e02c      	b.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000
 8004db4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d023      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
 8004dc8:	e01e      	b.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10f      	bne.n	8004df8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0210 	bic.w	r2, r2, #16
 8004de6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d032      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d022      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d307      	bcc.n	8004e50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f2      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x2cc>
 8004e4e:	e000      	b.n	8004e52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
 8004e72:	e000      	b.n	8004e76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e74:	bf00      	nop
    }
  }
}
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b40      	cmp	r3, #64	@ 0x40
 8004ec0:	d108      	bne.n	8004ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ed2:	e007      	b.n	8004ee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	3b10      	subs	r3, #16
 8004f00:	4a14      	ldr	r2, [pc, #80]	@ (8004f54 <DMA_CalcBaseAndBitshift+0x64>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f0a:	4a13      	ldr	r2, [pc, #76]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x68>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d909      	bls.n	8004f32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f30:	e007      	b.n	8004f42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	aaaaaaab 	.word	0xaaaaaaab
 8004f58:	080129ec 	.word	0x080129ec

08004f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d11f      	bne.n	8004fb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d856      	bhi.n	800502a <DMA_CheckFifoParam+0xce>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <DMA_CheckFifoParam+0x28>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa7 	.word	0x08004fa7
 8004f8c:	08004f95 	.word	0x08004f95
 8004f90:	0800502b 	.word	0x0800502b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d046      	beq.n	800502e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa4:	e043      	b.n	800502e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fae:	d140      	bne.n	8005032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb4:	e03d      	b.n	8005032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fbe:	d121      	bne.n	8005004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d837      	bhi.n	8005036 <DMA_CheckFifoParam+0xda>
 8004fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <DMA_CheckFifoParam+0x70>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fe3 	.word	0x08004fe3
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08004ff5 	.word	0x08004ff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e030      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d025      	beq.n	800503a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff2:	e022      	b.n	800503a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ffc:	d11f      	bne.n	800503e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005002:	e01c      	b.n	800503e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d903      	bls.n	8005012 <DMA_CheckFifoParam+0xb6>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d003      	beq.n	8005018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005010:	e018      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      break;
 8005016:	e015      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	e00b      	b.n	8005042 <DMA_CheckFifoParam+0xe6>
      break;
 800502a:	bf00      	nop
 800502c:	e00a      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      break;
 800502e:	bf00      	nop
 8005030:	e008      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      break;
 8005032:	bf00      	nop
 8005034:	e006      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      break;
 8005036:	bf00      	nop
 8005038:	e004      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      break;   
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
      break;
 8005042:	bf00      	nop
    }
  } 
  
  return status; 
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	@ 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e16b      	b.n	8005348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005070:	2201      	movs	r2, #1
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4013      	ands	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	429a      	cmp	r2, r3
 800508a:	f040 815a 	bne.w	8005342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d005      	beq.n	80050a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d130      	bne.n	8005108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2203      	movs	r2, #3
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050dc:	2201      	movs	r2, #1
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 0201 	and.w	r2, r3, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d017      	beq.n	8005144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	2203      	movs	r2, #3
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d123      	bne.n	8005198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	08da      	lsrs	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3208      	adds	r2, #8
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	220f      	movs	r2, #15
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	08da      	lsrs	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3208      	adds	r2, #8
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	2203      	movs	r2, #3
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 0203 	and.w	r2, r3, #3
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80b4 	beq.w	8005342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	4b60      	ldr	r3, [pc, #384]	@ (8005360 <HAL_GPIO_Init+0x30c>)
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	4a5f      	ldr	r2, [pc, #380]	@ (8005360 <HAL_GPIO_Init+0x30c>)
 80051e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80051ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005360 <HAL_GPIO_Init+0x30c>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005364 <HAL_GPIO_Init+0x310>)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	3302      	adds	r3, #2
 80051fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	220f      	movs	r2, #15
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a52      	ldr	r2, [pc, #328]	@ (8005368 <HAL_GPIO_Init+0x314>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02b      	beq.n	800527a <HAL_GPIO_Init+0x226>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a51      	ldr	r2, [pc, #324]	@ (800536c <HAL_GPIO_Init+0x318>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d025      	beq.n	8005276 <HAL_GPIO_Init+0x222>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a50      	ldr	r2, [pc, #320]	@ (8005370 <HAL_GPIO_Init+0x31c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01f      	beq.n	8005272 <HAL_GPIO_Init+0x21e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a4f      	ldr	r2, [pc, #316]	@ (8005374 <HAL_GPIO_Init+0x320>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d019      	beq.n	800526e <HAL_GPIO_Init+0x21a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a4e      	ldr	r2, [pc, #312]	@ (8005378 <HAL_GPIO_Init+0x324>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_GPIO_Init+0x216>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a4d      	ldr	r2, [pc, #308]	@ (800537c <HAL_GPIO_Init+0x328>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00d      	beq.n	8005266 <HAL_GPIO_Init+0x212>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a4c      	ldr	r2, [pc, #304]	@ (8005380 <HAL_GPIO_Init+0x32c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <HAL_GPIO_Init+0x20e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a4b      	ldr	r2, [pc, #300]	@ (8005384 <HAL_GPIO_Init+0x330>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_GPIO_Init+0x20a>
 800525a:	2307      	movs	r3, #7
 800525c:	e00e      	b.n	800527c <HAL_GPIO_Init+0x228>
 800525e:	2308      	movs	r3, #8
 8005260:	e00c      	b.n	800527c <HAL_GPIO_Init+0x228>
 8005262:	2306      	movs	r3, #6
 8005264:	e00a      	b.n	800527c <HAL_GPIO_Init+0x228>
 8005266:	2305      	movs	r3, #5
 8005268:	e008      	b.n	800527c <HAL_GPIO_Init+0x228>
 800526a:	2304      	movs	r3, #4
 800526c:	e006      	b.n	800527c <HAL_GPIO_Init+0x228>
 800526e:	2303      	movs	r3, #3
 8005270:	e004      	b.n	800527c <HAL_GPIO_Init+0x228>
 8005272:	2302      	movs	r3, #2
 8005274:	e002      	b.n	800527c <HAL_GPIO_Init+0x228>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_GPIO_Init+0x228>
 800527a:	2300      	movs	r3, #0
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	f002 0203 	and.w	r2, r2, #3
 8005282:	0092      	lsls	r2, r2, #2
 8005284:	4093      	lsls	r3, r2
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800528c:	4935      	ldr	r1, [pc, #212]	@ (8005364 <HAL_GPIO_Init+0x310>)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	3302      	adds	r3, #2
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800529a:	4b3b      	ldr	r3, [pc, #236]	@ (8005388 <HAL_GPIO_Init+0x334>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052be:	4a32      	ldr	r2, [pc, #200]	@ (8005388 <HAL_GPIO_Init+0x334>)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052c4:	4b30      	ldr	r3, [pc, #192]	@ (8005388 <HAL_GPIO_Init+0x334>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052e8:	4a27      	ldr	r2, [pc, #156]	@ (8005388 <HAL_GPIO_Init+0x334>)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052ee:	4b26      	ldr	r3, [pc, #152]	@ (8005388 <HAL_GPIO_Init+0x334>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005312:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <HAL_GPIO_Init+0x334>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005318:	4b1b      	ldr	r3, [pc, #108]	@ (8005388 <HAL_GPIO_Init+0x334>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800533c:	4a12      	ldr	r2, [pc, #72]	@ (8005388 <HAL_GPIO_Init+0x334>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3301      	adds	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b0f      	cmp	r3, #15
 800534c:	f67f ae90 	bls.w	8005070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3724      	adds	r7, #36	@ 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800
 8005364:	40013800 	.word	0x40013800
 8005368:	40020000 	.word	0x40020000
 800536c:	40020400 	.word	0x40020400
 8005370:	40020800 	.word	0x40020800
 8005374:	40020c00 	.word	0x40020c00
 8005378:	40021000 	.word	0x40021000
 800537c:	40021400 	.word	0x40021400
 8005380:	40021800 	.word	0x40021800
 8005384:	40021c00 	.word	0x40021c00
 8005388:	40013c00 	.word	0x40013c00

0800538c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	887b      	ldrh	r3, [r7, #2]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	e001      	b.n	80053ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
 80053c8:	4613      	mov	r3, r2
 80053ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053d8:	e003      	b.n	80053e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	041a      	lsls	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	619a      	str	r2, [r3, #24]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af02      	add	r7, sp, #8
 80053f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e059      	b.n	80054b4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fe fb52 	bl	8003ac4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2203      	movs	r2, #3
 8005424:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800542e:	d102      	bne.n	8005436 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f003 ffa8 	bl	8009390 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7c1a      	ldrb	r2, [r3, #16]
 8005448:	f88d 2000 	strb.w	r2, [sp]
 800544c:	3304      	adds	r3, #4
 800544e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005450:	f003 ff3a 	bl	80092c8 <USB_CoreInit>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e026      	b.n	80054b4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f003 ffa0 	bl	80093b2 <USB_SetCurrentMode>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e017      	b.n	80054b4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	7c1a      	ldrb	r2, [r3, #16]
 800548c:	f88d 2000 	strb.w	r2, [sp]
 8005490:	3304      	adds	r3, #4
 8005492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005494:	f004 f878 	bl	8009588 <USB_HostInit>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e004      	b.n	80054b4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e12b      	b.n	8005726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc f952 	bl	800178c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	@ 0x24
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800550e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800551e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005520:	f000 fd8a 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4a81      	ldr	r2, [pc, #516]	@ (8005730 <HAL_I2C_Init+0x274>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d807      	bhi.n	8005540 <HAL_I2C_Init+0x84>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a80      	ldr	r2, [pc, #512]	@ (8005734 <HAL_I2C_Init+0x278>)
 8005534:	4293      	cmp	r3, r2
 8005536:	bf94      	ite	ls
 8005538:	2301      	movls	r3, #1
 800553a:	2300      	movhi	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e006      	b.n	800554e <HAL_I2C_Init+0x92>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a7d      	ldr	r2, [pc, #500]	@ (8005738 <HAL_I2C_Init+0x27c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	bf94      	ite	ls
 8005548:	2301      	movls	r3, #1
 800554a:	2300      	movhi	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0e7      	b.n	8005726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a78      	ldr	r2, [pc, #480]	@ (800573c <HAL_I2C_Init+0x280>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0c9b      	lsrs	r3, r3, #18
 8005560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a6a      	ldr	r2, [pc, #424]	@ (8005730 <HAL_I2C_Init+0x274>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d802      	bhi.n	8005590 <HAL_I2C_Init+0xd4>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3301      	adds	r3, #1
 800558e:	e009      	b.n	80055a4 <HAL_I2C_Init+0xe8>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	4a69      	ldr	r2, [pc, #420]	@ (8005740 <HAL_I2C_Init+0x284>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	099b      	lsrs	r3, r3, #6
 80055a2:	3301      	adds	r3, #1
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	495c      	ldr	r1, [pc, #368]	@ (8005730 <HAL_I2C_Init+0x274>)
 80055c0:	428b      	cmp	r3, r1
 80055c2:	d819      	bhi.n	80055f8 <HAL_I2C_Init+0x13c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1e59      	subs	r1, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055d8:	400b      	ands	r3, r1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_I2C_Init+0x138>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e59      	subs	r1, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f2:	e051      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 80055f4:	2304      	movs	r3, #4
 80055f6:	e04f      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <HAL_I2C_Init+0x168>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e58      	subs	r0, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	440b      	add	r3, r1
 800560e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e012      	b.n	800564a <HAL_I2C_Init+0x18e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	0099      	lsls	r1, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Init+0x196>
 800564e:	2301      	movs	r3, #1
 8005650:	e022      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <HAL_I2C_Init+0x1bc>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1e58      	subs	r0, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	440b      	add	r3, r1
 8005668:	fbb0 f3f3 	udiv	r3, r0, r3
 800566c:	3301      	adds	r3, #1
 800566e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005676:	e00f      	b.n	8005698 <HAL_I2C_Init+0x1dc>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1e58      	subs	r0, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6859      	ldr	r1, [r3, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	0099      	lsls	r1, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	fbb0 f3f3 	udiv	r3, r0, r3
 800568e:	3301      	adds	r3, #1
 8005690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	6809      	ldr	r1, [r1, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6911      	ldr	r1, [r2, #16]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	430b      	orrs	r3, r1
 80056da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	000186a0 	.word	0x000186a0
 8005734:	001e847f 	.word	0x001e847f
 8005738:	003d08ff 	.word	0x003d08ff
 800573c:	431bde83 	.word	0x431bde83
 8005740:	10624dd3 	.word	0x10624dd3

08005744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e267      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d075      	beq.n	800584e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005762:	4b88      	ldr	r3, [pc, #544]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b04      	cmp	r3, #4
 800576c:	d00c      	beq.n	8005788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576e:	4b85      	ldr	r3, [pc, #532]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005776:	2b08      	cmp	r3, #8
 8005778:	d112      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800577a:	4b82      	ldr	r3, [pc, #520]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005786:	d10b      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005788:	4b7e      	ldr	r3, [pc, #504]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d05b      	beq.n	800584c <HAL_RCC_OscConfig+0x108>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d157      	bne.n	800584c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e242      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d106      	bne.n	80057b8 <HAL_RCC_OscConfig+0x74>
 80057aa:	4b76      	ldr	r3, [pc, #472]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a75      	ldr	r2, [pc, #468]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e01d      	b.n	80057f4 <HAL_RCC_OscConfig+0xb0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x98>
 80057c2:	4b70      	ldr	r3, [pc, #448]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0xb0>
 80057dc:	4b69      	ldr	r3, [pc, #420]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a68      	ldr	r2, [pc, #416]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	4b66      	ldr	r3, [pc, #408]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a65      	ldr	r2, [pc, #404]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d013      	beq.n	8005824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fe fa0a 	bl	8003c14 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005804:	f7fe fa06 	bl	8003c14 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	@ 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e207      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	4b5b      	ldr	r3, [pc, #364]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0xc0>
 8005822:	e014      	b.n	800584e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fe f9f6 	bl	8003c14 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800582c:	f7fe f9f2 	bl	8003c14 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	@ 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e1f3      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583e:	4b51      	ldr	r3, [pc, #324]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0xe8>
 800584a:	e000      	b.n	800584e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d063      	beq.n	8005922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800585a:	4b4a      	ldr	r3, [pc, #296]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005866:	4b47      	ldr	r3, [pc, #284]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800586e:	2b08      	cmp	r3, #8
 8005870:	d11c      	bne.n	80058ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005872:	4b44      	ldr	r3, [pc, #272]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d116      	bne.n	80058ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587e:	4b41      	ldr	r3, [pc, #260]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_RCC_OscConfig+0x152>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d001      	beq.n	8005896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1c7      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005896:	4b3b      	ldr	r3, [pc, #236]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4937      	ldr	r1, [pc, #220]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058aa:	e03a      	b.n	8005922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b4:	4b34      	ldr	r3, [pc, #208]	@ (8005988 <HAL_RCC_OscConfig+0x244>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ba:	f7fe f9ab 	bl	8003c14 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c2:	f7fe f9a7 	bl	8003c14 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e1a8      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e0:	4b28      	ldr	r3, [pc, #160]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4925      	ldr	r1, [pc, #148]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	e015      	b.n	8005922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f6:	4b24      	ldr	r3, [pc, #144]	@ (8005988 <HAL_RCC_OscConfig+0x244>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe f98a 	bl	8003c14 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005904:	f7fe f986 	bl	8003c14 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e187      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005916:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d036      	beq.n	800599c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <HAL_RCC_OscConfig+0x248>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fe f96a 	bl	8003c14 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005944:	f7fe f966 	bl	8003c14 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e167      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005956:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_RCC_OscConfig+0x240>)
 8005958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x200>
 8005962:	e01b      	b.n	800599c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_RCC_OscConfig+0x248>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596a:	f7fe f953 	bl	8003c14 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	e00e      	b.n	8005990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005972:	f7fe f94f 	bl	8003c14 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d907      	bls.n	8005990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e150      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
 8005984:	40023800 	.word	0x40023800
 8005988:	42470000 	.word	0x42470000
 800598c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	4b88      	ldr	r3, [pc, #544]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ea      	bne.n	8005972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8097 	beq.w	8005ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ae:	4b81      	ldr	r3, [pc, #516]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10f      	bne.n	80059da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ca:	4b7a      	ldr	r3, [pc, #488]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059da:	4b77      	ldr	r3, [pc, #476]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d118      	bne.n	8005a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e6:	4b74      	ldr	r3, [pc, #464]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a73      	ldr	r2, [pc, #460]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059f2:	f7fe f90f 	bl	8003c14 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059fa:	f7fe f90b 	bl	8003c14 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e10c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb8 <HAL_RCC_OscConfig+0x474>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x2ea>
 8005a20:	4b64      	ldr	r3, [pc, #400]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a24:	4a63      	ldr	r2, [pc, #396]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCC_OscConfig+0x324>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x30c>
 8005a36:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a42:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a46:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0x324>
 8005a50:	4b58      	ldr	r3, [pc, #352]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4a57      	ldr	r2, [pc, #348]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a5c:	4b55      	ldr	r3, [pc, #340]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a60:	4a54      	ldr	r2, [pc, #336]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f023 0304 	bic.w	r3, r3, #4
 8005a66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fe f8d0 	bl	8003c14 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a78:	f7fe f8cc 	bl	8003c14 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0cb      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8e:	4b49      	ldr	r3, [pc, #292]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ee      	beq.n	8005a78 <HAL_RCC_OscConfig+0x334>
 8005a9a:	e014      	b.n	8005ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9c:	f7fe f8ba 	bl	8003c14 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa2:	e00a      	b.n	8005aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa4:	f7fe f8b6 	bl	8003c14 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e0b5      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aba:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ee      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005acc:	4b39      	ldr	r3, [pc, #228]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	4a38      	ldr	r2, [pc, #224]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80a1 	beq.w	8005c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ae2:	4b34      	ldr	r3, [pc, #208]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d05c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d141      	bne.n	8005b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fe f88a 	bl	8003c14 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fe f886 	bl	8003c14 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e087      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	061b      	lsls	r3, r3, #24
 8005b46:	491b      	ldr	r1, [pc, #108]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fe f85f 	bl	8003c14 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fe f85b 	bl	8003c14 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e05c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6c:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x416>
 8005b78:	e054      	b.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b10      	ldr	r3, [pc, #64]	@ (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fe f848 	bl	8003c14 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fe f844 	bl	8003c14 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e045      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x444>
 8005ba6:	e03d      	b.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e038      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c30 <HAL_RCC_OscConfig+0x4ec>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d028      	beq.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d121      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11a      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800

08005c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0cc      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c48:	4b68      	ldr	r3, [pc, #416]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90c      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4b65      	ldr	r3, [pc, #404]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b63      	ldr	r3, [pc, #396]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0b8      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c88:	4b59      	ldr	r3, [pc, #356]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca0:	4b53      	ldr	r3, [pc, #332]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a52      	ldr	r2, [pc, #328]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cac:	4b50      	ldr	r3, [pc, #320]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	494d      	ldr	r1, [pc, #308]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d044      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d107      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd2:	4b47      	ldr	r3, [pc, #284]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d119      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e07f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d003      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e06f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d02:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e067      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d12:	4b37      	ldr	r3, [pc, #220]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f023 0203 	bic.w	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4934      	ldr	r1, [pc, #208]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fd ff76 	bl	8003c14 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2c:	f7fd ff72 	bl	8003c14 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e04f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	4b2b      	ldr	r3, [pc, #172]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 020c 	and.w	r2, r3, #12
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d1eb      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d20c      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b22      	ldr	r3, [pc, #136]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e032      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d88:	4b19      	ldr	r3, [pc, #100]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4916      	ldr	r1, [pc, #88]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	490e      	ldr	r1, [pc, #56]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dba:	f000 f82d 	bl	8005e18 <HAL_RCC_GetSysClockFreq>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	490a      	ldr	r1, [pc, #40]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c0>)
 8005dcc:	5ccb      	ldrb	r3, [r1, r3]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dd6:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <HAL_RCC_ClockConfig+0x1c8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fb ffe4 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023c00 	.word	0x40023c00
 8005df0:	40023800 	.word	0x40023800
 8005df4:	080129d4 	.word	0x080129d4
 8005df8:	20000000 	.word	0x20000000
 8005dfc:	20000004 	.word	0x20000004

08005e00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005e04:	4b03      	ldr	r3, [pc, #12]	@ (8005e14 <HAL_RCC_EnableCSS+0x14>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	4247004c 	.word	0x4247004c

08005e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b094      	sub	sp, #80	@ 0x50
 8005e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e24:	2300      	movs	r3, #0
 8005e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e28:	2300      	movs	r3, #0
 8005e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e30:	4b79      	ldr	r3, [pc, #484]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 030c 	and.w	r3, r3, #12
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d00d      	beq.n	8005e58 <HAL_RCC_GetSysClockFreq+0x40>
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	f200 80e1 	bhi.w	8006004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x34>
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d003      	beq.n	8005e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e4a:	e0db      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e4c:	4b73      	ldr	r3, [pc, #460]	@ (800601c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005e50:	e0db      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e52:	4b72      	ldr	r3, [pc, #456]	@ (800601c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e56:	e0d8      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e58:	4b6f      	ldr	r3, [pc, #444]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e62:	4b6d      	ldr	r3, [pc, #436]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d063      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	099b      	lsrs	r3, r3, #6
 8005e74:	2200      	movs	r2, #0
 8005e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e82:	2300      	movs	r3, #0
 8005e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	f04f 0000 	mov.w	r0, #0
 8005e92:	f04f 0100 	mov.w	r1, #0
 8005e96:	0159      	lsls	r1, r3, #5
 8005e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e9c:	0150      	lsls	r0, r2, #5
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	1a51      	subs	r1, r2, r1
 8005ea6:	6139      	str	r1, [r7, #16]
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	018b      	lsls	r3, r1, #6
 8005ec0:	4651      	mov	r1, sl
 8005ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	018a      	lsls	r2, r1, #6
 8005eca:	4651      	mov	r1, sl
 8005ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eea:	4690      	mov	r8, r2
 8005eec:	4699      	mov	r9, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	eb18 0303 	adds.w	r3, r8, r3
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	eb49 0303 	adc.w	r3, r9, r3
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	028b      	lsls	r3, r1, #10
 8005f0e:	4621      	mov	r1, r4
 8005f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f14:	4621      	mov	r1, r4
 8005f16:	028a      	lsls	r2, r1, #10
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f1e:	2200      	movs	r2, #0
 8005f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f28:	f7fa fe20 	bl	8000b6c <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4613      	mov	r3, r2
 8005f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f34:	e058      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f36:	4b38      	ldr	r3, [pc, #224]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	099b      	lsrs	r3, r3, #6
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	4611      	mov	r1, r2
 8005f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f46:	623b      	str	r3, [r7, #32]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	f04f 0000 	mov.w	r0, #0
 8005f58:	f04f 0100 	mov.w	r1, #0
 8005f5c:	0159      	lsls	r1, r3, #5
 8005f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f62:	0150      	lsls	r0, r2, #5
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4641      	mov	r1, r8
 8005f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f6e:	4649      	mov	r1, r9
 8005f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f88:	ebb2 040a 	subs.w	r4, r2, sl
 8005f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	00eb      	lsls	r3, r5, #3
 8005f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9e:	00e2      	lsls	r2, r4, #3
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	461d      	mov	r5, r3
 8005fa4:	4643      	mov	r3, r8
 8005fa6:	18e3      	adds	r3, r4, r3
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	464b      	mov	r3, r9
 8005fac:	eb45 0303 	adc.w	r3, r5, r3
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	028b      	lsls	r3, r1, #10
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc8:	4621      	mov	r1, r4
 8005fca:	028a      	lsls	r2, r1, #10
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	61fa      	str	r2, [r7, #28]
 8005fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fdc:	f7fa fdc6 	bl	8000b6c <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006002:	e002      	b.n	800600a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <HAL_RCC_GetSysClockFreq+0x204>)
 8006006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800600a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800600c:	4618      	mov	r0, r3
 800600e:	3750      	adds	r7, #80	@ 0x50
 8006010:	46bd      	mov	sp, r7
 8006012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800
 800601c:	00f42400 	.word	0x00f42400

08006020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006024:	4b03      	ldr	r3, [pc, #12]	@ (8006034 <HAL_RCC_GetHCLKFreq+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000000 	.word	0x20000000

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800603c:	f7ff fff0 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0a9b      	lsrs	r3, r3, #10
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4903      	ldr	r1, [pc, #12]	@ (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40023800 	.word	0x40023800
 800605c:	080129e4 	.word	0x080129e4

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006064:	f7ff ffdc 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	@ (8006080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0b5b      	lsrs	r3, r3, #13
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	@ (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	080129e4 	.word	0x080129e4

08006088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	220f      	movs	r2, #15
 8006096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006098:	4b12      	ldr	r3, [pc, #72]	@ (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0203 	and.w	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060a4:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060b0:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060bc:	4b09      	ldr	r3, [pc, #36]	@ (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060ca:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <HAL_RCC_GetClockConfig+0x60>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0207 	and.w	r2, r3, #7
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40023c00 	.word	0x40023c00

080060ec <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80060f0:	4b06      	ldr	r3, [pc, #24]	@ (800610c <HAL_RCC_NMI_IRQHandler+0x20>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	2b80      	cmp	r3, #128	@ 0x80
 80060fa:	d104      	bne.n	8006106 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80060fc:	f000 f80a 	bl	8006114 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006100:	4b03      	ldr	r3, [pc, #12]	@ (8006110 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006102:	2280      	movs	r2, #128	@ 0x80
 8006104:	701a      	strb	r2, [r3, #0]
  }
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
 8006110:	4002380e 	.word	0x4002380e

08006114 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e09b      	b.n	800626e <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d108      	bne.n	8006150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006146:	d009      	beq.n	800615c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	61da      	str	r2, [r3, #28]
 800614e:	e005      	b.n	800615c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d126      	bne.n	80061bc <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a3f      	ldr	r2, [pc, #252]	@ (8006278 <HAL_SPI_Init+0x154>)
 800617a:	659a      	str	r2, [r3, #88]	@ 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3f      	ldr	r2, [pc, #252]	@ (800627c <HAL_SPI_Init+0x158>)
 8006180:	65da      	str	r2, [r3, #92]	@ 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a3e      	ldr	r2, [pc, #248]	@ (8006280 <HAL_SPI_Init+0x15c>)
 8006186:	661a      	str	r2, [r3, #96]	@ 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3e      	ldr	r2, [pc, #248]	@ (8006284 <HAL_SPI_Init+0x160>)
 800618c:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a3d      	ldr	r2, [pc, #244]	@ (8006288 <HAL_SPI_Init+0x164>)
 8006192:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3d      	ldr	r2, [pc, #244]	@ (800628c <HAL_SPI_Init+0x168>)
 8006198:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a3c      	ldr	r2, [pc, #240]	@ (8006290 <HAL_SPI_Init+0x16c>)
 800619e:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3c      	ldr	r2, [pc, #240]	@ (8006294 <HAL_SPI_Init+0x170>)
 80061a4:	675a      	str	r2, [r3, #116]	@ 0x74

    if (hspi->MspInitCallback == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a39      	ldr	r2, [pc, #228]	@ (8006298 <HAL_SPI_Init+0x174>)
 80061b2:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006220:	ea42 0103 	orr.w	r1, r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	f003 0104 	and.w	r1, r3, #4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	f003 0210 	and.w	r2, r3, #16
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800625c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080062c5 	.word	0x080062c5
 8006284:	080062d9 	.word	0x080062d9
 8006288:	080062ed 	.word	0x080062ed
 800628c:	08006301 	.word	0x08006301
 8006290:	08006315 	.word	0x08006315
 8006294:	08006329 	.word	0x08006329
 8006298:	08001c1d 	.word	0x08001c1d

0800629c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e04c      	b.n	80063e8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d111      	bne.n	800637e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fa68 	bl	8007838 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1f      	ldr	r2, [pc, #124]	@ (80063f0 <HAL_TIM_Base_Init+0xb4>)
 8006374:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3304      	adds	r3, #4
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f000 ff35 	bl	8007200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	08002f45 	.word	0x08002f45

080063f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d001      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e04e      	b.n	80064aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a23      	ldr	r2, [pc, #140]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d022      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006436:	d01d      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1f      	ldr	r2, [pc, #124]	@ (80064bc <HAL_TIM_Base_Start_IT+0xc8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1e      	ldr	r2, [pc, #120]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1c      	ldr	r2, [pc, #112]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a19      	ldr	r2, [pc, #100]	@ (80064cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0x80>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d111      	bne.n	8006498 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b06      	cmp	r3, #6
 8006484:	d010      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006496:	e007      	b.n	80064a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40010400 	.word	0x40010400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40001800 	.word	0x40001800

080064d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e04c      	b.n	8006580 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d111      	bne.n	8006516 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f99c 	bl	8007838 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a1f      	ldr	r2, [pc, #124]	@ (8006588 <HAL_TIM_OC_Init+0xb4>)
 800650c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f000 fe69 	bl	8007200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	0800658d 	.word	0x0800658d

0800658c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e04c      	b.n	800664c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d111      	bne.n	80065e2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f936 	bl	8007838 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006654 <HAL_TIM_PWM_Init+0xb4>)
 80065d8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f000 fe03 	bl	8007200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	08006659 	.word	0x08006659

08006658 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_TIM_PWM_Start+0x24>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e022      	b.n	80066d6 <HAL_TIM_PWM_Start+0x6a>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b04      	cmp	r3, #4
 8006694:	d109      	bne.n	80066aa <HAL_TIM_PWM_Start+0x3e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	bf14      	ite	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	2300      	moveq	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	e015      	b.n	80066d6 <HAL_TIM_PWM_Start+0x6a>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d109      	bne.n	80066c4 <HAL_TIM_PWM_Start+0x58>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e008      	b.n	80066d6 <HAL_TIM_PWM_Start+0x6a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e07c      	b.n	80067d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_PWM_Start+0x82>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066ec:	e013      	b.n	8006716 <HAL_TIM_PWM_Start+0xaa>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d104      	bne.n	80066fe <HAL_TIM_PWM_Start+0x92>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066fc:	e00b      	b.n	8006716 <HAL_TIM_PWM_Start+0xaa>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d104      	bne.n	800670e <HAL_TIM_PWM_Start+0xa2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800670c:	e003      	b.n	8006716 <HAL_TIM_PWM_Start+0xaa>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2201      	movs	r2, #1
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f864 	bl	80077ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <HAL_TIM_PWM_Start+0x174>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_TIM_PWM_Start+0xcc>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2c      	ldr	r2, [pc, #176]	@ (80067e4 <HAL_TIM_PWM_Start+0x178>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d101      	bne.n	800673c <HAL_TIM_PWM_Start+0xd0>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <HAL_TIM_PWM_Start+0xd2>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a22      	ldr	r2, [pc, #136]	@ (80067e0 <HAL_TIM_PWM_Start+0x174>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d022      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006764:	d01d      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1f      	ldr	r2, [pc, #124]	@ (80067e8 <HAL_TIM_PWM_Start+0x17c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1d      	ldr	r2, [pc, #116]	@ (80067ec <HAL_TIM_PWM_Start+0x180>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1c      	ldr	r2, [pc, #112]	@ (80067f0 <HAL_TIM_PWM_Start+0x184>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_TIM_PWM_Start+0x178>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a18      	ldr	r2, [pc, #96]	@ (80067f4 <HAL_TIM_PWM_Start+0x188>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a16      	ldr	r2, [pc, #88]	@ (80067f8 <HAL_TIM_PWM_Start+0x18c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d111      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b06      	cmp	r3, #6
 80067b2:	d010      	beq.n	80067d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c4:	e007      	b.n	80067d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40001800 	.word	0x40001800

080067fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 ffec 	bl	80077ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <HAL_TIM_PWM_Stop+0xd8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_TIM_PWM_Stop+0x2c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2d      	ldr	r2, [pc, #180]	@ (80068d8 <HAL_TIM_PWM_Stop+0xdc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d101      	bne.n	800682c <HAL_TIM_PWM_Stop+0x30>
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_TIM_PWM_Stop+0x32>
 800682c:	2300      	movs	r3, #0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d017      	beq.n	8006862 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a1a      	ldr	r2, [r3, #32]
 8006838:	f241 1311 	movw	r3, #4369	@ 0x1111
 800683c:	4013      	ands	r3, r2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10f      	bne.n	8006862 <HAL_TIM_PWM_Stop+0x66>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	f240 4344 	movw	r3, #1092	@ 0x444
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d107      	bne.n	8006862 <HAL_TIM_PWM_Stop+0x66>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006860:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	f241 1311 	movw	r3, #4369	@ 0x1111
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <HAL_TIM_PWM_Stop+0x96>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	f240 4344 	movw	r3, #1092	@ 0x444
 800687c:	4013      	ands	r3, r2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_TIM_PWM_Stop+0x96>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Stop+0xa6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068a0:	e013      	b.n	80068ca <HAL_TIM_PWM_Stop+0xce>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_PWM_Stop+0xb6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_PWM_Stop+0xce>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Stop+0xc6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068c0:	e003      	b.n	80068ca <HAL_TIM_PWM_Stop+0xce>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40010400 	.word	0x40010400

080068dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0a2      	b.n	8006a36 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d111      	bne.n	8006920 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 ff97 	bl	8007838 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a4a      	ldr	r2, [pc, #296]	@ (8006a40 <HAL_TIM_Encoder_Init+0x164>)
 8006916:	671a      	str	r2, [r3, #112]	@ 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006936:	f023 0307 	bic.w	r3, r3, #7
 800693a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f000 fc5a 	bl	8007200 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006974:	f023 0303 	bic.w	r3, r3, #3
 8006978:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	4313      	orrs	r3, r2
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006992:	f023 030c 	bic.w	r3, r3, #12
 8006996:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800699e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	4313      	orrs	r3, r2
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	011a      	lsls	r2, r3, #4
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	031b      	lsls	r3, r3, #12
 80069c2:	4313      	orrs	r3, r2
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80069d0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80069d8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	4313      	orrs	r3, r2
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	0800309d 	.word	0x0800309d

08006a44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d110      	bne.n	8006a96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d102      	bne.n	8006a80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a7a:	7b7b      	ldrb	r3, [r7, #13]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e069      	b.n	8006b58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a94:	e031      	b.n	8006afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d110      	bne.n	8006abe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d102      	bne.n	8006aa8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aa2:	7b3b      	ldrb	r3, [r7, #12]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d001      	beq.n	8006aac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e055      	b.n	8006b58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006abc:	e01d      	b.n	8006afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d108      	bne.n	8006ad6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aca:	7b7b      	ldrb	r3, [r7, #13]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ad0:	7b3b      	ldrb	r3, [r7, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e03e      	b.n	8006b58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_TIM_Encoder_Start+0xc4>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d008      	beq.n	8006b18 <HAL_TIM_Encoder_Start+0xd4>
 8006b06:	e00f      	b.n	8006b28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fe6b 	bl	80077ec <TIM_CCxChannelCmd>
      break;
 8006b16:	e016      	b.n	8006b46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	2104      	movs	r1, #4
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fe63 	bl	80077ec <TIM_CCxChannelCmd>
      break;
 8006b26:	e00e      	b.n	8006b46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fe5b 	bl	80077ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2104      	movs	r1, #4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fe54 	bl	80077ec <TIM_CCxChannelCmd>
      break;
 8006b44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0201 	orr.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d026      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d021      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0202 	mvn.w	r2, #2
 8006b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
 8006bb4:	e009      	b.n	8006bca <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d026      	beq.n	8006c28 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d021      	beq.n	8006c28 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0204 	mvn.w	r2, #4
 8006bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
 8006c0c:	e009      	b.n	8006c22 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d026      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d021      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0208 	mvn.w	r2, #8
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2204      	movs	r2, #4
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
 8006c64:	e009      	b.n	8006c7a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d026      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d021      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0210 	mvn.w	r2, #16
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	e009      	b.n	8006cd2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0201 	mvn.w	r2, #1
 8006cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00e      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0220 	mvn.w	r2, #32
 8006d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e048      	b.n	8006e30 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d839      	bhi.n	8006e20 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006dac:	a201      	add	r2, pc, #4	@ (adr r2, 8006db4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006e21 	.word	0x08006e21
 8006dbc:	08006e21 	.word	0x08006e21
 8006dc0:	08006e21 	.word	0x08006e21
 8006dc4:	08006df7 	.word	0x08006df7
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006e21 	.word	0x08006e21
 8006ddc:	08006e21 	.word	0x08006e21
 8006de0:	08006e21 	.word	0x08006e21
 8006de4:	08006e13 	.word	0x08006e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fab2 	bl	8007358 <TIM_OC1_SetConfig>
      break;
 8006df4:	e017      	b.n	8006e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fb1b 	bl	8007438 <TIM_OC2_SetConfig>
      break;
 8006e02:	e010      	b.n	8006e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fb8a 	bl	8007524 <TIM_OC3_SetConfig>
      break;
 8006e10:	e009      	b.n	8006e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fbf7 	bl	800760c <TIM_OC4_SetConfig>
      break;
 8006e1e:	e002      	b.n	8006e26 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
      break;
 8006e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e0ae      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	f200 809f 	bhi.w	8006fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e66:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006fa5 	.word	0x08006fa5
 8006e74:	08006fa5 	.word	0x08006fa5
 8006e78:	08006fa5 	.word	0x08006fa5
 8006e7c:	08006ee1 	.word	0x08006ee1
 8006e80:	08006fa5 	.word	0x08006fa5
 8006e84:	08006fa5 	.word	0x08006fa5
 8006e88:	08006fa5 	.word	0x08006fa5
 8006e8c:	08006f23 	.word	0x08006f23
 8006e90:	08006fa5 	.word	0x08006fa5
 8006e94:	08006fa5 	.word	0x08006fa5
 8006e98:	08006fa5 	.word	0x08006fa5
 8006e9c:	08006f63 	.word	0x08006f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fa56 	bl	8007358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0208 	orr.w	r2, r2, #8
 8006eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0204 	bic.w	r2, r2, #4
 8006eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6999      	ldr	r1, [r3, #24]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	619a      	str	r2, [r3, #24]
      break;
 8006ede:	e064      	b.n	8006faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 faa6 	bl	8007438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6999      	ldr	r1, [r3, #24]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	021a      	lsls	r2, r3, #8
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	619a      	str	r2, [r3, #24]
      break;
 8006f20:	e043      	b.n	8006faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fafb 	bl	8007524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0208 	orr.w	r2, r2, #8
 8006f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0204 	bic.w	r2, r2, #4
 8006f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69d9      	ldr	r1, [r3, #28]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	61da      	str	r2, [r3, #28]
      break;
 8006f60:	e023      	b.n	8006faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fb4f 	bl	800760c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69d9      	ldr	r1, [r3, #28]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	021a      	lsls	r2, r3, #8
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	61da      	str	r2, [r3, #28]
      break;
 8006fa2:	e002      	b.n	8006faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e0b4      	b.n	8007142 <HAL_TIM_ConfigClockSource+0x186>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007010:	d03e      	beq.n	8007090 <HAL_TIM_ConfigClockSource+0xd4>
 8007012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007016:	f200 8087 	bhi.w	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	f000 8086 	beq.w	800712e <HAL_TIM_ConfigClockSource+0x172>
 8007022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007026:	d87f      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b70      	cmp	r3, #112	@ 0x70
 800702a:	d01a      	beq.n	8007062 <HAL_TIM_ConfigClockSource+0xa6>
 800702c:	2b70      	cmp	r3, #112	@ 0x70
 800702e:	d87b      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	2b60      	cmp	r3, #96	@ 0x60
 8007032:	d050      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x11a>
 8007034:	2b60      	cmp	r3, #96	@ 0x60
 8007036:	d877      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007038:	2b50      	cmp	r3, #80	@ 0x50
 800703a:	d03c      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0xfa>
 800703c:	2b50      	cmp	r3, #80	@ 0x50
 800703e:	d873      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007040:	2b40      	cmp	r3, #64	@ 0x40
 8007042:	d058      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x13a>
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d86f      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007048:	2b30      	cmp	r3, #48	@ 0x30
 800704a:	d064      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x15a>
 800704c:	2b30      	cmp	r3, #48	@ 0x30
 800704e:	d86b      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007050:	2b20      	cmp	r3, #32
 8007052:	d060      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x15a>
 8007054:	2b20      	cmp	r3, #32
 8007056:	d867      	bhi.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d05c      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x15a>
 800705c:	2b10      	cmp	r3, #16
 800705e:	d05a      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x15a>
 8007060:	e062      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007072:	f000 fb9b 	bl	80077ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	609a      	str	r2, [r3, #8]
      break;
 800708e:	e04f      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070a0:	f000 fb84 	bl	80077ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070b2:	609a      	str	r2, [r3, #8]
      break;
 80070b4:	e03c      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c2:	461a      	mov	r2, r3
 80070c4:	f000 faf8 	bl	80076b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2150      	movs	r1, #80	@ 0x50
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fb51 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 80070d4:	e02c      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e2:	461a      	mov	r2, r3
 80070e4:	f000 fb17 	bl	8007716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2160      	movs	r1, #96	@ 0x60
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fb41 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 80070f4:	e01c      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007102:	461a      	mov	r2, r3
 8007104:	f000 fad8 	bl	80076b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2140      	movs	r1, #64	@ 0x40
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fb31 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 8007114:	e00c      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4619      	mov	r1, r3
 8007120:	4610      	mov	r0, r2
 8007122:	f000 fb28 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 8007126:	e003      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
      break;
 800712c:	e000      	b.n	8007130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800712e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a46      	ldr	r2, [pc, #280]	@ (800732c <TIM_Base_SetConfig+0x12c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721e:	d00f      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a43      	ldr	r2, [pc, #268]	@ (8007330 <TIM_Base_SetConfig+0x130>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00b      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a42      	ldr	r2, [pc, #264]	@ (8007334 <TIM_Base_SetConfig+0x134>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a41      	ldr	r2, [pc, #260]	@ (8007338 <TIM_Base_SetConfig+0x138>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a40      	ldr	r2, [pc, #256]	@ (800733c <TIM_Base_SetConfig+0x13c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d108      	bne.n	8007252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a35      	ldr	r2, [pc, #212]	@ (800732c <TIM_Base_SetConfig+0x12c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d02b      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007260:	d027      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a32      	ldr	r2, [pc, #200]	@ (8007330 <TIM_Base_SetConfig+0x130>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d023      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a31      	ldr	r2, [pc, #196]	@ (8007334 <TIM_Base_SetConfig+0x134>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01f      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a30      	ldr	r2, [pc, #192]	@ (8007338 <TIM_Base_SetConfig+0x138>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01b      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2f      	ldr	r2, [pc, #188]	@ (800733c <TIM_Base_SetConfig+0x13c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d017      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2e      	ldr	r2, [pc, #184]	@ (8007340 <TIM_Base_SetConfig+0x140>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2d      	ldr	r2, [pc, #180]	@ (8007344 <TIM_Base_SetConfig+0x144>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2c      	ldr	r2, [pc, #176]	@ (8007348 <TIM_Base_SetConfig+0x148>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2b      	ldr	r2, [pc, #172]	@ (800734c <TIM_Base_SetConfig+0x14c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007350 <TIM_Base_SetConfig+0x150>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a29      	ldr	r2, [pc, #164]	@ (8007354 <TIM_Base_SetConfig+0x154>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d108      	bne.n	80072c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a10      	ldr	r2, [pc, #64]	@ (800732c <TIM_Base_SetConfig+0x12c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_Base_SetConfig+0xf8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a12      	ldr	r2, [pc, #72]	@ (800733c <TIM_Base_SetConfig+0x13c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d103      	bne.n	8007300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b01      	cmp	r3, #1
 8007310:	d105      	bne.n	800731e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f023 0201 	bic.w	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	611a      	str	r2, [r3, #16]
  }
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40010400 	.word	0x40010400
 8007340:	40014000 	.word	0x40014000
 8007344:	40014400 	.word	0x40014400
 8007348:	40014800 	.word	0x40014800
 800734c:	40001800 	.word	0x40001800
 8007350:	40001c00 	.word	0x40001c00
 8007354:	40002000 	.word	0x40002000

08007358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f023 0201 	bic.w	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f023 0302 	bic.w	r3, r3, #2
 80073a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a20      	ldr	r2, [pc, #128]	@ (8007430 <TIM_OC1_SetConfig+0xd8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC1_SetConfig+0x64>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007434 <TIM_OC1_SetConfig+0xdc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10c      	bne.n	80073d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0308 	bic.w	r3, r3, #8
 80073c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 0304 	bic.w	r3, r3, #4
 80073d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a15      	ldr	r2, [pc, #84]	@ (8007430 <TIM_OC1_SetConfig+0xd8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_OC1_SetConfig+0x8e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a14      	ldr	r2, [pc, #80]	@ (8007434 <TIM_OC1_SetConfig+0xdc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d111      	bne.n	800740a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400

08007438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f023 0210 	bic.w	r2, r3, #16
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800746e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0320 	bic.w	r3, r3, #32
 8007482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a22      	ldr	r2, [pc, #136]	@ (800751c <TIM_OC2_SetConfig+0xe4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_OC2_SetConfig+0x68>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a21      	ldr	r2, [pc, #132]	@ (8007520 <TIM_OC2_SetConfig+0xe8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10d      	bne.n	80074bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a17      	ldr	r2, [pc, #92]	@ (800751c <TIM_OC2_SetConfig+0xe4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC2_SetConfig+0x94>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <TIM_OC2_SetConfig+0xe8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d113      	bne.n	80074f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40010400 	.word	0x40010400

08007524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800756c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a21      	ldr	r2, [pc, #132]	@ (8007604 <TIM_OC3_SetConfig+0xe0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC3_SetConfig+0x66>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a20      	ldr	r2, [pc, #128]	@ (8007608 <TIM_OC3_SetConfig+0xe4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d10d      	bne.n	80075a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a16      	ldr	r2, [pc, #88]	@ (8007604 <TIM_OC3_SetConfig+0xe0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_OC3_SetConfig+0x92>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a15      	ldr	r2, [pc, #84]	@ (8007608 <TIM_OC3_SetConfig+0xe4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d113      	bne.n	80075de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	621a      	str	r2, [r3, #32]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40010000 	.word	0x40010000
 8007608:	40010400 	.word	0x40010400

0800760c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800763a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	031b      	lsls	r3, r3, #12
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a12      	ldr	r2, [pc, #72]	@ (80076b0 <TIM_OC4_SetConfig+0xa4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_OC4_SetConfig+0x68>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a11      	ldr	r2, [pc, #68]	@ (80076b4 <TIM_OC4_SetConfig+0xa8>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d109      	bne.n	8007688 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800767a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	019b      	lsls	r3, r3, #6
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	621a      	str	r2, [r3, #32]
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400

080076b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f023 0201 	bic.w	r2, r3, #1
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f023 030a 	bic.w	r3, r3, #10
 80076f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	621a      	str	r2, [r3, #32]
}
 800770a:	bf00      	nop
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007716:	b480      	push	{r7}
 8007718:	b087      	sub	sp, #28
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f023 0210 	bic.w	r2, r3, #16
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	031b      	lsls	r3, r3, #12
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	621a      	str	r2, [r3, #32]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	f043 0307 	orr.w	r3, r3, #7
 8007798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	609a      	str	r2, [r3, #8]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	021a      	lsls	r2, r3, #8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2201      	movs	r2, #1
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1a      	ldr	r2, [r3, #32]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	fa01 f303 	lsl.w	r3, r1, r3
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	621a      	str	r2, [r3, #32]
}
 800782a:	bf00      	nop
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a1c      	ldr	r2, [pc, #112]	@ (80078b4 <TIM_ResetCallback+0x7c>)
 8007844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a1b      	ldr	r2, [pc, #108]	@ (80078b8 <TIM_ResetCallback+0x80>)
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a1a      	ldr	r2, [pc, #104]	@ (80078bc <TIM_ResetCallback+0x84>)
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a19      	ldr	r2, [pc, #100]	@ (80078c0 <TIM_ResetCallback+0x88>)
 800785c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a18      	ldr	r2, [pc, #96]	@ (80078c4 <TIM_ResetCallback+0x8c>)
 8007864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a17      	ldr	r2, [pc, #92]	@ (80078c8 <TIM_ResetCallback+0x90>)
 800786c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a16      	ldr	r2, [pc, #88]	@ (80078cc <TIM_ResetCallback+0x94>)
 8007874:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a15      	ldr	r2, [pc, #84]	@ (80078d0 <TIM_ResetCallback+0x98>)
 800787c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a14      	ldr	r2, [pc, #80]	@ (80078d4 <TIM_ResetCallback+0x9c>)
 8007884:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a13      	ldr	r2, [pc, #76]	@ (80078d8 <TIM_ResetCallback+0xa0>)
 800788c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a12      	ldr	r2, [pc, #72]	@ (80078dc <TIM_ResetCallback+0xa4>)
 8007894:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a11      	ldr	r2, [pc, #68]	@ (80078e0 <TIM_ResetCallback+0xa8>)
 800789c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a10      	ldr	r2, [pc, #64]	@ (80078e4 <TIM_ResetCallback+0xac>)
 80078a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	08001b81 	.word	0x08001b81
 80078b8:	0800714b 	.word	0x0800714b
 80078bc:	080071c3 	.word	0x080071c3
 80078c0:	080071d7 	.word	0x080071d7
 80078c4:	08007173 	.word	0x08007173
 80078c8:	08007187 	.word	0x08007187
 80078cc:	0800715f 	.word	0x0800715f
 80078d0:	0800719b 	.word	0x0800719b
 80078d4:	080071af 	.word	0x080071af
 80078d8:	080071eb 	.word	0x080071eb
 80078dc:	08007a85 	.word	0x08007a85
 80078e0:	08007a99 	.word	0x08007a99
 80078e4:	08007aad 	.word	0x08007aad

080078e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e05a      	b.n	80079b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a21      	ldr	r2, [pc, #132]	@ (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d022      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794c:	d01d      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1d      	ldr	r2, [pc, #116]	@ (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d018      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1b      	ldr	r2, [pc, #108]	@ (80079cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1a      	ldr	r2, [pc, #104]	@ (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00e      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d009      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a17      	ldr	r2, [pc, #92]	@ (80079d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d10c      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4313      	orrs	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40000400 	.word	0x40000400
 80079cc:	40000800 	.word	0x40000800
 80079d0:	40000c00 	.word	0x40000c00
 80079d4:	40010400 	.word	0x40010400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40001800 	.word	0x40001800

080079e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e03d      	b.n	8007a78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e04d      	b.n	8007b6e <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d111      	bne.n	8007b02 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fd7e 	bl	80085e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a20      	ldr	r2, [pc, #128]	@ (8007b78 <HAL_UART_Init+0xb8>)
 8007af8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2224      	movs	r2, #36	@ 0x24
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f960 	bl	8008de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695a      	ldr	r2, [r3, #20]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	080035dd 	.word	0x080035dd

08007b7c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	460b      	mov	r3, r1
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e07c      	b.n	8007c9e <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d150      	bne.n	8007c52 <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8007bb0:	7afb      	ldrb	r3, [r7, #11]
 8007bb2:	2b0c      	cmp	r3, #12
 8007bb4:	d844      	bhi.n	8007c40 <HAL_UART_RegisterCallback+0xc4>
 8007bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <HAL_UART_RegisterCallback+0x40>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007bf9 	.word	0x08007bf9
 8007bc4:	08007c01 	.word	0x08007c01
 8007bc8:	08007c09 	.word	0x08007c09
 8007bcc:	08007c11 	.word	0x08007c11
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c21 	.word	0x08007c21
 8007bd8:	08007c29 	.word	0x08007c29
 8007bdc:	08007c41 	.word	0x08007c41
 8007be0:	08007c41 	.word	0x08007c41
 8007be4:	08007c41 	.word	0x08007c41
 8007be8:	08007c31 	.word	0x08007c31
 8007bec:	08007c39 	.word	0x08007c39
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8007bf6:	e051      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007bfe:	e04d      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007c06:	e049      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007c0e:	e045      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007c16:	e041      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007c1e:	e03d      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007c26:	e039      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007c2e:	e035      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007c36:	e031      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007c3e:	e02d      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
        break;
 8007c50:	e024      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d116      	bne.n	8007c8c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b0b      	cmp	r3, #11
 8007c62:	d002      	beq.n	8007c6a <HAL_UART_RegisterCallback+0xee>
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d004      	beq.n	8007c72 <HAL_UART_RegisterCallback+0xf6>
 8007c68:	e007      	b.n	8007c7a <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007c70:	e014      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007c78:	e010      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7e:	f043 0220 	orr.w	r2, r3, #32
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]
        break;
 8007c8a:	e007      	b.n	8007c9c <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop

08007cac <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d107      	bne.n	8007cd0 <HAL_UART_RegisterRxEventCallback+0x24>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc4:	f043 0220 	orr.w	r2, r3, #32
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e021      	b.n	8007d14 <HAL_UART_RegisterRxEventCallback+0x68>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_UART_RegisterRxEventCallback+0x32>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e01a      	b.n	8007d14 <HAL_UART_RegisterRxEventCallback+0x68>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (huart->gState == HAL_UART_STATE_READY)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d103      	bne.n	8007cfa <HAL_UART_RegisterRxEventCallback+0x4e>
  {
    huart->RxEventCallback = pCallback;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007cf8:	e007      	b.n	8007d0a <HAL_UART_RegisterRxEventCallback+0x5e>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	645a      	str	r2, [r3, #68]	@ 0x44

    status =  HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	@ 0x30
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d156      	bne.n	8007de8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <HAL_UART_Transmit_DMA+0x26>
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e04f      	b.n	8007dea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	88fa      	ldrh	r2, [r7, #6]
 8007d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2221      	movs	r2, #33	@ 0x21
 8007d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6e:	4a21      	ldr	r2, [pc, #132]	@ (8007df4 <HAL_UART_Transmit_DMA+0xd4>)
 8007d70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	4a20      	ldr	r2, [pc, #128]	@ (8007df8 <HAL_UART_Transmit_DMA+0xd8>)
 8007d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dfc <HAL_UART_Transmit_DMA+0xdc>)
 8007d80:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	2200      	movs	r2, #0
 8007d88:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d8a:	f107 0308 	add.w	r3, r7, #8
 8007d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	6819      	ldr	r1, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	461a      	mov	r2, r3
 8007da0:	88fb      	ldrh	r3, [r7, #6]
 8007da2:	f7fc fdf7 	bl	8004994 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3314      	adds	r3, #20
 8007db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3314      	adds	r3, #20
 8007dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6a39      	ldr	r1, [r7, #32]
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e5      	bne.n	8007db0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e000      	b.n	8007dea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3730      	adds	r7, #48	@ 0x30
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	08008659 	.word	0x08008659
 8007df8:	080086f5 	.word	0x080086f5
 8007dfc:	08008883 	.word	0x08008883

08007e00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08c      	sub	sp, #48	@ 0x30
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d14a      	bne.n	8007eb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e043      	b.n	8007eb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fd6b 	bl	8008918 <UART_Start_Receive_DMA>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007e48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d12c      	bne.n	8007eaa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d125      	bne.n	8007ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f043 0310 	orr.w	r3, r3, #16
 8007e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6a39      	ldr	r1, [r7, #32]
 8007e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007ea2:	e002      	b.n	8007eaa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007eae:	e000      	b.n	8007eb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3730      	adds	r7, #48	@ 0x30
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b09a      	sub	sp, #104	@ 0x68
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	330c      	adds	r3, #12
 8007ee0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ee2:	657a      	str	r2, [r7, #84]	@ 0x54
 8007ee4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3314      	adds	r3, #20
 8007f14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f16:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d119      	bne.n	8007f66 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f023 0310 	bic.w	r3, r3, #16
 8007f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e5      	bne.n	8007f32 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f70:	2b40      	cmp	r3, #64	@ 0x40
 8007f72:	d136      	bne.n	8007fe2 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3314      	adds	r3, #20
 8007f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3314      	adds	r3, #20
 8007f92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f94:	61ba      	str	r2, [r7, #24]
 8007f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6979      	ldr	r1, [r7, #20]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e5      	bne.n	8007f74 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d018      	beq.n	8007fe2 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fc fd41 	bl	8004a44 <HAL_DMA_Abort>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fc ff55 	bl	8004e7c <HAL_DMA_GetError>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d104      	bne.n	8007fe2 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e00a      	b.n	8007ff8 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3768      	adds	r7, #104	@ 0x68
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b0ba      	sub	sp, #232	@ 0xe8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008026:	2300      	movs	r3, #0
 8008028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800802c:	2300      	movs	r3, #0
 800802e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800803e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10f      	bne.n	8008066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_UART_IRQHandler+0x66>
 8008052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fdfd 	bl	8008c5e <UART_Receive_IT>
      return;
 8008064:	e260      	b.n	8008528 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 80e1 	beq.w	8008232 <HAL_UART_IRQHandler+0x232>
 8008070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008080:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80d4 	beq.w	8008232 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <HAL_UART_IRQHandler+0xae>
 8008096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800809a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a6:	f043 0201 	orr.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_UART_IRQHandler+0xd2>
 80080ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ca:	f043 0202 	orr.w	r2, r3, #2
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <HAL_UART_IRQHandler+0xf6>
 80080de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	f043 0204 	orr.w	r2, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d011      	beq.n	8008126 <HAL_UART_IRQHandler+0x126>
 8008102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800810e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811e:	f043 0208 	orr.w	r2, r3, #8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 81f7 	beq.w	800851e <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_UART_IRQHandler+0x14e>
 800813c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008140:	f003 0320 	and.w	r3, r3, #32
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fd88 	bl	8008c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008158:	2b40      	cmp	r3, #64	@ 0x40
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <HAL_UART_IRQHandler+0x17a>
 8008172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d051      	beq.n	800821e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fc8e 	bl	8008a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818a:	2b40      	cmp	r3, #64	@ 0x40
 800818c:	d142      	bne.n	8008214 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3314      	adds	r3, #20
 8008194:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3314      	adds	r3, #20
 80081b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1d9      	bne.n	800818e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d013      	beq.n	800820a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e6:	4a80      	ldr	r2, [pc, #512]	@ (80083e8 <HAL_UART_IRQHandler+0x3e8>)
 80081e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fc fc98 	bl	8004b24 <HAL_DMA_Abort_IT>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d019      	beq.n	800822e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008208:	e011      	b.n	800822e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008212:	e00c      	b.n	800822e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821c:	e007      	b.n	800822e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800822c:	e177      	b.n	800851e <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822e:	bf00      	nop
    return;
 8008230:	e175      	b.n	800851e <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008236:	2b01      	cmp	r3, #1
 8008238:	f040 8151 	bne.w	80084de <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800823c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008240:	f003 0310 	and.w	r3, r3, #16
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 814a 	beq.w	80084de <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800824a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 8143 	beq.w	80084de <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008258:	2300      	movs	r3, #0
 800825a:	60bb      	str	r3, [r7, #8]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60bb      	str	r3, [r7, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60bb      	str	r3, [r7, #8]
 800826c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	f040 80b7 	bne.w	80083ec <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800828a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8147 	beq.w	8008522 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008298:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800829c:	429a      	cmp	r2, r3
 800829e:	f080 8140 	bcs.w	8008522 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b4:	f000 8088 	beq.w	80083c8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	330c      	adds	r3, #12
 80082e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80082e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80082e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082f4:	e841 2300 	strex	r3, r2, [r1]
 80082f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1d9      	bne.n	80082b8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3314      	adds	r3, #20
 8008324:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008328:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800832c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008330:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800833a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e1      	bne.n	8008304 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3314      	adds	r3, #20
 8008346:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008364:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008366:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800836a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e3      	bne.n	8008340 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	330c      	adds	r3, #12
 800838c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008398:	f023 0310 	bic.w	r3, r3, #16
 800839c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80083aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e3      	bne.n	8008386 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fc fb3e 	bl	8004a44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80083da:	b292      	uxth	r2, r2
 80083dc:	1a8a      	subs	r2, r1, r2
 80083de:	b292      	uxth	r2, r2
 80083e0:	4611      	mov	r1, r2
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083e6:	e09c      	b.n	8008522 <HAL_UART_IRQHandler+0x522>
 80083e8:	08008b63 	.word	0x08008b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 808f 	beq.w	8008526 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8008408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 808a 	beq.w	8008526 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008436:	647a      	str	r2, [r7, #68]	@ 0x44
 8008438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800843c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e3      	bne.n	8008412 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3314      	adds	r3, #20
 8008450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	623b      	str	r3, [r7, #32]
   return(result);
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3314      	adds	r3, #20
 800846a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800846e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800847c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e3      	bne.n	800844a <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	330c      	adds	r3, #12
 8008496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	60fb      	str	r3, [r7, #12]
   return(result);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0310 	bic.w	r3, r3, #16
 80084a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80084b4:	61fa      	str	r2, [r7, #28]
 80084b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	69b9      	ldr	r1, [r7, #24]
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	617b      	str	r3, [r7, #20]
   return(result);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e3      	bne.n	8008490 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80084d6:	4611      	mov	r1, r2
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084dc:	e023      	b.n	8008526 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <HAL_UART_IRQHandler+0x4fe>
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb48 	bl	8008b8c <UART_Transmit_IT>
    return;
 80084fc:	e014      	b.n	8008528 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <HAL_UART_IRQHandler+0x528>
 800850a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800850e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fb88 	bl	8008c2c <UART_EndTransmit_IT>
    return;
 800851c:	e004      	b.n	8008528 <HAL_UART_IRQHandler+0x528>
    return;
 800851e:	bf00      	nop
 8008520:	e002      	b.n	8008528 <HAL_UART_IRQHandler+0x528>
      return;
 8008522:	bf00      	nop
 8008524:	e000      	b.n	8008528 <HAL_UART_IRQHandler+0x528>
      return;
 8008526:	bf00      	nop
  }
}
 8008528:	37e8      	adds	r7, #232	@ 0xe8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop

08008530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a10      	ldr	r2, [pc, #64]	@ (8008634 <UART_InitCallbacksToDefault+0x4c>)
 80085f4:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a0f      	ldr	r2, [pc, #60]	@ (8008638 <UART_InitCallbacksToDefault+0x50>)
 80085fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a0f      	ldr	r2, [pc, #60]	@ (800863c <UART_InitCallbacksToDefault+0x54>)
 8008600:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a0e      	ldr	r2, [pc, #56]	@ (8008640 <UART_InitCallbacksToDefault+0x58>)
 8008606:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a0e      	ldr	r2, [pc, #56]	@ (8008644 <UART_InitCallbacksToDefault+0x5c>)
 800860c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a0d      	ldr	r2, [pc, #52]	@ (8008648 <UART_InitCallbacksToDefault+0x60>)
 8008612:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a0d      	ldr	r2, [pc, #52]	@ (800864c <UART_InitCallbacksToDefault+0x64>)
 8008618:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a0c      	ldr	r2, [pc, #48]	@ (8008650 <UART_InitCallbacksToDefault+0x68>)
 800861e:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a0c      	ldr	r2, [pc, #48]	@ (8008654 <UART_InitCallbacksToDefault+0x6c>)
 8008624:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	08008545 	.word	0x08008545
 8008638:	08008531 	.word	0x08008531
 800863c:	0800856d 	.word	0x0800856d
 8008640:	08008559 	.word	0x08008559
 8008644:	08008581 	.word	0x08008581
 8008648:	08008595 	.word	0x08008595
 800864c:	080085a9 	.word	0x080085a9
 8008650:	080085bd 	.word	0x080085bd
 8008654:	080085d1 	.word	0x080085d1

08008658 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b090      	sub	sp, #64	@ 0x40
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d137      	bne.n	80086e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008676:	2200      	movs	r2, #0
 8008678:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800867a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3314      	adds	r3, #20
 8008680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	623b      	str	r3, [r7, #32]
   return(result);
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008690:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3314      	adds	r3, #20
 8008698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800869a:	633a      	str	r2, [r7, #48]	@ 0x30
 800869c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e5      	bne.n	800867a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	330c      	adds	r3, #12
 80086b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	330c      	adds	r3, #12
 80086cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ce:	61fa      	str	r2, [r7, #28]
 80086d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	69b9      	ldr	r1, [r7, #24]
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	617b      	str	r3, [r7, #20]
   return(result);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086e2:	e003      	b.n	80086ec <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 80086e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80086ea:	4798      	blx	r3
}
 80086ec:	bf00      	nop
 80086ee:	3740      	adds	r7, #64	@ 0x40
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b09c      	sub	sp, #112	@ 0x70
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872a:	2b00      	cmp	r3, #0
 800872c:	d172      	bne.n	8008814 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800872e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008730:	2200      	movs	r2, #0
 8008732:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800874a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800874c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008754:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008756:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800875a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3314      	adds	r3, #20
 8008786:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008788:	647a      	str	r2, [r7, #68]	@ 0x44
 800878a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800878e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800879c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3314      	adds	r3, #20
 80087a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	623b      	str	r3, [r7, #32]
   return(result);
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80087b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3314      	adds	r3, #20
 80087ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80087be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e5      	bne.n	800879c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d119      	bne.n	8008814 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0310 	bic.w	r3, r3, #16
 80087f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	330c      	adds	r3, #12
 80087fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008800:	61fa      	str	r2, [r7, #28]
 8008802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	69b9      	ldr	r1, [r7, #24]
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	617b      	str	r3, [r7, #20]
   return(result);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e5      	bne.n	80087e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008816:	2200      	movs	r2, #0
 8008818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800881c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881e:	2b01      	cmp	r3, #1
 8008820:	d107      	bne.n	8008832 <UART_DMAReceiveCplt+0x120>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008826:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008828:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800882a:	4611      	mov	r1, r2
 800882c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800882e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008830:	e003      	b.n	800883a <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8008832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008836:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008838:	4798      	blx	r3
}
 800883a:	bf00      	nop
 800883c:	3770      	adds	r7, #112	@ 0x70
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800885a:	2b01      	cmp	r3, #1
 800885c:	d109      	bne.n	8008872 <UART_DMARxHalfCplt+0x30>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8008866:	0852      	lsrs	r2, r2, #1
 8008868:	b292      	uxth	r2, r2
 800886a:	4611      	mov	r1, r2
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008870:	e003      	b.n	800887a <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	4798      	blx	r3
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800888a:	2300      	movs	r3, #0
 800888c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800889e:	2b80      	cmp	r3, #128	@ 0x80
 80088a0:	bf0c      	ite	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	2300      	movne	r3, #0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b21      	cmp	r3, #33	@ 0x21
 80088b4:	d108      	bne.n	80088c8 <UART_DMAError+0x46>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80088c2:	68b8      	ldr	r0, [r7, #8]
 80088c4:	f000 f8c2 	bl	8008a4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d2:	2b40      	cmp	r3, #64	@ 0x40
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b22      	cmp	r3, #34	@ 0x22
 80088e8:	d108      	bne.n	80088fc <UART_DMAError+0x7a>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80088f6:	68b8      	ldr	r0, [r7, #8]
 80088f8:	f000 f8d0 	bl	8008a9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008900:	f043 0210 	orr.w	r2, r3, #16
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800890c:	68b8      	ldr	r0, [r7, #8]
 800890e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b098      	sub	sp, #96	@ 0x60
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	88fa      	ldrh	r2, [r7, #6]
 8008930:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2222      	movs	r2, #34	@ 0x22
 800893c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008944:	4a3e      	ldr	r2, [pc, #248]	@ (8008a40 <UART_Start_Receive_DMA+0x128>)
 8008946:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894c:	4a3d      	ldr	r2, [pc, #244]	@ (8008a44 <UART_Start_Receive_DMA+0x12c>)
 800894e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008954:	4a3c      	ldr	r2, [pc, #240]	@ (8008a48 <UART_Start_Receive_DMA+0x130>)
 8008956:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800895c:	2200      	movs	r2, #0
 800895e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008960:	f107 0308 	add.w	r3, r7, #8
 8008964:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3304      	adds	r3, #4
 8008970:	4619      	mov	r1, r3
 8008972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	88fb      	ldrh	r3, [r7, #6]
 8008978:	f7fc f80c 	bl	8004994 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800897c:	2300      	movs	r3, #0
 800897e:	613b      	str	r3, [r7, #16]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d019      	beq.n	80089ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	330c      	adds	r3, #12
 80089a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a4:	e853 3f00 	ldrex	r3, [r3]
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80089bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80089c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80089c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e5      	bne.n	800899a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3314      	adds	r3, #20
 80089d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	f043 0301 	orr.w	r3, r3, #1
 80089e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3314      	adds	r3, #20
 80089ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80089ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80089f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e5      	bne.n	80089ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3314      	adds	r3, #20
 8008a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	617b      	str	r3, [r7, #20]
   return(result);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3314      	adds	r3, #20
 8008a20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a22:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	6a39      	ldr	r1, [r7, #32]
 8008a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e5      	bne.n	8008a02 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3760      	adds	r7, #96	@ 0x60
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	08008713 	.word	0x08008713
 8008a44:	08008843 	.word	0x08008843
 8008a48:	08008883 	.word	0x08008883

08008a4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b089      	sub	sp, #36	@ 0x24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	330c      	adds	r3, #12
 8008a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	330c      	adds	r3, #12
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	61ba      	str	r2, [r7, #24]
 8008a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6979      	ldr	r1, [r7, #20]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	613b      	str	r3, [r7, #16]
   return(result);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e5      	bne.n	8008a54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008a90:	bf00      	nop
 8008a92:	3724      	adds	r7, #36	@ 0x24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b095      	sub	sp, #84	@ 0x54
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ac4:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e5      	bne.n	8008aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3314      	adds	r3, #20
 8008ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	f023 0301 	bic.w	r3, r3, #1
 8008aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3314      	adds	r3, #20
 8008af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e5      	bne.n	8008ad8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d119      	bne.n	8008b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b34:	61ba      	str	r2, [r7, #24]
 8008b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6979      	ldr	r1, [r7, #20]
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	613b      	str	r3, [r7, #16]
   return(result);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e5      	bne.n	8008b14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b56:	bf00      	nop
 8008b58:	3754      	adds	r7, #84	@ 0x54
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b84:	bf00      	nop
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b21      	cmp	r3, #33	@ 0x21
 8008b9e:	d13e      	bne.n	8008c1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba8:	d114      	bne.n	8008bd4 <UART_Transmit_IT+0x48>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d110      	bne.n	8008bd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	621a      	str	r2, [r3, #32]
 8008bd2:	e008      	b.n	8008be6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	1c59      	adds	r1, r3, #1
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6211      	str	r1, [r2, #32]
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10f      	bne.n	8008c1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e000      	b.n	8008c20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c1e:	2302      	movs	r3, #2
  }
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b08c      	sub	sp, #48	@ 0x30
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b22      	cmp	r3, #34	@ 0x22
 8008c70:	f040 80b0 	bne.w	8008dd4 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c7c:	d117      	bne.n	8008cae <UART_Receive_IT+0x50>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d113      	bne.n	8008cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca6:	1c9a      	adds	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	629a      	str	r2, [r3, #40]	@ 0x28
 8008cac:	e026      	b.n	8008cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc0:	d007      	beq.n	8008cd2 <UART_Receive_IT+0x74>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <UART_Receive_IT+0x82>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	e008      	b.n	8008cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d15f      	bne.n	8008dd0 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0220 	bic.w	r2, r2, #32
 8008d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0201 	bic.w	r2, r2, #1
 8008d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d136      	bne.n	8008dc4 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	330c      	adds	r3, #12
 8008d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f023 0310 	bic.w	r3, r3, #16
 8008d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d7c:	623a      	str	r2, [r7, #32]
 8008d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e5      	bne.n	8008d5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0310 	and.w	r3, r3, #16
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d10a      	bne.n	8008db4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
 8008dc2:	e003      	b.n	8008dcc <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e002      	b.n	8008dd6 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e000      	b.n	8008dd6 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8008dd4:	2302      	movs	r3, #2
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3730      	adds	r7, #48	@ 0x30
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008de4:	b0c0      	sub	sp, #256	@ 0x100
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfc:	68d9      	ldr	r1, [r3, #12]
 8008dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	ea40 0301 	orr.w	r3, r0, r1
 8008e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e38:	f021 010c 	bic.w	r1, r1, #12
 8008e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e46:	430b      	orrs	r3, r1
 8008e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5a:	6999      	ldr	r1, [r3, #24]
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	ea40 0301 	orr.w	r3, r0, r1
 8008e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80090ac <UART_SetConfig+0x2cc>)
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d005      	beq.n	8008e80 <UART_SetConfig+0xa0>
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80090b0 <UART_SetConfig+0x2d0>)
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d104      	bne.n	8008e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e80:	f7fd f8ee 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8008e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e88:	e003      	b.n	8008e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e8a:	f7fd f8d5 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8008e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e9c:	f040 810c 	bne.w	80090b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	1891      	adds	r1, r2, r2
 8008eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008eba:	415b      	adcs	r3, r3
 8008ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	eb12 0801 	adds.w	r8, r2, r1
 8008ec8:	4629      	mov	r1, r5
 8008eca:	eb43 0901 	adc.w	r9, r3, r1
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ee2:	4690      	mov	r8, r2
 8008ee4:	4699      	mov	r9, r3
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	eb18 0303 	adds.w	r3, r8, r3
 8008eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	eb49 0303 	adc.w	r3, r9, r3
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f0e:	460b      	mov	r3, r1
 8008f10:	18db      	adds	r3, r3, r3
 8008f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f14:	4613      	mov	r3, r2
 8008f16:	eb42 0303 	adc.w	r3, r2, r3
 8008f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f24:	f7f7 fe22 	bl	8000b6c <__aeabi_uldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4b61      	ldr	r3, [pc, #388]	@ (80090b4 <UART_SetConfig+0x2d4>)
 8008f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	011c      	lsls	r4, r3, #4
 8008f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	1891      	adds	r1, r2, r2
 8008f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f50:	415b      	adcs	r3, r3
 8008f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f58:	4641      	mov	r1, r8
 8008f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f5e:	4649      	mov	r1, r9
 8008f60:	eb43 0b01 	adc.w	fp, r3, r1
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f78:	4692      	mov	sl, r2
 8008f7a:	469b      	mov	fp, r3
 8008f7c:	4643      	mov	r3, r8
 8008f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f86:	464b      	mov	r3, r9
 8008f88:	eb4b 0303 	adc.w	r3, fp, r3
 8008f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	18db      	adds	r3, r3, r3
 8008fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008faa:	4613      	mov	r3, r2
 8008fac:	eb42 0303 	adc.w	r3, r2, r3
 8008fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008fba:	f7f7 fdd7 	bl	8000b6c <__aeabi_uldivmod>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80090b4 <UART_SetConfig+0x2d4>)
 8008fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2264      	movs	r2, #100	@ 0x64
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	1acb      	subs	r3, r1, r3
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008fda:	4b36      	ldr	r3, [pc, #216]	@ (80090b4 <UART_SetConfig+0x2d4>)
 8008fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008fe8:	441c      	add	r4, r3
 8008fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	1891      	adds	r1, r2, r2
 8009002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009004:	415b      	adcs	r3, r3
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800900c:	4641      	mov	r1, r8
 800900e:	1851      	adds	r1, r2, r1
 8009010:	6339      	str	r1, [r7, #48]	@ 0x30
 8009012:	4649      	mov	r1, r9
 8009014:	414b      	adcs	r3, r1
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009024:	4659      	mov	r1, fp
 8009026:	00cb      	lsls	r3, r1, #3
 8009028:	4651      	mov	r1, sl
 800902a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800902e:	4651      	mov	r1, sl
 8009030:	00ca      	lsls	r2, r1, #3
 8009032:	4610      	mov	r0, r2
 8009034:	4619      	mov	r1, r3
 8009036:	4603      	mov	r3, r0
 8009038:	4642      	mov	r2, r8
 800903a:	189b      	adds	r3, r3, r2
 800903c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009040:	464b      	mov	r3, r9
 8009042:	460a      	mov	r2, r1
 8009044:	eb42 0303 	adc.w	r3, r2, r3
 8009048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800905c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009060:	460b      	mov	r3, r1
 8009062:	18db      	adds	r3, r3, r3
 8009064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009066:	4613      	mov	r3, r2
 8009068:	eb42 0303 	adc.w	r3, r2, r3
 800906c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800906e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009076:	f7f7 fd79 	bl	8000b6c <__aeabi_uldivmod>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4b0d      	ldr	r3, [pc, #52]	@ (80090b4 <UART_SetConfig+0x2d4>)
 8009080:	fba3 1302 	umull	r1, r3, r3, r2
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	2164      	movs	r1, #100	@ 0x64
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	3332      	adds	r3, #50	@ 0x32
 8009092:	4a08      	ldr	r2, [pc, #32]	@ (80090b4 <UART_SetConfig+0x2d4>)
 8009094:	fba2 2303 	umull	r2, r3, r2, r3
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	f003 0207 	and.w	r2, r3, #7
 800909e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4422      	add	r2, r4
 80090a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090a8:	e106      	b.n	80092b8 <UART_SetConfig+0x4d8>
 80090aa:	bf00      	nop
 80090ac:	40011000 	.word	0x40011000
 80090b0:	40011400 	.word	0x40011400
 80090b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80090c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80090ca:	4642      	mov	r2, r8
 80090cc:	464b      	mov	r3, r9
 80090ce:	1891      	adds	r1, r2, r2
 80090d0:	6239      	str	r1, [r7, #32]
 80090d2:	415b      	adcs	r3, r3
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090da:	4641      	mov	r1, r8
 80090dc:	1854      	adds	r4, r2, r1
 80090de:	4649      	mov	r1, r9
 80090e0:	eb43 0501 	adc.w	r5, r3, r1
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	00eb      	lsls	r3, r5, #3
 80090ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090f2:	00e2      	lsls	r2, r4, #3
 80090f4:	4614      	mov	r4, r2
 80090f6:	461d      	mov	r5, r3
 80090f8:	4643      	mov	r3, r8
 80090fa:	18e3      	adds	r3, r4, r3
 80090fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009100:	464b      	mov	r3, r9
 8009102:	eb45 0303 	adc.w	r3, r5, r3
 8009106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800910a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	f04f 0300 	mov.w	r3, #0
 8009122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009126:	4629      	mov	r1, r5
 8009128:	008b      	lsls	r3, r1, #2
 800912a:	4621      	mov	r1, r4
 800912c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009130:	4621      	mov	r1, r4
 8009132:	008a      	lsls	r2, r1, #2
 8009134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009138:	f7f7 fd18 	bl	8000b6c <__aeabi_uldivmod>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4b60      	ldr	r3, [pc, #384]	@ (80092c4 <UART_SetConfig+0x4e4>)
 8009142:	fba3 2302 	umull	r2, r3, r3, r2
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	011c      	lsls	r4, r3, #4
 800914a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800914e:	2200      	movs	r2, #0
 8009150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800915c:	4642      	mov	r2, r8
 800915e:	464b      	mov	r3, r9
 8009160:	1891      	adds	r1, r2, r2
 8009162:	61b9      	str	r1, [r7, #24]
 8009164:	415b      	adcs	r3, r3
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800916c:	4641      	mov	r1, r8
 800916e:	1851      	adds	r1, r2, r1
 8009170:	6139      	str	r1, [r7, #16]
 8009172:	4649      	mov	r1, r9
 8009174:	414b      	adcs	r3, r1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009184:	4659      	mov	r1, fp
 8009186:	00cb      	lsls	r3, r1, #3
 8009188:	4651      	mov	r1, sl
 800918a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800918e:	4651      	mov	r1, sl
 8009190:	00ca      	lsls	r2, r1, #3
 8009192:	4610      	mov	r0, r2
 8009194:	4619      	mov	r1, r3
 8009196:	4603      	mov	r3, r0
 8009198:	4642      	mov	r2, r8
 800919a:	189b      	adds	r3, r3, r2
 800919c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091a0:	464b      	mov	r3, r9
 80091a2:	460a      	mov	r2, r1
 80091a4:	eb42 0303 	adc.w	r3, r2, r3
 80091a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091b8:	f04f 0200 	mov.w	r2, #0
 80091bc:	f04f 0300 	mov.w	r3, #0
 80091c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80091c4:	4649      	mov	r1, r9
 80091c6:	008b      	lsls	r3, r1, #2
 80091c8:	4641      	mov	r1, r8
 80091ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ce:	4641      	mov	r1, r8
 80091d0:	008a      	lsls	r2, r1, #2
 80091d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091d6:	f7f7 fcc9 	bl	8000b6c <__aeabi_uldivmod>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4611      	mov	r1, r2
 80091e0:	4b38      	ldr	r3, [pc, #224]	@ (80092c4 <UART_SetConfig+0x4e4>)
 80091e2:	fba3 2301 	umull	r2, r3, r3, r1
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	2264      	movs	r2, #100	@ 0x64
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
 80091ee:	1acb      	subs	r3, r1, r3
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	3332      	adds	r3, #50	@ 0x32
 80091f4:	4a33      	ldr	r2, [pc, #204]	@ (80092c4 <UART_SetConfig+0x4e4>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009200:	441c      	add	r4, r3
 8009202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009206:	2200      	movs	r2, #0
 8009208:	673b      	str	r3, [r7, #112]	@ 0x70
 800920a:	677a      	str	r2, [r7, #116]	@ 0x74
 800920c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	1891      	adds	r1, r2, r2
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	415b      	adcs	r3, r3
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009220:	4641      	mov	r1, r8
 8009222:	1851      	adds	r1, r2, r1
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	4649      	mov	r1, r9
 8009228:	414b      	adcs	r3, r1
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009238:	4659      	mov	r1, fp
 800923a:	00cb      	lsls	r3, r1, #3
 800923c:	4651      	mov	r1, sl
 800923e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009242:	4651      	mov	r1, sl
 8009244:	00ca      	lsls	r2, r1, #3
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	4603      	mov	r3, r0
 800924c:	4642      	mov	r2, r8
 800924e:	189b      	adds	r3, r3, r2
 8009250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009252:	464b      	mov	r3, r9
 8009254:	460a      	mov	r2, r1
 8009256:	eb42 0303 	adc.w	r3, r2, r3
 800925a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800925c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	663b      	str	r3, [r7, #96]	@ 0x60
 8009266:	667a      	str	r2, [r7, #100]	@ 0x64
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009274:	4649      	mov	r1, r9
 8009276:	008b      	lsls	r3, r1, #2
 8009278:	4641      	mov	r1, r8
 800927a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800927e:	4641      	mov	r1, r8
 8009280:	008a      	lsls	r2, r1, #2
 8009282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009286:	f7f7 fc71 	bl	8000b6c <__aeabi_uldivmod>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4b0d      	ldr	r3, [pc, #52]	@ (80092c4 <UART_SetConfig+0x4e4>)
 8009290:	fba3 1302 	umull	r1, r3, r3, r2
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	2164      	movs	r1, #100	@ 0x64
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	3332      	adds	r3, #50	@ 0x32
 80092a2:	4a08      	ldr	r2, [pc, #32]	@ (80092c4 <UART_SetConfig+0x4e4>)
 80092a4:	fba2 2303 	umull	r2, r3, r2, r3
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4422      	add	r2, r4
 80092b6:	609a      	str	r2, [r3, #8]
}
 80092b8:	bf00      	nop
 80092ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092be:	46bd      	mov	sp, r7
 80092c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092c4:	51eb851f 	.word	0x51eb851f

080092c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c8:	b084      	sub	sp, #16
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	f107 001c 	add.w	r0, r7, #28
 80092d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d123      	bne.n	800932a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80092f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800930a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800930e:	2b01      	cmp	r3, #1
 8009310:	d105      	bne.n	800931e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f901 	bl	8009526 <USB_CoreReset>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	e01b      	b.n	8009362 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f8f5 	bl	8009526 <USB_CoreReset>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009340:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	639a      	str	r2, [r3, #56]	@ 0x38
 8009354:	e005      	b.n	8009362 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009362:	7fbb      	ldrb	r3, [r7, #30]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d10b      	bne.n	8009380 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f043 0206 	orr.w	r2, r3, #6
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f043 0220 	orr.w	r2, r3, #32
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800938c:	b004      	add	sp, #16
 800938e:	4770      	bx	lr

08009390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f023 0201 	bic.w	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d115      	bne.n	8009400 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093e0:	200a      	movs	r0, #10
 80093e2:	f7fa fc23 	bl	8003c2c <HAL_Delay>
      ms += 10U;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	330a      	adds	r3, #10
 80093ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f88c 	bl	800950a <USB_GetMode>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d01e      	beq.n	8009436 <USB_SetCurrentMode+0x84>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80093fc:	d9f0      	bls.n	80093e0 <USB_SetCurrentMode+0x2e>
 80093fe:	e01a      	b.n	8009436 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d115      	bne.n	8009432 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009412:	200a      	movs	r0, #10
 8009414:	f7fa fc0a 	bl	8003c2c <HAL_Delay>
      ms += 10U;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	330a      	adds	r3, #10
 800941c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f873 	bl	800950a <USB_GetMode>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <USB_SetCurrentMode+0x84>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2bc7      	cmp	r3, #199	@ 0xc7
 800942e:	d9f0      	bls.n	8009412 <USB_SetCurrentMode+0x60>
 8009430:	e001      	b.n	8009436 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e005      	b.n	8009442 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2bc8      	cmp	r3, #200	@ 0xc8
 800943a:	d101      	bne.n	8009440 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009464:	d901      	bls.n	800946a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e01b      	b.n	80094a2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	daf2      	bge.n	8009458 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	019b      	lsls	r3, r3, #6
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800948e:	d901      	bls.n	8009494 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e006      	b.n	80094a2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b20      	cmp	r3, #32
 800949e:	d0f0      	beq.n	8009482 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3301      	adds	r3, #1
 80094be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094c6:	d901      	bls.n	80094cc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e018      	b.n	80094fe <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	daf2      	bge.n	80094ba <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2210      	movs	r2, #16
 80094dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094ea:	d901      	bls.n	80094f0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e006      	b.n	80094fe <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	f003 0310 	and.w	r3, r3, #16
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	d0f0      	beq.n	80094de <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	f003 0301 	and.w	r3, r3, #1
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800953e:	d901      	bls.n	8009544 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e01b      	b.n	800957c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	daf2      	bge.n	8009532 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	f043 0201 	orr.w	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3301      	adds	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009568:	d901      	bls.n	800956e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e006      	b.n	800957c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b01      	cmp	r3, #1
 8009578:	d0f0      	beq.n	800955c <USB_CoreReset+0x36>

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009588:	b084      	sub	sp, #16
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095a8:	461a      	mov	r2, r3
 80095aa:	2300      	movs	r3, #0
 80095ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d119      	bne.n	8009612 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80095de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d10a      	bne.n	80095fc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095f4:	f043 0304 	orr.w	r3, r3, #4
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	e014      	b.n	8009626 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800960a:	f023 0304 	bic.w	r3, r3, #4
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	e009      	b.n	8009626 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009620:	f023 0304 	bic.w	r3, r3, #4
 8009624:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009626:	2110      	movs	r1, #16
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff ff0e 	bl	800944a <USB_FlushTxFifo>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff ff38 	bl	80094ae <USB_FlushRxFifo>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009648:	2300      	movs	r3, #0
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	e015      	b.n	800967a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4413      	add	r3, r2
 8009656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800965a:	461a      	mov	r2, r3
 800965c:	f04f 33ff 	mov.w	r3, #4294967295
 8009660:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800966e:	461a      	mov	r2, r3
 8009670:	2300      	movs	r3, #0
 8009672:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	3301      	adds	r3, #1
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800967e:	461a      	mov	r2, r3
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	4293      	cmp	r3, r2
 8009684:	d3e3      	bcc.n	800964e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a18      	ldr	r2, [pc, #96]	@ (80096f8 <USB_HostInit+0x170>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d10b      	bne.n	80096b4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096a2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a15      	ldr	r2, [pc, #84]	@ (80096fc <USB_HostInit+0x174>)
 80096a8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a14      	ldr	r2, [pc, #80]	@ (8009700 <USB_HostInit+0x178>)
 80096ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80096b2:	e009      	b.n	80096c8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2280      	movs	r2, #128	@ 0x80
 80096b8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a11      	ldr	r2, [pc, #68]	@ (8009704 <USB_HostInit+0x17c>)
 80096be:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a11      	ldr	r2, [pc, #68]	@ (8009708 <USB_HostInit+0x180>)
 80096c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d105      	bne.n	80096dc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f043 0210 	orr.w	r2, r3, #16
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <USB_HostInit+0x184>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f4:	b004      	add	sp, #16
 80096f6:	4770      	bx	lr
 80096f8:	40040000 	.word	0x40040000
 80096fc:	01000200 	.word	0x01000200
 8009700:	00e00300 	.word	0x00e00300
 8009704:	00600080 	.word	0x00600080
 8009708:	004000e0 	.word	0x004000e0
 800970c:	a3200008 	.word	0xa3200008

08009710 <linear_speed_to_rps>:


#define PI 3.141592654f

static inline float linear_speed_to_rps(AckermannChassisTypeDef *self,  float speed)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	ed87 0a00 	vstr	s0, [r7]
    return speed / (PI * self->wheel_diameter);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	edd3 7a07 	vldr	s15, [r3, #28]
 8009722:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009744 <linear_speed_to_rps+0x34>
 8009726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800972a:	ed97 7a00 	vldr	s14, [r7]
 800972e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009732:	eef0 7a66 	vmov.f32	s15, s13
}
 8009736:	eeb0 0a67 	vmov.f32	s0, s15
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	40490fdb 	.word	0x40490fdb

08009748 <ackermann_velocity_difference>:
/*vx mm/s
  angule_rate rad/s
*/


float ackermann_velocity_difference(AckermannChassisTypeDef *self,int size,float v1){
 8009748:	b5b0      	push	{r4, r5, r7, lr}
 800974a:	b08a      	sub	sp, #40	@ 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	ed87 0a01 	vstr	s0, [r7, #4]
	int angle = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
	if (size > 500){angle = (size-500)/(1000/240);}
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009760:	dd08      	ble.n	8009774 <ackermann_velocity_difference+0x2c>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8009768:	2b00      	cmp	r3, #0
 800976a:	da00      	bge.n	800976e <ackermann_velocity_difference+0x26>
 800976c:	3303      	adds	r3, #3
 800976e:	109b      	asrs	r3, r3, #2
 8009770:	627b      	str	r3, [r7, #36]	@ 0x24
 8009772:	e00f      	b.n	8009794 <ackermann_velocity_difference+0x4c>
	else if(size == 500){float v2=v1;return v2;}
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800977a:	d103      	bne.n	8009784 <ackermann_velocity_difference+0x3c>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	623b      	str	r3, [r7, #32]
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	e065      	b.n	8009850 <ackermann_velocity_difference+0x108>
	else {angle = (500-size)/(1000/240);}
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800978a:	2b00      	cmp	r3, #0
 800978c:	da00      	bge.n	8009790 <ackermann_velocity_difference+0x48>
 800978e:	3303      	adds	r3, #3
 8009790:	109b      	asrs	r3, r3, #2
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
	
	double t = tan((angle*PI)/180);
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800979e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8009860 <ackermann_velocity_difference+0x118>
 80097a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097a6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009864 <ackermann_velocity_difference+0x11c>
 80097aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097ae:	ee16 0a90 	vmov	r0, s13
 80097b2:	f7f6 fe71 	bl	8000498 <__aeabi_f2d>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	ec43 2b10 	vmov	d0, r2, r3
 80097be:	f007 fe4b 	bl	8011458 <tan>
 80097c2:	ed87 0b06 	vstr	d0, [r7, #24]
	float v_t = ((AckermannChassisTypeDef*)self)->shaft_length / t + (((AckermannChassisTypeDef*)self)->wheel_diameter/2);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f6 fe64 	bl	8000498 <__aeabi_f2d>
 80097d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097d4:	f7f6 ffe2 	bl	800079c <__aeabi_ddiv>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	461d      	mov	r5, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80097e6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80097ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097ee:	ee16 0a90 	vmov	r0, s13
 80097f2:	f7f6 fe51 	bl	8000498 <__aeabi_f2d>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 fced 	bl	80001dc <__adddf3>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f7f7 f95f 	bl	8000acc <__aeabi_d2f>
 800980e:	4603      	mov	r3, r0
 8009810:	617b      	str	r3, [r7, #20]
	float v2 = v1*((v_t+(((AckermannChassisTypeDef*)self)->wheel_diameter/2))/(v_t-(((AckermannChassisTypeDef*)self)->wheel_diameter/2)));
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	edd3 7a07 	vldr	s15, [r3, #28]
 8009818:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800981c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009820:	edd7 7a05 	vldr	s15, [r7, #20]
 8009824:	ee77 6a27 	vadd.f32	s13, s14, s15
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	ed93 7a07 	vldr	s14, [r3, #28]
 800982e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009832:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8009836:	ed97 7a05 	vldr	s14, [r7, #20]
 800983a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800983e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009842:	ed97 7a01 	vldr	s14, [r7, #4]
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a04 	vstr	s15, [r7, #16]
	
	return v2;
 800984e:	693b      	ldr	r3, [r7, #16]
}
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eeb0 0a67 	vmov.f32	s0, s15
 8009858:	3728      	adds	r7, #40	@ 0x28
 800985a:	46bd      	mov	sp, r7
 800985c:	bdb0      	pop	{r4, r5, r7, pc}
 800985e:	bf00      	nop
 8009860:	40490fdb 	.word	0x40490fdb
 8009864:	43340000 	.word	0x43340000

08009868 <ackermann_chassis_move>:

void ackermann_chassis_move(AckermannChassisTypeDef *self, float vx, float r )
{   
 8009868:	b580      	push	{r7, lr}
 800986a:	b08a      	sub	sp, #40	@ 0x28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	ed87 0a02 	vstr	s0, [r7, #8]
 8009874:	edc7 0a01 	vstr	s1, [r7, #4]
	  int servos = 500;
 8009878:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24
	  float rps_r ;
	  bool swerve = true;
 800987e:	2301      	movs	r3, #1
 8009880:	77fb      	strb	r3, [r7, #31]
	  float steering_ratio; 
	  float rps_l = linear_speed_to_rps(self, vx);
 8009882:	ed97 0a02 	vldr	s0, [r7, #8]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff ff42 	bl	8009710 <linear_speed_to_rps>
 800988c:	ed87 0a05 	vstr	s0, [r7, #20]
	  if(r == 0){steering_ratio = 0;}else{steering_ratio = ((AckermannChassisTypeDef*)self)->shaft_length / fabs(r);}
 8009890:	edd7 7a01 	vldr	s15, [r7, #4]
 8009894:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989c:	d103      	bne.n	80098a6 <ackermann_chassis_move+0x3e>
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	61bb      	str	r3, [r7, #24]
 80098a4:	e00a      	b.n	80098bc <ackermann_chassis_move+0x54>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	edd3 6a06 	vldr	s13, [r3, #24]
 80098ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80098b0:	eeb0 7ae7 	vabs.f32	s14, s15
 80098b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b8:	edc7 7a06 	vstr	s15, [r7, #24]
//		printf("%f/n",steering_ratio);
		if (r>0){swerve = true;}else if(r<0){swerve = false;}
 80098bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80098c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c8:	dd02      	ble.n	80098d0 <ackermann_chassis_move+0x68>
 80098ca:	2301      	movs	r3, #1
 80098cc:	77fb      	strb	r3, [r7, #31]
 80098ce:	e008      	b.n	80098e2 <ackermann_chassis_move+0x7a>
 80098d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80098d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098dc:	d501      	bpl.n	80098e2 <ackermann_chassis_move+0x7a>
 80098de:	2300      	movs	r3, #0
 80098e0:	77fb      	strb	r3, [r7, #31]
		if (steering_ratio > tan(PI/180*30)){steering_ratio = tan(PI/180*30);}
 80098e2:	69b8      	ldr	r0, [r7, #24]
 80098e4:	f7f6 fdd8 	bl	8000498 <__aeabi_f2d>
 80098e8:	a33e      	add	r3, pc, #248	@ (adr r3, 80099e4 <ackermann_chassis_move+0x17c>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f7 f8bb 	bl	8000a68 <__aeabi_dcmpgt>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <ackermann_chassis_move+0x94>
 80098f8:	4b37      	ldr	r3, [pc, #220]	@ (80099d8 <ackermann_chassis_move+0x170>)
 80098fa:	61bb      	str	r3, [r7, #24]
		if (swerve == true){steering_ratio = steering_ratio;}else{steering_ratio = -steering_ratio;}
 80098fc:	7ffb      	ldrb	r3, [r7, #31]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d105      	bne.n	800990e <ackermann_chassis_move+0xa6>
 8009902:	edd7 7a06 	vldr	s15, [r7, #24]
 8009906:	eef1 7a67 	vneg.f32	s15, s15
 800990a:	edc7 7a06 	vstr	s15, [r7, #24]
	  if(rps_l !=0){
 800990e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991a:	d039      	beq.n	8009990 <ackermann_chassis_move+0x128>
		    if(steering_ratio != 0){
 800991c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009920:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009928:	d01f      	beq.n	800996a <ackermann_chassis_move+0x102>
					  servos = (steering_ratio * 187.5f)+500;
 800992a:	edd7 7a06 	vldr	s15, [r7, #24]
 800992e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80099dc <ackermann_chassis_move+0x174>
 8009932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009936:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80099e0 <ackermann_chassis_move+0x178>
 800993a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800993e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009942:	ee17 3a90 	vmov	r3, s15
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24
					  
					  if (servos > 625){servos=625;}else if(servos < 375){servos=375;}
 8009948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994a:	f240 2271 	movw	r2, #625	@ 0x271
 800994e:	4293      	cmp	r3, r2
 8009950:	dd03      	ble.n	800995a <ackermann_chassis_move+0xf2>
 8009952:	f240 2371 	movw	r3, #625	@ 0x271
 8009956:	627b      	str	r3, [r7, #36]	@ 0x24
 8009958:	e011      	b.n	800997e <ackermann_chassis_move+0x116>
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	f5b3 7fbb 	cmp.w	r3, #374	@ 0x176
 8009960:	dc0d      	bgt.n	800997e <ackermann_chassis_move+0x116>
 8009962:	f240 1377 	movw	r3, #375	@ 0x177
 8009966:	627b      	str	r3, [r7, #36]	@ 0x24
 8009968:	e009      	b.n	800997e <ackermann_chassis_move+0x116>
				}else if(steering_ratio == 0){
 800996a:	edd7 7a06 	vldr	s15, [r7, #24]
 800996e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009976:	d102      	bne.n	800997e <ackermann_chassis_move+0x116>
				    servos = 500;
 8009978:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800997c:	627b      	str	r3, [r7, #36]	@ 0x24
				}
		
		rps_r = ackermann_velocity_difference(self,servos,rps_l);		
 800997e:	ed97 0a05 	vldr	s0, [r7, #20]
 8009982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff fedf 	bl	8009748 <ackermann_velocity_difference>
 800998a:	ed87 0a08 	vstr	s0, [r7, #32]
 800998e:	e001      	b.n	8009994 <ackermann_chassis_move+0x12c>
		}else{rps_r = rps_l;}
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	623b      	str	r3, [r7, #32]
//		printf("%d/n",servos);
		if (swerve == true){self->set_motors(self, -rps_r, rps_l,servos);;
 8009994:	7ffb      	ldrb	r3, [r7, #31]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00d      	beq.n	80099b6 <ackermann_chassis_move+0x14e>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999e:	edd7 7a08 	vldr	s15, [r7, #32]
 80099a2:	eef1 7a67 	vneg.f32	s15, s15
 80099a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099a8:	edd7 0a05 	vldr	s1, [r7, #20]
 80099ac:	eeb0 0a67 	vmov.f32	s0, s15
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	4798      	blx	r3
		}else{self->set_motors(self, rps_l,-rps_r,servos);}
    
}
 80099b4:	e00c      	b.n	80099d0 <ackermann_chassis_move+0x168>
		}else{self->set_motors(self, rps_l,-rps_r,servos);}
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80099be:	eef1 7a67 	vneg.f32	s15, s15
 80099c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099c4:	eef0 0a67 	vmov.f32	s1, s15
 80099c8:	ed97 0a05 	vldr	s0, [r7, #20]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	4798      	blx	r3
}
 80099d0:	bf00      	nop
 80099d2:	3728      	adds	r7, #40	@ 0x28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	3f13cd3a 	.word	0x3f13cd3a
 80099dc:	433b8000 	.word	0x433b8000
 80099e0:	43fa0000 	.word	0x43fa0000
 80099e4:	4ffe43ec 	.word	0x4ffe43ec
 80099e8:	3fe279a7 	.word	0x3fe279a7

080099ec <stop>:

static void stop(void *self)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
    ((AckermannChassisTypeDef*)self)->set_motors(self, 0, 0,500);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80099fc:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8009a10 <stop+0x24>
 8009a00:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009a10 <stop+0x24>
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	00000000 	.word	0x00000000

08009a14 <set_velocity>:

static void set_velocity(void *self, float vx, float vy, float r)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8009a20:	edc7 0a01 	vstr	s1, [r7, #4]
 8009a24:	ed87 1a00 	vstr	s2, [r7]
    ackermann_chassis_move(self, vx, r);
 8009a28:	edd7 0a00 	vldr	s1, [r7]
 8009a2c:	ed97 0a02 	vldr	s0, [r7, #8]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff ff19 	bl	8009868 <ackermann_chassis_move>
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <set_velocity_radius>:

static void set_velocity_radius(void* self, float linear, float r,bool swerve)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	ed87 0a02 	vstr	s0, [r7, #8]
 8009a4a:	edc7 0a01 	vstr	s1, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
	if( 0 > r )
 8009a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5e:	d50b      	bpl.n	8009a78 <set_velocity_radius+0x3a>
	{
		ackermann_chassis_move(self, -linear, r);
 8009a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a64:	eef1 7a67 	vneg.f32	s15, s15
 8009a68:	edd7 0a01 	vldr	s1, [r7, #4]
 8009a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff fef9 	bl	8009868 <ackermann_chassis_move>
	} else {
		ackermann_chassis_move(self, linear, r);
	}
}
 8009a76:	e006      	b.n	8009a86 <set_velocity_radius+0x48>
		ackermann_chassis_move(self, linear, r);
 8009a78:	edd7 0a01 	vldr	s1, [r7, #4]
 8009a7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff fef1 	bl	8009868 <ackermann_chassis_move>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <ackermann_chassis_object_init>:

void ackermann_chassis_object_init(AckermannChassisTypeDef *self){
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
    self->base.stop = stop;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a07      	ldr	r2, [pc, #28]	@ (8009ab8 <ackermann_chassis_object_init+0x28>)
 8009a9c:	60da      	str	r2, [r3, #12]
    self->base.set_velocity = set_velocity;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a06      	ldr	r2, [pc, #24]	@ (8009abc <ackermann_chassis_object_init+0x2c>)
 8009aa2:	605a      	str	r2, [r3, #4]
    self->base.set_velocity_radius = set_velocity_radius;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a06      	ldr	r2, [pc, #24]	@ (8009ac0 <ackermann_chassis_object_init+0x30>)
 8009aa8:	609a      	str	r2, [r3, #8]
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	080099ed 	.word	0x080099ed
 8009abc:	08009a15 	.word	0x08009a15
 8009ac0:	08009a3f 	.word	0x08009a3f

08009ac4 <linear_speed_to_rps>:
#include "global_conf.h"
#include "differential_chassis.h"

#define PI 3.141592654f
static inline float linear_speed_to_rps(DifferentialChassisTypeDef *self,  float speed)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	ed87 0a00 	vstr	s0, [r7]
    return speed / (PI * self->wheel_diameter) * self->correction_factor;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	edd3 7a07 	vldr	s15, [r3, #28]
 8009ad6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8009b00 <linear_speed_to_rps+0x3c>
 8009ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ade:	edd7 6a00 	vldr	s13, [r7]
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	edd3 7a08 	vldr	s15, [r3, #32]
 8009aec:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8009af0:	eeb0 0a67 	vmov.f32	s0, s15
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	40490fdb 	.word	0x40490fdb

08009b04 <diff_chassis_move>:

/*vx mm/s
  angule_rate rad/s
*/
void diff_chassis_move(DifferentialChassisTypeDef *self, float vx, float angule_rate)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b088      	sub	sp, #32
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8009b10:	edc7 0a01 	vstr	s1, [r7, #4]
    float v_l = vx - angule_rate * ((DifferentialChassisTypeDef*)self)->shaft_length / 2.0f;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b22:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b32:	edc7 7a07 	vstr	s15, [r7, #28]
    float v_r = vx + angule_rate * ((DifferentialChassisTypeDef*)self)->shaft_length / 2.0f;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b54:	edc7 7a06 	vstr	s15, [r7, #24]
    float rps_l = linear_speed_to_rps(self, v_l);
 8009b58:	ed97 0a07 	vldr	s0, [r7, #28]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7ff ffb1 	bl	8009ac4 <linear_speed_to_rps>
 8009b62:	ed87 0a05 	vstr	s0, [r7, #20]
    float rps_r = linear_speed_to_rps(self, v_r);
 8009b66:	ed97 0a06 	vldr	s0, [r7, #24]
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff ffaa 	bl	8009ac4 <linear_speed_to_rps>
 8009b70:	ed87 0a04 	vstr	s0, [r7, #16]
    self->set_motors(self, rps_l, rps_r);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	edd7 0a04 	vldr	s1, [r7, #16]
 8009b7c:	ed97 0a05 	vldr	s0, [r7, #20]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	4798      	blx	r3
}
 8009b84:	bf00      	nop
 8009b86:	3720      	adds	r7, #32
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <stop>:

static void stop(void *self)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
    ((DifferentialChassisTypeDef*)self)->set_motors(self, 0, 0);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b98:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8009bac <stop+0x20>
 8009b9c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009bac <stop+0x20>
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	4798      	blx	r3
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	00000000 	.word	0x00000000

08009bb0 <set_velocity>:

static void set_velocity(void *self, float vx, float vy, float angular_rate)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8009bbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8009bc0:	ed87 1a00 	vstr	s2, [r7]
    diff_chassis_move(self, vx, angular_rate);
 8009bc4:	edd7 0a00 	vldr	s1, [r7]
 8009bc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff ff99 	bl	8009b04 <diff_chassis_move>
}
 8009bd2:	bf00      	nop
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <set_velocity_radius>:

static void set_velocity_radius(void* self, float linear, float r,  bool insitu)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	ed87 0a02 	vstr	s0, [r7, #8]
 8009be8:	edc7 0a01 	vstr	s1, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
    if(insitu) {
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00f      	beq.n	8009c16 <set_velocity_radius+0x3a>
		float angule_rate = linear / r;
 8009bf6:	edd7 6a02 	vldr	s13, [r7, #8]
 8009bfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8009bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c02:	edc7 7a04 	vstr	s15, [r7, #16]
        diff_chassis_move(self, 0, angule_rate);
 8009c06:	edd7 0a04 	vldr	s1, [r7, #16]
 8009c0a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8009c3c <set_velocity_radius+0x60>
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff ff78 	bl	8009b04 <diff_chassis_move>
    } else {
        float angule_rate = linear / r;
        diff_chassis_move(self, linear, angule_rate);
    }
}
 8009c14:	e00e      	b.n	8009c34 <set_velocity_radius+0x58>
        float angule_rate = linear / r;
 8009c16:	edd7 6a02 	vldr	s13, [r7, #8]
 8009c1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c22:	edc7 7a05 	vstr	s15, [r7, #20]
        diff_chassis_move(self, linear, angule_rate);
 8009c26:	edd7 0a05 	vldr	s1, [r7, #20]
 8009c2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff ff68 	bl	8009b04 <diff_chassis_move>
}
 8009c34:	bf00      	nop
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	00000000 	.word	0x00000000

08009c40 <diff_chassis_object_init>:

void diff_chassis_object_init(DifferentialChassisTypeDef *self)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
    self->base.stop = stop;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a07      	ldr	r2, [pc, #28]	@ (8009c68 <diff_chassis_object_init+0x28>)
 8009c4c:	60da      	str	r2, [r3, #12]
    self->base.set_velocity = set_velocity;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a06      	ldr	r2, [pc, #24]	@ (8009c6c <diff_chassis_object_init+0x2c>)
 8009c52:	605a      	str	r2, [r3, #4]
    self->base.set_velocity_radius = set_velocity_radius;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a06      	ldr	r2, [pc, #24]	@ (8009c70 <diff_chassis_object_init+0x30>)
 8009c58:	609a      	str	r2, [r3, #8]
}
 8009c5a:	bf00      	nop
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	08009b8d 	.word	0x08009b8d
 8009c6c:	08009bb1 	.word	0x08009bb1
 8009c70:	08009bdd 	.word	0x08009bdd

08009c74 <linear_speed_to_rps>:
#include <stdbool.h>

#define PI 3.141592654f

static inline float linear_speed_to_rps(MecanumChassisTypeDef *self,  float speed)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	ed87 0a00 	vstr	s0, [r7]
    return speed / (PI * self->wheel_diameter) * self->correction_factor;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	edd3 7a07 	vldr	s15, [r3, #28]
 8009c86:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8009cb0 <linear_speed_to_rps+0x3c>
 8009c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c8e:	edd7 6a00 	vldr	s13, [r7]
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8009c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8009ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40490fdb 	.word	0x40490fdb

08009cb4 <mecanum_chassis_set_xy>:
    v3 = linear_speed_to_rps(self, v3);
    self->set_motors(self, v1, v4, v2, v3);
}

void mecanum_chassis_set_xy(MecanumChassisTypeDef *self, float vx, float vy, float angular_rate)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08a      	sub	sp, #40	@ 0x28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8009cc0:	edc7 0a01 	vstr	s1, [r7, #4]
 8009cc4:	ed87 1a00 	vstr	s2, [r7]
          :param angular_rate:  The speed at which the chassis rotates rad/sec
          :param fake:
          :return:
          """
    */
    float vp = angular_rate * (self->wheelbase/2 + self->shaft_length/2);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	edd3 7a05 	vldr	s15, [r3, #20]
 8009cce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009cd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	edd3 6a06 	vldr	s13, [r3, #24]
 8009cdc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009ce0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ce8:	ed97 7a00 	vldr	s14, [r7]
 8009cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v1 = vx - vy - vp;
 8009cf4:	ed97 7a02 	vldr	s14, [r7, #8]
 8009cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8009cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d08:	edc7 7a08 	vstr	s15, [r7, #32]
    float v2 = vx + vy + vp;
 8009d0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d18:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d20:	edc7 7a07 	vstr	s15, [r7, #28]
    float v3 = vx - vy + vp;
 8009d24:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d30:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d38:	edc7 7a06 	vstr	s15, [r7, #24]
    float v4 = vx + vy - vp;
 8009d3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d50:	edc7 7a05 	vstr	s15, [r7, #20]
    v1 = linear_speed_to_rps(self, v1);
 8009d54:	ed97 0a08 	vldr	s0, [r7, #32]
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff ff8b 	bl	8009c74 <linear_speed_to_rps>
 8009d5e:	ed87 0a08 	vstr	s0, [r7, #32]
    v4 = linear_speed_to_rps(self, v4);
 8009d62:	ed97 0a05 	vldr	s0, [r7, #20]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff ff84 	bl	8009c74 <linear_speed_to_rps>
 8009d6c:	ed87 0a05 	vstr	s0, [r7, #20]
    v2 = linear_speed_to_rps(self, v2);
 8009d70:	ed97 0a07 	vldr	s0, [r7, #28]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff ff7d 	bl	8009c74 <linear_speed_to_rps>
 8009d7a:	ed87 0a07 	vstr	s0, [r7, #28]
    v3 = linear_speed_to_rps(self, v3);
 8009d7e:	ed97 0a06 	vldr	s0, [r7, #24]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff ff76 	bl	8009c74 <linear_speed_to_rps>
 8009d88:	ed87 0a06 	vstr	s0, [r7, #24]
    self->set_motors(self, v1, v4, v2, v3);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d90:	edd7 1a06 	vldr	s3, [r7, #24]
 8009d94:	ed97 1a07 	vldr	s2, [r7, #28]
 8009d98:	edd7 0a05 	vldr	s1, [r7, #20]
 8009d9c:	ed97 0a08 	vldr	s0, [r7, #32]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	4798      	blx	r3
}
 8009da4:	bf00      	nop
 8009da6:	3728      	adds	r7, #40	@ 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <stop>:
static void stop(void *self)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
    ((MecanumChassisTypeDef*)self)->set_motors(self, 0, 0, 0, 0);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db8:	eddf 1a06 	vldr	s3, [pc, #24]	@ 8009dd4 <stop+0x28>
 8009dbc:	ed9f 1a05 	vldr	s2, [pc, #20]	@ 8009dd4 <stop+0x28>
 8009dc0:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8009dd4 <stop+0x28>
 8009dc4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009dd4 <stop+0x28>
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	4798      	blx	r3
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	00000000 	.word	0x00000000

08009dd8 <drift>:

static void drift(void *self, bool insitu)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
	if(insitu) {
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00c      	beq.n	8009e04 <drift+0x2c>
		((MecanumChassisTypeDef*)self)->set_motors(self, 0.7, 0, -0.7, 0);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dee:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8009e24 <drift+0x4c>
 8009df2:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8009e28 <drift+0x50>
 8009df6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8009e24 <drift+0x4c>
 8009dfa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8009e2c <drift+0x54>
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
		}else{
		((MecanumChassisTypeDef*)self)->set_motors(self, -0.7, 0, 0.7, 0);
		}
}
 8009e02:	e00b      	b.n	8009e1c <drift+0x44>
		((MecanumChassisTypeDef*)self)->set_motors(self, -0.7, 0, 0.7, 0);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e08:	eddf 1a06 	vldr	s3, [pc, #24]	@ 8009e24 <drift+0x4c>
 8009e0c:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8009e2c <drift+0x54>
 8009e10:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8009e24 <drift+0x4c>
 8009e14:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8009e28 <drift+0x50>
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	4798      	blx	r3
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	00000000 	.word	0x00000000
 8009e28:	bf333333 	.word	0xbf333333
 8009e2c:	3f333333 	.word	0x3f333333

08009e30 <set_velocity>:


static void set_velocity(void *self, float vx, float vy, float angular_rate)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	ed87 0a02 	vstr	s0, [r7, #8]
 8009e3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009e40:	ed87 1a00 	vstr	s2, [r7]
    mecanum_chassis_set_xy(self, vx, vy, angular_rate);
 8009e44:	ed97 1a00 	vldr	s2, [r7]
 8009e48:	edd7 0a01 	vldr	s1, [r7, #4]
 8009e4c:	ed97 0a02 	vldr	s0, [r7, #8]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f7ff ff2f 	bl	8009cb4 <mecanum_chassis_set_xy>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <set_velocity_radius>:

static void set_velocity_radius(void *self, float linear, float r, bool insitu)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	ed87 0a02 	vstr	s0, [r7, #8]
 8009e6c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
	if(insitu) {
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <set_velocity_radius+0x3e>
		float angular_rate = linear / r;
 8009e7a:	edd7 6a02 	vldr	s13, [r7, #8]
 8009e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e86:	edc7 7a04 	vstr	s15, [r7, #16]
		mecanum_chassis_set_xy(self, 0, 0, angular_rate);
 8009e8a:	ed97 1a04 	vldr	s2, [r7, #16]
 8009e8e:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8009ec8 <set_velocity_radius+0x68>
 8009e92:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8009ec8 <set_velocity_radius+0x68>
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7ff ff0c 	bl	8009cb4 <mecanum_chassis_set_xy>
	}else{
		float angular_rate = linear / r;
		mecanum_chassis_set_xy(self, linear, 0, angular_rate);
	}
}
 8009e9c:	e010      	b.n	8009ec0 <set_velocity_radius+0x60>
		float angular_rate = linear / r;
 8009e9e:	edd7 6a02 	vldr	s13, [r7, #8]
 8009ea2:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eaa:	edc7 7a05 	vstr	s15, [r7, #20]
		mecanum_chassis_set_xy(self, linear, 0, angular_rate);
 8009eae:	ed97 1a05 	vldr	s2, [r7, #20]
 8009eb2:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8009ec8 <set_velocity_radius+0x68>
 8009eb6:	ed97 0a02 	vldr	s0, [r7, #8]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fefa 	bl	8009cb4 <mecanum_chassis_set_xy>
}
 8009ec0:	bf00      	nop
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	00000000 	.word	0x00000000

08009ecc <mecanum_chassis_object_init>:


void mecanum_chassis_object_init(MecanumChassisTypeDef *self)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
    self->base.stop = stop;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a08      	ldr	r2, [pc, #32]	@ (8009ef8 <mecanum_chassis_object_init+0x2c>)
 8009ed8:	60da      	str	r2, [r3, #12]
	self->base.drift = drift;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a07      	ldr	r2, [pc, #28]	@ (8009efc <mecanum_chassis_object_init+0x30>)
 8009ede:	611a      	str	r2, [r3, #16]
    self->base.set_velocity = set_velocity;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a07      	ldr	r2, [pc, #28]	@ (8009f00 <mecanum_chassis_object_init+0x34>)
 8009ee4:	605a      	str	r2, [r3, #4]
	self->base.set_velocity_radius = set_velocity_radius;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a06      	ldr	r2, [pc, #24]	@ (8009f04 <mecanum_chassis_object_init+0x38>)
 8009eea:	609a      	str	r2, [r3, #8]
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	08009dad 	.word	0x08009dad
 8009efc:	08009dd9 	.word	0x08009dd9
 8009f00:	08009e31 	.word	0x08009e31
 8009f04:	08009e61 	.word	0x08009e61

08009f08 <packet_recv>:
 * @param length 数据长度
 * @retval None
 */

void packet_recv(struct PacketController *self)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b096      	sub	sp, #88	@ 0x58
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    uint8_t data[PACKET_PARSE_BUFFER_SIZE];
    size_t avaliable = lwrb_get_full(self->rx_fifo);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8009f16:	4618      	mov	r0, r3
 8009f18:	f006 fd9e 	bl	8010a58 <lwrb_get_full>
 8009f1c:	6578      	str	r0, [r7, #84]	@ 0x54
    size_t readed_len = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint8_t crc = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    while(avaliable > 0) {
 8009f28:	e0e2      	b.n	800a0f0 <packet_recv+0x1e8>
        avaliable = avaliable > PACKET_PARSE_BUFFER_SIZE ? PACKET_PARSE_BUFFER_SIZE : avaliable;
 8009f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f2c:	2b40      	cmp	r3, #64	@ 0x40
 8009f2e:	bf28      	it	cs
 8009f30:	2340      	movcs	r3, #64	@ 0x40
 8009f32:	657b      	str	r3, [r7, #84]	@ 0x54
        readed_len = lwrb_read(self->rx_fifo, data, avaliable);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8009f3a:	f107 0108 	add.w	r1, r7, #8
 8009f3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f40:	4618      	mov	r0, r3
 8009f42:	f006 fcbd 	bl	80108c0 <lwrb_read>
 8009f46:	64f8      	str	r0, [r7, #76]	@ 0x4c

        for(int i = 0; i < readed_len; ++i) {
 8009f48:	2300      	movs	r3, #0
 8009f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f4c:	e0c4      	b.n	800a0d8 <packet_recv+0x1d0>
            //printf("%0.2X ", data[i]);
            switch(self->state) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	f200 80b9 	bhi.w	800a0ca <packet_recv+0x1c2>
 8009f58:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <packet_recv+0x58>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f79 	.word	0x08009f79
 8009f64:	08009f95 	.word	0x08009f95
 8009f68:	08009faf 	.word	0x08009faf
 8009f6c:	08009fdf 	.word	0x08009fdf
 8009f70:	0800a009 	.word	0x0800a009
 8009f74:	0800a045 	.word	0x0800a045
                case PACKET_CONTROLLER_STATE_STARTBYTE1: /* 处理帧头标记1 */
                    self->state = PROTO_CONST_STARTBYTE1 == data[i] ? PACKET_CONTROLLER_STATE_STARTBYTE2 : PACKET_CONTROLLER_STATE_STARTBYTE1;
 8009f78:	f107 0208 	add.w	r2, r7, #8
 8009f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f7e:	4413      	add	r3, r2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2baa      	cmp	r3, #170	@ 0xaa
 8009f84:	bf0c      	ite	eq
 8009f86:	2301      	moveq	r3, #1
 8009f88:	2300      	movne	r3, #0
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	701a      	strb	r2, [r3, #0]
                    break;
 8009f92:	e09e      	b.n	800a0d2 <packet_recv+0x1ca>
                case PACKET_CONTROLLER_STATE_STARTBYTE2: /* 处理帧头标记2 */
                    self->state = PROTO_CONST_STARTBYTE2 == data[i] ? PACKET_CONTROLLER_STATE_FUNCTION : PACKET_CONTROLLER_STATE_STARTBYTE1;
 8009f94:	f107 0208 	add.w	r2, r7, #8
 8009f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f9a:	4413      	add	r3, r2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b55      	cmp	r3, #85	@ 0x55
 8009fa0:	d101      	bne.n	8009fa6 <packet_recv+0x9e>
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	e000      	b.n	8009fa8 <packet_recv+0xa0>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	701a      	strb	r2, [r3, #0]
                    break;
 8009fac:	e091      	b.n	800a0d2 <packet_recv+0x1ca>
                case PACKET_CONTROLLER_STATE_FUNCTION: /* 处理帧功能号 */
                    self->state = PACKET_FUNC_NONE > data[i] ? PACKET_CONTROLLER_STATE_LENGTH : PACKET_CONTROLLER_STATE_STARTBYTE1;
 8009fae:	f107 0208 	add.w	r2, r7, #8
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb4:	4413      	add	r3, r2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b09      	cmp	r3, #9
 8009fba:	d801      	bhi.n	8009fc0 <packet_recv+0xb8>
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	e000      	b.n	8009fc2 <packet_recv+0xba>
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	701a      	strb	r2, [r3, #0]
                    if(PACKET_CONTROLLER_STATE_LENGTH == self->state) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d17e      	bne.n	800a0cc <packet_recv+0x1c4>
                        self->frame.function = data[i];
 8009fce:	f107 0208 	add.w	r2, r7, #8
 8009fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd4:	4413      	add	r3, r2
 8009fd6:	781a      	ldrb	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	70da      	strb	r2, [r3, #3]
                    }
                    break;
 8009fdc:	e076      	b.n	800a0cc <packet_recv+0x1c4>
                case PACKET_CONTROLLER_STATE_LENGTH: /* 处理帧数据长度 */
                    self->frame.data_length = data[i];
 8009fde:	f107 0208 	add.w	r2, r7, #8
 8009fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fe4:	4413      	add	r3, r2
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	711a      	strb	r2, [r3, #4]
                    self->state = (0 == self->frame.data_length) ? PACKET_CONTROLLER_STATE_CHECKSUM : PACKET_CONTROLLER_STATE_DATA;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	791b      	ldrb	r3, [r3, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <packet_recv+0xf0>
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	e000      	b.n	8009ffa <packet_recv+0xf2>
 8009ff8:	2204      	movs	r2, #4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	701a      	strb	r2, [r3, #0]
                    self->data_index = 0;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
                    break;
 800a006:	e064      	b.n	800a0d2 <packet_recv+0x1ca>
                case PACKET_CONTROLLER_STATE_DATA: /* 处理帧数据 */
                    self->frame.data_and_checksum[self->data_index] = data[i];
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800a00e:	f107 0108 	add.w	r1, r7, #8
 800a012:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a014:	440a      	add	r2, r1
 800a016:	7811      	ldrb	r1, [r2, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	4413      	add	r3, r2
 800a01c:	460a      	mov	r2, r1
 800a01e:	715a      	strb	r2, [r3, #5]
                    ++self->data_index;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
                    if(self->data_index >= self->frame.data_length) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7912      	ldrb	r2, [r2, #4]
 800a038:	4293      	cmp	r3, r2
 800a03a:	db49      	blt.n	800a0d0 <packet_recv+0x1c8>
                        self->state = PACKET_CONTROLLER_STATE_CHECKSUM;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2205      	movs	r2, #5
 800a040:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 800a042:	e045      	b.n	800a0d0 <packet_recv+0x1c8>
                case PACKET_CONTROLLER_STATE_CHECKSUM: /* 处理校验值 */
                    self->frame.data_and_checksum[self->frame.data_length] = data[i];
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	791b      	ldrb	r3, [r3, #4]
 800a048:	4619      	mov	r1, r3
 800a04a:	f107 0208 	add.w	r2, r7, #8
 800a04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a050:	4413      	add	r3, r2
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	440b      	add	r3, r1
 800a058:	715a      	strb	r2, [r3, #5]
                    crc = checksum_crc8((uint8_t*)&self->frame.function, self->frame.data_length + 2);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	1cda      	adds	r2, r3, #3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	791b      	ldrb	r3, [r3, #4]
 800a062:	3302      	adds	r3, #2
 800a064:	b29b      	uxth	r3, r3
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f002 f803 	bl	800c074 <checksum_crc8>
 800a06e:	4603      	mov	r3, r0
 800a070:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                    if(crc == self->frame.data_and_checksum[self->frame.data_length]) { /* 校验失败, 跳过执行 */
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	791b      	ldrb	r3, [r3, #4]
 800a078:	461a      	mov	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	795b      	ldrb	r3, [r3, #5]
 800a080:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800a084:	429a      	cmp	r2, r3
 800a086:	d113      	bne.n	800a0b0 <packet_recv+0x1a8>
                        if(NULL != self->handles[self->frame.function]) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	78db      	ldrb	r3, [r3, #3]
 800a08c:	461a      	mov	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3242      	adds	r2, #66	@ 0x42
 800a092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <packet_recv+0x1a8>
                            self->handles[self->frame.function](&self->frame);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	78db      	ldrb	r3, [r3, #3]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3242      	adds	r2, #66	@ 0x42
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	3201      	adds	r2, #1
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
                        }
                    }
                    memset(&self->frame, 0, sizeof(struct PacketRawFrame));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	f240 1205 	movw	r2, #261	@ 0x105
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f006 ff08 	bl	8010ed0 <memset>
                    self->state = PACKET_CONTROLLER_STATE_STARTBYTE1;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	701a      	strb	r2, [r3, #0]
                    break;
 800a0c6:	e004      	b.n	800a0d2 <packet_recv+0x1ca>
 800a0c8:	e7ff      	b.n	800a0ca <packet_recv+0x1c2>
                default:
                    while(1);
 800a0ca:	e7fd      	b.n	800a0c8 <packet_recv+0x1c0>
                    break;
 800a0cc:	bf00      	nop
 800a0ce:	e000      	b.n	800a0d2 <packet_recv+0x1ca>
                    break;
 800a0d0:	bf00      	nop
        for(int i = 0; i < readed_len; ++i) {
 800a0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	f63f af36 	bhi.w	8009f4e <packet_recv+0x46>
            }
        }
        avaliable = lwrb_get_full(self->rx_fifo);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f006 fcb5 	bl	8010a58 <lwrb_get_full>
 800a0ee:	6578      	str	r0, [r7, #84]	@ 0x54
    while(avaliable > 0) {
 800a0f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f47f af19 	bne.w	8009f2a <packet_recv+0x22>
    }
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	3758      	adds	r7, #88	@ 0x58
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop

0800a104 <pid_controller_update>:
 */


#include "pid.h"

void pid_controller_update(PID_ControllerTypeDef *self, float actual, float time_delta) {
 800a104:	b480      	push	{r7}
 800a106:	b089      	sub	sp, #36	@ 0x24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	ed87 0a02 	vstr	s0, [r7, #8]
 800a110:	edc7 0a01 	vstr	s1, [r7, #4]
	float err = self->set_point - actual;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	ed93 7a00 	vldr	s14, [r3]
 800a11a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a122:	edc7 7a07 	vstr	s15, [r7, #28]
	float proportion = err - self->previous_0_err;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	edd3 7a04 	vldr	s15, [r3, #16]
 800a12c:	ed97 7a07 	vldr	s14, [r7, #28]
 800a130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a134:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float integral = err * time_delta;
 800a138:	ed97 7a07 	vldr	s14, [r7, #28]
 800a13c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a144:	edc7 7a05 	vstr	s15, [r7, #20]
	float derivative = (err - 2 * self->previous_1_err + self->previous_0_err) / time_delta;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	edd3 7a05 	vldr	s15, [r3, #20]
 800a14e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a152:	ed97 7a07 	vldr	s14, [r7, #28]
 800a156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	edd3 7a04 	vldr	s15, [r3, #16]
 800a160:	ee77 6a27 	vadd.f32	s13, s14, s15
 800a164:	ed97 7a01 	vldr	s14, [r7, #4]
 800a168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16c:	edc7 7a04 	vstr	s15, [r7, #16]
	
	self->output = (self->kp * err) + (self->ki * integral) + (self->kd * derivative);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	ed93 7a01 	vldr	s14, [r3, #4]
 800a176:	edd7 7a07 	vldr	s15, [r7, #28]
 800a17a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	edd3 6a02 	vldr	s13, [r3, #8]
 800a184:	edd7 7a05 	vldr	s15, [r7, #20]
 800a188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a18c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	edd3 6a03 	vldr	s13, [r3, #12]
 800a196:	edd7 7a04 	vldr	s15, [r7, #16]
 800a19a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a19e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	edc3 7a06 	vstr	s15, [r3, #24]
	self->previous_1_err = self->previous_0_err;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	691a      	ldr	r2, [r3, #16]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	615a      	str	r2, [r3, #20]
	self->previous_0_err = err;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	611a      	str	r2, [r3, #16]

}
 800a1b6:	bf00      	nop
 800a1b8:	3724      	adds	r7, #36	@ 0x24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <pid_controller_init>:


void pid_controller_init(PID_ControllerTypeDef *self, float kp, float ki, float kd) {
 800a1c2:	b480      	push	{r7}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	ed87 0a02 	vstr	s0, [r7, #8]
 800a1ce:	edc7 0a01 	vstr	s1, [r7, #4]
 800a1d2:	ed87 1a00 	vstr	s2, [r7]
	self->set_point = 0;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
	self->kp = kp;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	605a      	str	r2, [r3, #4]
	self->ki = ki;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	609a      	str	r2, [r3, #8]
	self->kd = kd;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	60da      	str	r2, [r3, #12]
	self->previous_0_err = 0;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	611a      	str	r2, [r3, #16]
	self->previous_1_err = 0;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f04f 0200 	mov.w	r2, #0
 800a1fe:	615a      	str	r2, [r3, #20]
	self->output = 0;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	619a      	str	r2, [r3, #24]
}
 800a208:	bf00      	nop
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <button_task_handler>:
 */
#include "button.h"


void button_task_handler(ButtonObjectTypeDef *self, uint32_t period)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
    self->ticks_count += period;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	695a      	ldr	r2, [r3, #20]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	615a      	str	r2, [r3, #20]

    uint32_t pin = self->read_pin(self);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
 800a232:	60f8      	str	r0, [r7, #12]
    if(pin != self->last_pin_raw)  { /* 前后连续的两次IO状态不同认为按钮状态还不稳定，保存新的IO状态然后返回 */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d003      	beq.n	800a246 <button_task_handler+0x32>
        self->last_pin_raw = pin;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	609a      	str	r2, [r3, #8]
        return;
 800a244:	e0b5      	b.n	800a3b2 <button_task_handler+0x19e>
    }

    if(self->last_pin_filtered == self->last_pin_raw) { /* 按钮状态没有改变, 即状态机状态不会发生转移, 直接返回 */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68da      	ldr	r2, [r3, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d104      	bne.n	800a25c <button_task_handler+0x48>
		if(!self->last_pin_raw)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 80a4 	beq.w	800a3a4 <button_task_handler+0x190>
		{
			return;
		}
    }

    self->last_pin_filtered = self->last_pin_raw; /* 保存新的按钮状态 */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60da      	str	r2, [r3, #12]
    switch(self->stage) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	791b      	ldrb	r3, [r3, #4]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d077      	beq.n	800a35c <button_task_handler+0x148>
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	f300 80a0 	bgt.w	800a3b2 <button_task_handler+0x19e>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <button_task_handler+0x68>
 800a276:	2b01      	cmp	r3, #1
 800a278:	d042      	beq.n	800a300 <button_task_handler+0xec>
 800a27a:	e09a      	b.n	800a3b2 <button_task_handler+0x19e>
        case BUTTON_STAGE_NORMAL: {
            if(self->last_pin_filtered) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d02c      	beq.n	800a2de <button_task_handler+0xca>
                self->event_callback(self, BUTTON_EVENT_PRESSED); /* 触发按键按下事件 */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a288:	2101      	movs	r1, #1
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	4798      	blx	r3
                if(self->ticks_count < self->combin_th && self->combin_counter > 0) { /* 只有在连击计数不为零时连击才起作用 */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	695a      	ldr	r2, [r3, #20]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	429a      	cmp	r2, r3
 800a298:	d21a      	bcs.n	800a2d0 <button_task_handler+0xbc>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d016      	beq.n	800a2d0 <button_task_handler+0xbc>
                    self->combin_counter += 1;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	611a      	str	r2, [r3, #16]
                    if(self->combin_counter == 2) {  /* 双击回调 */
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d104      	bne.n	800a2be <button_task_handler+0xaa>
                        self->event_callback(self, BUTTON_EVENT_DOUBLE_CLICK);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	2140      	movs	r1, #64	@ 0x40
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	4798      	blx	r3
                    }
                    if(self->combin_counter == 3) {  /* 三连击回调 */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d104      	bne.n	800a2d0 <button_task_handler+0xbc>
                        self->event_callback(self, BUTTON_EVENT_TRIPLE_CLICK);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ca:	2180      	movs	r1, #128	@ 0x80
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	4798      	blx	r3
                    }
                }
                self->ticks_count = 0;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	615a      	str	r2, [r3, #20]
                self->stage = BUTTON_STAGE_PRESS;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	711a      	strb	r2, [r3, #4]
                if(self->ticks_count > self->combin_th && self->combin_counter != 0) {
                    self->combin_counter = 0;
                    self->ticks_count = 0;
                }
            }
            break;
 800a2dc:	e064      	b.n	800a3a8 <button_task_handler+0x194>
                if(self->ticks_count > self->combin_th && self->combin_counter != 0) {
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	695a      	ldr	r2, [r3, #20]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d95e      	bls.n	800a3a8 <button_task_handler+0x194>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d05a      	beq.n	800a3a8 <button_task_handler+0x194>
                    self->combin_counter = 0;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	611a      	str	r2, [r3, #16]
                    self->ticks_count = 0;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	615a      	str	r2, [r3, #20]
            break;
 800a2fe:	e053      	b.n	800a3a8 <button_task_handler+0x194>
		}
        case BUTTON_STAGE_PRESS: {
            if(self->last_pin_filtered) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d011      	beq.n	800a32c <button_task_handler+0x118>
                if(self->ticks_count > self->lp_th) { /* 超过长按触发时间 */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	695a      	ldr	r2, [r3, #20]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	429a      	cmp	r2, r3
 800a312:	d94b      	bls.n	800a3ac <button_task_handler+0x198>
                    self->event_callback(self, BUTTON_EVENT_LONGPRESS); /* 触发长按事件 */
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a318:	2102      	movs	r1, #2
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	4798      	blx	r3
                    self->ticks_count = 0;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	615a      	str	r2, [r3, #20]
                    self->stage = BUTTON_STAGE_LONGPRESS; /* 状态转为长按 */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	711a      	strb	r2, [r3, #4]
                self->event_callback(self, BUTTON_EVENT_RELEASE_FROM_SP); /* 触发短按松开事件 */
                self->event_callback(self, BUTTON_EVENT_CLICK);  /* 触发点击松开事件 */
                self->combin_counter = self->combin_counter == 0 ? 1 : self->combin_counter; /* 只有在连击计数不为零时连击才起作用 */
                self->stage = BUTTON_STAGE_NORMAL;
            }
            break;
 800a32a:	e03f      	b.n	800a3ac <button_task_handler+0x198>
                self->event_callback(self, BUTTON_EVENT_RELEASE_FROM_SP); /* 触发短按松开事件 */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a330:	2110      	movs	r1, #16
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
                self->event_callback(self, BUTTON_EVENT_CLICK);  /* 触发点击松开事件 */
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33a:	2120      	movs	r1, #32
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	4798      	blx	r3
                self->combin_counter = self->combin_counter == 0 ? 1 : self->combin_counter; /* 只有在连击计数不为零时连击才起作用 */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <button_task_handler+0x13a>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	e000      	b.n	800a350 <button_task_handler+0x13c>
 800a34e:	2301      	movs	r3, #1
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6113      	str	r3, [r2, #16]
                self->stage = BUTTON_STAGE_NORMAL;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	711a      	strb	r2, [r3, #4]
            break;
 800a35a:	e027      	b.n	800a3ac <button_task_handler+0x198>
		}
        case BUTTON_STAGE_LONGPRESS: {
            if(self->last_pin_filtered) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00e      	beq.n	800a382 <button_task_handler+0x16e>
                if(self->ticks_count > self->repeat_th)  {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	695a      	ldr	r2, [r3, #20]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a1b      	ldr	r3, [r3, #32]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d91f      	bls.n	800a3b0 <button_task_handler+0x19c>
                    self->event_callback(self, BUTTON_EVENT_LONGPRESS_REPEAT); /* 触发长按重复重复事件 */
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	2104      	movs	r1, #4
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
                    self->ticks_count = 0; /* 重新计时下一次重复触发 */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	615a      	str	r2, [r3, #20]
                self->event_callback(self, BUTTON_EVENT_RELEASE_FROM_LP);  /* 触发长按松开事件 */
                self->combin_counter = 0;                /* 长按不可连击, 连击计数为0时连击计数不生效 */
                self->ticks_count = self->combin_th + 1; /* 长按不可连击, 让连击计时直接超时 */
                self->stage = BUTTON_STAGE_NORMAL;
            }
            break;
 800a380:	e016      	b.n	800a3b0 <button_task_handler+0x19c>
                self->event_callback(self, BUTTON_EVENT_RELEASE_FROM_LP);  /* 触发长按松开事件 */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a386:	2108      	movs	r1, #8
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	4798      	blx	r3
                self->combin_counter = 0;                /* 长按不可连击, 连击计数为0时连击计数不生效 */
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	611a      	str	r2, [r3, #16]
                self->ticks_count = self->combin_th + 1; /* 长按不可连击, 让连击计时直接超时 */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	615a      	str	r2, [r3, #20]
                self->stage = BUTTON_STAGE_NORMAL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	711a      	strb	r2, [r3, #4]
            break;
 800a3a2:	e005      	b.n	800a3b0 <button_task_handler+0x19c>
			return;
 800a3a4:	bf00      	nop
 800a3a6:	e004      	b.n	800a3b2 <button_task_handler+0x19e>
            break;
 800a3a8:	bf00      	nop
 800a3aa:	e002      	b.n	800a3b2 <button_task_handler+0x19e>
            break;
 800a3ac:	bf00      	nop
 800a3ae:	e000      	b.n	800a3b2 <button_task_handler+0x19e>
            break;
 800a3b0:	bf00      	nop
		}
    }
}
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <button_defalut_event_callback>:
    }
    self->event_callback = callback;
}

void button_defalut_event_callback(ButtonObjectTypeDef *self,  ButtonEventIDEnum event)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <button_object_init>:

void button_object_init(ButtonObjectTypeDef *self)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
    self->stage = BUTTON_STAGE_NORMAL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	711a      	strb	r2, [r3, #4]
    self->last_pin_raw = 0;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	609a      	str	r2, [r3, #8]
	self->last_pin_filtered = 0;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	60da      	str	r2, [r3, #12]
    self->combin_counter = 0;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	611a      	str	r2, [r3, #16]
    self->ticks_count = 0;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	615a      	str	r2, [r3, #20]

    /* config */
    self->combin_th = 400; 
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a3fc:	619a      	str	r2, [r3, #24]
    self->lp_th = 2000;  
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a404:	61da      	str	r2, [r3, #28]
    self->repeat_th = 500;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a40c:	621a      	str	r2, [r3, #32]
    self->event_callback = button_defalut_event_callback;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a03      	ldr	r2, [pc, #12]	@ (800a420 <button_object_init+0x50>)
 800a412:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	0800a3b9 	.word	0x0800a3b9

0800a424 <buzzer_task_handler>:
 *
 */
#include "buzzer.h"

void buzzer_task_handler(BuzzerObjectTypeDef *self, uint32_t period)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
    /* 尝试从队列中取的新的控制数据， 如果成功取出则重置状态机重新开始一个控制循环 */
    if(self->get_ctrl_block(self, &self->ctrl_structure) == 0) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	320c      	adds	r2, #12
 800a436:	4611      	mov	r1, r2
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	4798      	blx	r3
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d102      	bne.n	800a448 <buzzer_task_handler+0x24>
        self->stage = BUZZER_STAGE_START_NEW_CYCLE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	711a      	strb	r2, [r3, #4]
    }
    /* 状态机处理 */
    switch(self->stage) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	791b      	ldrb	r3, [r3, #4]
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	f200 8085 	bhi.w	800a55c <buzzer_task_handler+0x138>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <buzzer_task_handler+0x34>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a469 	.word	0x0800a469
 800a45c:	0800a4b9 	.word	0x0800a4b9
 800a460:	0800a4e3 	.word	0x0800a4e3
 800a464:	0800a55d 	.word	0x0800a55d
        case BUZZER_STAGE_START_NEW_CYCLE: {
            if(self->ctrl_structure.ticks_on > 0 && self->ctrl_structure.freq > 0) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d019      	beq.n	800a4a4 <buzzer_task_handler+0x80>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	899b      	ldrh	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d015      	beq.n	800a4a4 <buzzer_task_handler+0x80>
                self->set_pwm(self, self->ctrl_structure.freq); /* 鸣响蜂鸣器 */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	8992      	ldrh	r2, [r2, #12]
 800a480:	4611      	mov	r1, r2
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
                if(self->ctrl_structure.ticks_off > 0) {/* 静音时间不为 0 即为 嘀嘀响 否则就是长鸣 */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d006      	beq.n	800a49c <buzzer_task_handler+0x78>
                    self->ticks_count = 0;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	609a      	str	r2, [r3, #8]
                    self->stage = BUZZER_STAGE_WATTING_OFF; /* 等到鸣响时间结束 */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	711a      	strb	r2, [r3, #4]
                if(self->ctrl_structure.ticks_off > 0) {/* 静音时间不为 0 即为 嘀嘀响 否则就是长鸣 */
 800a49a:	e00c      	b.n	800a4b6 <buzzer_task_handler+0x92>
                }else{
					self->stage = BUZZER_STAGE_IDLE; /* 长鸣，转入空闲 */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	711a      	strb	r2, [r3, #4]
                if(self->ctrl_structure.ticks_off > 0) {/* 静音时间不为 0 即为 嘀嘀响 否则就是长鸣 */
 800a4a2:	e008      	b.n	800a4b6 <buzzer_task_handler+0x92>
				}
            } else { /* 只要鸣响时间为 0 即为静音 */
                self->set_pwm(self, 0);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
				self->stage = BUZZER_STAGE_IDLE;  /* 长静音，转入空闲 */
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	711a      	strb	r2, [r3, #4]
            }
            break;
 800a4b4:	e057      	b.n	800a566 <buzzer_task_handler+0x142>
 800a4b6:	e056      	b.n	800a566 <buzzer_task_handler+0x142>
        }
        case BUZZER_STAGE_WATTING_OFF: {
            self->ticks_count += period;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	441a      	add	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	609a      	str	r2, [r3, #8]
            if(self->ticks_count >= self->ctrl_structure.ticks_on) { /* 鸣响时间结束 */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689a      	ldr	r2, [r3, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d347      	bcc.n	800a560 <buzzer_task_handler+0x13c>
                self->set_pwm(self, 0);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
                self->stage = BUZZER_STAGE_WATTING_PERIOD_END;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	711a      	strb	r2, [r3, #4]
            }
            break;
 800a4e0:	e03e      	b.n	800a560 <buzzer_task_handler+0x13c>
        }
        case BUZZER_STAGE_WATTING_PERIOD_END: { /* 等待周期结束 */
            self->ticks_count += period;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	441a      	add	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
            if(self->ticks_count >= (self->ctrl_structure.ticks_off + self->ctrl_structure.ticks_on)) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6959      	ldr	r1, [r3, #20]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	440b      	add	r3, r1
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d331      	bcc.n	800a564 <buzzer_task_handler+0x140>
                self->ticks_count -= (self->ctrl_structure.ticks_off + self->ctrl_structure.ticks_on);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6959      	ldr	r1, [r3, #20]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	440b      	add	r3, r1
 800a50e:	1ad2      	subs	r2, r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	609a      	str	r2, [r3, #8]
                if(self->ctrl_structure.repeat == 1) { /* 剩余重复次数为1时就可以结束此次控制任务 */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8b1b      	ldrh	r3, [r3, #24]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d108      	bne.n	800a52e <buzzer_task_handler+0x10a>
                    self->set_pwm(self, 0);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
                    self->stage = BUZZER_STAGE_IDLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2203      	movs	r2, #3
 800a52a:	711a      	strb	r2, [r3, #4]
                    self->set_pwm(self, self->ctrl_structure.freq);
                    self->ctrl_structure.repeat = self->ctrl_structure.repeat == 0 ? 0 : self->ctrl_structure.repeat - 1;
                    self->stage = BUZZER_STAGE_WATTING_OFF;
                }
            }
            break;
 800a52c:	e01a      	b.n	800a564 <buzzer_task_handler+0x140>
                    self->set_pwm(self, self->ctrl_structure.freq);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	8992      	ldrh	r2, [r2, #12]
 800a536:	4611      	mov	r1, r2
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	4798      	blx	r3
                    self->ctrl_structure.repeat = self->ctrl_structure.repeat == 0 ? 0 : self->ctrl_structure.repeat - 1;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	8b1b      	ldrh	r3, [r3, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <buzzer_task_handler+0x12a>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	8b1b      	ldrh	r3, [r3, #24]
 800a548:	3b01      	subs	r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	e000      	b.n	800a550 <buzzer_task_handler+0x12c>
 800a54e:	2200      	movs	r2, #0
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	831a      	strh	r2, [r3, #24]
                    self->stage = BUZZER_STAGE_WATTING_OFF;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	711a      	strb	r2, [r3, #4]
            break;
 800a55a:	e003      	b.n	800a564 <buzzer_task_handler+0x140>
        }
        case BUZZER_STAGE_IDLE: {
            break;
        }
        default:
            break;
 800a55c:	bf00      	nop
 800a55e:	e002      	b.n	800a566 <buzzer_task_handler+0x142>
            break;
 800a560:	bf00      	nop
 800a562:	e000      	b.n	800a566 <buzzer_task_handler+0x142>
            break;
 800a564:	bf00      	nop
    }
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop

0800a570 <buzzer_didi>:
    };
    return self->put_ctrl_block(self, &ctrl_structure);
}

int buzzer_didi(BuzzerObjectTypeDef *self, uint32_t freq, uint32_t ticks_on, uint32_t ticks_off, uint32_t repeat)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
    BuzzerCtrlTypeDef ctrl_structure = {
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	b29b      	uxth	r3, r3
 800a582:	823b      	strh	r3, [r7, #16]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	61bb      	str	r3, [r7, #24]
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	b29b      	uxth	r3, r3
 800a590:	83bb      	strh	r3, [r7, #28]
        .freq = freq,
        .ticks_on = ticks_on,
        .ticks_off = ticks_off,
        .repeat = repeat,
    };
    return self->put_ctrl_block(self, &ctrl_structure);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	f107 0210 	add.w	r2, r7, #16
 800a59a:	4611      	mov	r1, r2
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	4798      	blx	r3
 800a5a0:	4603      	mov	r3, r0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3720      	adds	r7, #32
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <buzzer_object_init>:


void buzzer_object_init(BuzzerObjectTypeDef *self)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
    self->stage = BUZZER_STAGE_IDLE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2203      	movs	r2, #3
 800a5b6:	711a      	strb	r2, [r3, #4]
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <encoder_update>:
 * @param period 当前更新距离上次更新的时间间隔(更新周期), 单位 sec
 * @param counter 编码器当前计数值
 * @retval None.
*/
void encoder_update(EncoderMotorObjectTypeDef *self, float period, int64_t counter)
{
 800a5c4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a5c8:	b087      	sub	sp, #28
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	ed87 0a02 	vstr	s0, [r7, #8]
 800a5d2:	e9c7 2300 	strd	r2, r3, [r7]
    counter = counter + self->overflow_num * self->ticks_overflow; /* 总的计数值, 60000 根据实际设置的定时器溢出值 */
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a5dc:	68f9      	ldr	r1, [r7, #12]
 800a5de:	6909      	ldr	r1, [r1, #16]
 800a5e0:	17c8      	asrs	r0, r1, #31
 800a5e2:	4688      	mov	r8, r1
 800a5e4:	4681      	mov	r9, r0
 800a5e6:	fb08 f003 	mul.w	r0, r8, r3
 800a5ea:	fb02 f109 	mul.w	r1, r2, r9
 800a5ee:	4401      	add	r1, r0
 800a5f0:	fba2 4508 	umull	r4, r5, r2, r8
 800a5f4:	194b      	adds	r3, r1, r5
 800a5f6:	461d      	mov	r5, r3
 800a5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5fc:	eb12 0a04 	adds.w	sl, r2, r4
 800a600:	eb43 0b05 	adc.w	fp, r3, r5
 800a604:	e9c7 ab00 	strd	sl, fp, [r7]
    int delta_count = counter - self->counter;
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	4613      	mov	r3, r2
 800a612:	1acb      	subs	r3, r1, r3
 800a614:	617b      	str	r3, [r7, #20]
    self->counter = counter; /* 存储新的计数值 */
 800a616:	68f9      	ldr	r1, [r7, #12]
 800a618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a61c:	e9c1 2300 	strd	r2, r3, [r1]
    self->tps = (float)delta_count / period * 0.9f + self->tps * 0.1f; /* 计算脉冲频率 */
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a62a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a632:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800a67c <encoder_update+0xb8>
 800a636:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	edd3 7a05 	vldr	s15, [r3, #20]
 800a640:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800a680 <encoder_update+0xbc>
 800a644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	edc3 7a05 	vstr	s15, [r3, #20]
    self->rps = self->tps / self->ticks_per_circle; /* 计算转速 单位rps, 转每秒 */
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	edd3 6a05 	vldr	s13, [r3, #20]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a65c:	ee07 3a90 	vmov	s15, r3
 800a660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	3f666666 	.word	0x3f666666
 800a680:	3dcccccd 	.word	0x3dcccccd

0800a684 <encoder_motor_control>:
 * @param self 编码器电机对象指针
 * @param period 当前更新距离上次更新的时间间隔(更新周期), 单位 sec
 * @retval None.
*/
void encoder_motor_control(EncoderMotorObjectTypeDef *self, float period) 
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	ed87 0a00 	vstr	s0, [r7]
	float pulse = 0;
 800a690:	f04f 0300 	mov.w	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
    pid_controller_update(&self->pid_controller, self->rps, period);   /* 更新 PID控制器 */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f103 0220 	add.w	r2, r3, #32
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	edd3 7a06 	vldr	s15, [r3, #24]
 800a6a2:	edd7 0a00 	vldr	s1, [r7]
 800a6a6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f7ff fd2a 	bl	800a104 <pid_controller_update>
    pulse = self->current_pulse + self->pid_controller.output; /* 计算新的 PWM 值 */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	ee07 3a90 	vmov	s15, r3
 800a6b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800a6c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6c6:	edc7 7a03 	vstr	s15, [r7, #12]
	
	/* 对输出的 PWM 值进行限幅, 限幅根据定时器的设置确定，本示例定时器设置的占空比 0-100 对应 0-1000 */
    pulse = pulse > 1000 ?  1000 : pulse; 
 800a6ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6ce:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800a774 <encoder_motor_control+0xf0>
 800a6d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	dd01      	ble.n	800a6e0 <encoder_motor_control+0x5c>
 800a6dc:	4b26      	ldr	r3, [pc, #152]	@ (800a778 <encoder_motor_control+0xf4>)
 800a6de:	e000      	b.n	800a6e2 <encoder_motor_control+0x5e>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	60fb      	str	r3, [r7, #12]
    pulse = pulse < -1000 ? -1000 : pulse;
 800a6e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6e8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800a77c <encoder_motor_control+0xf8>
 800a6ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f4:	d501      	bpl.n	800a6fa <encoder_motor_control+0x76>
 800a6f6:	4b22      	ldr	r3, [pc, #136]	@ (800a780 <encoder_motor_control+0xfc>)
 800a6f8:	e000      	b.n	800a6fc <encoder_motor_control+0x78>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	60fb      	str	r3, [r7, #12]
	
    self->set_pulse(self, pulse > -250 && pulse < 250 ? 0 : pulse); /* 设置新的PWM值且限制 PWM 的最小值, PWM过小电机只会发出嗡嗡声而不动 */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a702:	edd7 7a03 	vldr	s15, [r7, #12]
 800a706:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a784 <encoder_motor_control+0x100>
 800a70a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a712:	bfcc      	ite	gt
 800a714:	2201      	movgt	r2, #1
 800a716:	2200      	movle	r2, #0
 800a718:	b2d2      	uxtb	r2, r2
 800a71a:	f082 0201 	eor.w	r2, r2, #1
 800a71e:	b2d2      	uxtb	r2, r2
 800a720:	2a00      	cmp	r2, #0
 800a722:	d110      	bne.n	800a746 <encoder_motor_control+0xc2>
 800a724:	edd7 7a03 	vldr	s15, [r7, #12]
 800a728:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800a788 <encoder_motor_control+0x104>
 800a72c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a734:	bf4c      	ite	mi
 800a736:	2201      	movmi	r2, #1
 800a738:	2200      	movpl	r2, #0
 800a73a:	b2d2      	uxtb	r2, r2
 800a73c:	f082 0201 	eor.w	r2, r2, #1
 800a740:	b2d2      	uxtb	r2, r2
 800a742:	2a00      	cmp	r2, #0
 800a744:	d006      	beq.n	800a754 <encoder_motor_control+0xd0>
 800a746:	edd7 7a03 	vldr	s15, [r7, #12]
 800a74a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a74e:	ee17 2a90 	vmov	r2, s15
 800a752:	e000      	b.n	800a756 <encoder_motor_control+0xd2>
 800a754:	2200      	movs	r2, #0
 800a756:	4611      	mov	r1, r2
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
    self->current_pulse = pulse; /* 记录新的 PWM 值 */
 800a75c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a764:	ee17 2a90 	vmov	r2, s15
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	61da      	str	r2, [r3, #28]
}
 800a76c:	bf00      	nop
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	447a0000 	.word	0x447a0000
 800a778:	447a0000 	.word	0x447a0000
 800a77c:	c47a0000 	.word	0xc47a0000
 800a780:	c47a0000 	.word	0xc47a0000
 800a784:	c37a0000 	.word	0xc37a0000
 800a788:	437a0000 	.word	0x437a0000

0800a78c <encoder_motor_set_speed>:
 * @param self self 编码器电机对象指针
 * @param rps 目标速度， 单位转每秒
 * @retval None.
 */
void encoder_motor_set_speed(EncoderMotorObjectTypeDef *self, float rps)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	ed87 0a00 	vstr	s0, [r7]
	rps = rps > self->rps_limit ? self->rps_limit : (rps < -self->rps_limit ? -self->rps_limit : rps); /* 对速度进行限幅 */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800a79e:	ed97 7a00 	vldr	s14, [r7]
 800a7a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7aa:	dd03      	ble.n	800a7b4 <encoder_motor_set_speed+0x28>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800a7b2:	e013      	b.n	800a7dc <encoder_motor_set_speed+0x50>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800a7ba:	eef1 7a67 	vneg.f32	s15, s15
 800a7be:	ed97 7a00 	vldr	s14, [r7]
 800a7c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	d505      	bpl.n	800a7d8 <encoder_motor_set_speed+0x4c>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800a7d2:	eef1 7a67 	vneg.f32	s15, s15
 800a7d6:	e001      	b.n	800a7dc <encoder_motor_set_speed+0x50>
 800a7d8:	edd7 7a00 	vldr	s15, [r7]
 800a7dc:	edc7 7a00 	vstr	s15, [r7]
    self->pid_controller.set_point = rps; /* 设置 PID 控制器目标 */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	621a      	str	r2, [r3, #32]
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <encoder_motor_object_init>:
 * @breif 编码器电机对象初始化
 * @param self 编码器电机对象指针
 * @retval None.
*/
void encoder_motor_object_init(EncoderMotorObjectTypeDef *self)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
    self->counter = 0;
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	f04f 0200 	mov.w	r2, #0
 800a802:	f04f 0300 	mov.w	r3, #0
 800a806:	e9c1 2300 	strd	r2, r3, [r1]
    self->overflow_num = 0;
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	f04f 0300 	mov.w	r3, #0
 800a814:	e9c1 2302 	strd	r2, r3, [r1, #8]
    self->tps = 0; 
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f04f 0200 	mov.w	r2, #0
 800a81e:	615a      	str	r2, [r3, #20]
    self->rps = 0;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f04f 0200 	mov.w	r2, #0
 800a826:	619a      	str	r2, [r3, #24]
	self->current_pulse = 0;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	61da      	str	r2, [r3, #28]
	self->ticks_overflow = 0; 
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	611a      	str	r2, [r3, #16]
    self->ticks_per_circle = 9999; /* 电机输出轴旋转一圈产生的计数个数, 根据电机实际情况填写 */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f242 720f 	movw	r2, #9999	@ 0x270f
 800a83a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid_controller_init(&self->pid_controller, 0, 0, 0);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3320      	adds	r3, #32
 800a840:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 800a85c <encoder_motor_object_init+0x68>
 800a844:	eddf 0a05 	vldr	s1, [pc, #20]	@ 800a85c <encoder_motor_object_init+0x68>
 800a848:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800a85c <encoder_motor_object_init+0x68>
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fcb8 	bl	800a1c2 <pid_controller_init>
}
 800a852:	bf00      	nop
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	00000000 	.word	0x00000000

0800a860 <led_task_handler>:
 */

#include "led.h"

void led_task_handler(LEDObjectTypeDef *self, uint32_t period)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
    /* 尝试从队列中取的新的控制数据， 如果成功取出则重置状态机重新开始一个控制循环 */
    if(self->get_ctrl_block(self, &self->ctrl_structure) == 0) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	320c      	adds	r2, #12
 800a872:	4611      	mov	r1, r2
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <led_task_handler+0x24>
        self->stage = LED_STAGE_START_NEW_CYCLE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	711a      	strb	r2, [r3, #4]
    }
    /* 状态机处理 */
    switch(self->stage) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	791b      	ldrb	r3, [r3, #4]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d87c      	bhi.n	800a986 <led_task_handler+0x126>
 800a88c:	a201      	add	r2, pc, #4	@ (adr r2, 800a894 <led_task_handler+0x34>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8e7 	.word	0x0800a8e7
 800a89c:	0800a911 	.word	0x0800a911
 800a8a0:	0800a987 	.word	0x0800a987
        case LED_STAGE_START_NEW_CYCLE: {
            if(self->ctrl_structure.ticks_on > 0) {
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d013      	beq.n	800a8d4 <led_task_handler+0x74>
                self->set_pin(self, 1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
                if(self->ctrl_structure.ticks_off > 0) { /* 熄灭时间不为 0 即为 闪烁否则为长亮 */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d006      	beq.n	800a8cc <led_task_handler+0x6c>
                    self->ticks_count = 0;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	609a      	str	r2, [r3, #8]
                    self->stage = LED_STAGE_WATTING_OFF; /* 等待 LED 灯亮起时间结束 */
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	711a      	strb	r2, [r3, #4]
				}
            } else { /* 只要亮起时间为 0 即为长灭 */
                self->set_pin(self, 0);
				self->stage = LED_STAGE_IDLE; /* 长灭， 转入空闲 */
            }
            break;
 800a8ca:	e061      	b.n	800a990 <led_task_handler+0x130>
					self->stage = LED_STAGE_IDLE; /* 长亮， 转入空闲 */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	711a      	strb	r2, [r3, #4]
            break;
 800a8d2:	e05d      	b.n	800a990 <led_task_handler+0x130>
                self->set_pin(self, 0);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	2100      	movs	r1, #0
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
				self->stage = LED_STAGE_IDLE; /* 长灭， 转入空闲 */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2203      	movs	r2, #3
 800a8e2:	711a      	strb	r2, [r3, #4]
            break;
 800a8e4:	e054      	b.n	800a990 <led_task_handler+0x130>
        }
        case LED_STAGE_WATTING_OFF: {
            self->ticks_count += period;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	441a      	add	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	609a      	str	r2, [r3, #8]
            if(self->ticks_count >= self->ctrl_structure.ticks_on) { /* LED 亮起时间结束 */
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689a      	ldr	r2, [r3, #8]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d345      	bcc.n	800a98a <led_task_handler+0x12a>
                self->set_pin(self, 0);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	2100      	movs	r1, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	4798      	blx	r3
                self->stage = LED_STAGE_WATTING_PERIOD_END;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	711a      	strb	r2, [r3, #4]
            }
            break;
 800a90e:	e03c      	b.n	800a98a <led_task_handler+0x12a>
        }
        case LED_STAGE_WATTING_PERIOD_END: { /* 等待周期结束 */
            self->ticks_count += period;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	441a      	add	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	609a      	str	r2, [r3, #8]
            if(self->ticks_count >= (self->ctrl_structure.ticks_off + self->ctrl_structure.ticks_on)) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6919      	ldr	r1, [r3, #16]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	440b      	add	r3, r1
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d32f      	bcc.n	800a98e <led_task_handler+0x12e>
				 self->ticks_count -= (self->ctrl_structure.ticks_off + self->ctrl_structure.ticks_on);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689a      	ldr	r2, [r3, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6919      	ldr	r1, [r3, #16]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	440b      	add	r3, r1
 800a93c:	1ad2      	subs	r2, r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	609a      	str	r2, [r3, #8]
                if(self->ctrl_structure.repeat == 1) { /* 剩余重复次数为1时就可以结束此次控制任务 */
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	8a9b      	ldrh	r3, [r3, #20]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d108      	bne.n	800a95c <led_task_handler+0xfc>
                    self->set_pin(self, 0);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	2100      	movs	r1, #0
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	4798      	blx	r3
                    self->stage = LED_STAGE_IDLE;  /* 重复次数用完， 转入空闲 */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2203      	movs	r2, #3
 800a958:	711a      	strb	r2, [r3, #4]
                    self->set_pin(self, 1);
                    self->ctrl_structure.repeat = self->ctrl_structure.repeat == 0 ? 0 : self->ctrl_structure.repeat - 1;
                    self->stage = LED_STAGE_WATTING_OFF;
                }
            }
            break;
 800a95a:	e018      	b.n	800a98e <led_task_handler+0x12e>
                    self->set_pin(self, 1);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	2101      	movs	r1, #1
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
                    self->ctrl_structure.repeat = self->ctrl_structure.repeat == 0 ? 0 : self->ctrl_structure.repeat - 1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	8a9b      	ldrh	r3, [r3, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d004      	beq.n	800a978 <led_task_handler+0x118>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8a9b      	ldrh	r3, [r3, #20]
 800a972:	3b01      	subs	r3, #1
 800a974:	b29a      	uxth	r2, r3
 800a976:	e000      	b.n	800a97a <led_task_handler+0x11a>
 800a978:	2200      	movs	r2, #0
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	829a      	strh	r2, [r3, #20]
                    self->stage = LED_STAGE_WATTING_OFF;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	711a      	strb	r2, [r3, #4]
            break;
 800a984:	e003      	b.n	800a98e <led_task_handler+0x12e>
        }
        case LED_STAGE_IDLE: {
            break;
        }
        default:
            break;
 800a986:	bf00      	nop
 800a988:	e002      	b.n	800a990 <led_task_handler+0x130>
            break;
 800a98a:	bf00      	nop
 800a98c:	e000      	b.n	800a990 <led_task_handler+0x130>
            break;
 800a98e:	bf00      	nop
    }
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <pwm_servo_duty_compare>:

#include "pwm_servo.h"
#include <string.h>

void pwm_servo_duty_compare(PWMServoObjectTypeDef *self)   //脉宽变化比较及速度控制
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
    // 根据新设置的目标重新计算舵机控制参数
    if(self->duty_changed) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d03d      	beq.n	800aa26 <pwm_servo_duty_compare+0x8e>
        self->duty_changed = false;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        self->inc_times = self->duration / 20; // 计算需要递增的次数，20ms
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	4a38      	ldr	r2, [pc, #224]	@ (800aa98 <pwm_servo_duty_compare+0x100>)
 800a9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9bc:	091b      	lsrs	r3, r3, #4
 800a9be:	461a      	mov	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	61da      	str	r2, [r3, #28]
        if(self->target_duty > self->current_duty) { /* 计算总的位置变换量 */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	dd0c      	ble.n	800a9ea <pwm_servo_duty_compare+0x52>
            self->duty_inc = (float)(-(self->target_duty - self->current_duty));
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	edc3 7a06 	vstr	s15, [r3, #24]
 800a9e8:	e00b      	b.n	800aa02 <pwm_servo_duty_compare+0x6a>
        } else {
            self->duty_inc = (float)(self->current_duty - self->target_duty);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	ee07 3a90 	vmov	s15, r3
 800a9f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	edc3 7a06 	vstr	s15, [r3, #24]
        }
        self->duty_inc /= (float)self->inc_times; /* 计算每个控制周期位置增量 */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	edd3 6a06 	vldr	s13, [r3, #24]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	edc3 7a06 	vstr	s15, [r3, #24]
        self->is_running = true;  // 舵机开始动作
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2020 	strb.w	r2, [r3, #32]
    }
		
	// 需要控制舵机转动以到达新的位置
    if(self->is_running) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d025      	beq.n	800aa7c <pwm_servo_duty_compare+0xe4>
        --self->inc_times;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	1e5a      	subs	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	61da      	str	r2, [r3, #28]
        if(self->inc_times == 0) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d108      	bne.n	800aa54 <pwm_servo_duty_compare+0xbc>
            self->current_duty = self->target_duty;   //最后一次递增就直接将设定值赋给当前值，保证最后总位置正确
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	60da      	str	r2, [r3, #12]
            self->is_running = false; //到达设定位置，舵机停止运动
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2020 	strb.w	r2, [r3, #32]
 800aa52:	e013      	b.n	800aa7c <pwm_servo_duty_compare+0xe4>
        } else {
            self->current_duty = self->target_duty + (int)(self->duty_inc * self->inc_times);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	ed92 7a06 	vldr	s14, [r2, #24]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	69d2      	ldr	r2, [r2, #28]
 800aa62:	ee07 2a90 	vmov	s15, r2
 800aa66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa72:	ee17 2a90 	vmov	r2, s15
 800aa76:	441a      	add	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	60da      	str	r2, [r3, #12]
        }
    }
    self->duty_raw = self->current_duty + self->offset; // 动作要加上舵机偏差
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	441a      	add	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	611a      	str	r2, [r3, #16]
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	cccccccd 	.word	0xcccccccd

0800aa9c <pwm_servo_object_init>:
    offset = offset < -100 ? -100 : (offset > 100 ? 100 : offset); /* 限制最小/最大偏差, 不同舵机极限会不同， 但是100是一个不错的选择*/
    self->offset = offset;
}

void pwm_servo_object_init(PWMServoObjectTypeDef *obj)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
    memset(obj, 0, sizeof(PWMServoObjectTypeDef));
 800aaa4:	2228      	movs	r2, #40	@ 0x28
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f006 fa11 	bl	8010ed0 <memset>
    obj->current_duty = 1500; /* 默认位置 */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800aab4:	60da      	str	r2, [r3, #12]
    obj->duty_raw = 1500;     /* 默认实际脉宽 */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800aabc:	611a      	str	r2, [r3, #16]
	obj->offset = -35 ;		/*偏差设置0到正负100  ，正值右偏，负值左偏*/
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800aac4:	605a      	str	r2, [r3, #4]
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <serial_servo_checksum>:
{
 800aace:	b480      	push	{r7}
 800aad0:	b085      	sub	sp, #20
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
    uint16_t temp = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	81fb      	strh	r3, [r7, #14]
    for (int i = 2; i < buf[3] + 2; ++i) {
 800aada:	2302      	movs	r3, #2
 800aadc:	60bb      	str	r3, [r7, #8]
 800aade:	e00a      	b.n	800aaf6 <serial_servo_checksum+0x28>
        temp += buf[i];
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	4413      	add	r3, r2
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	89fb      	ldrh	r3, [r7, #14]
 800aaec:	4413      	add	r3, r2
 800aaee:	81fb      	strh	r3, [r7, #14]
    for (int i = 2; i < buf[3] + 2; ++i) {
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60bb      	str	r3, [r7, #8]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3303      	adds	r3, #3
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	dded      	ble.n	800aae0 <serial_servo_checksum+0x12>
    return (uint8_t)(~temp);
 800ab04:	89fb      	ldrh	r3, [r7, #14]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	43db      	mvns	r3, r3
 800ab0a:	b2db      	uxtb	r3, r3
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <cmd_frame_init>:
//宏函数 将高地八位合成为十六位


/* 自动填充数据帧的帧头、ID、命令字段 */
static void cmd_frame_init(SerialServoCmdTypeDef *frame, int servo_id, int cmd)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
    frame->header_1 = SERIAL_SERVO_FRAME_HEADER;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2255      	movs	r2, #85	@ 0x55
 800ab28:	701a      	strb	r2, [r3, #0]
    frame->header_2 = SERIAL_SERVO_FRAME_HEADER;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2255      	movs	r2, #85	@ 0x55
 800ab2e:	705a      	strb	r2, [r3, #1]
    frame->elements.servo_id = servo_id;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	709a      	strb	r2, [r3, #2]
    frame->elements.command = cmd;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	711a      	strb	r2, [r3, #4]
}
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <cmd_frame_complete>:

/* 自动填充数据帧的数据长度、校验值字段 */
static void cmd_frame_complete(SerialServoCmdTypeDef *frame, int args_num)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
    frame->elements.length = args_num + 3;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	3303      	adds	r3, #3
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	70da      	strb	r2, [r3, #3]
    frame->elements.args[args_num] = serial_servo_checksum((uint8_t*)frame);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff ffb3 	bl	800aace <serial_servo_checksum>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	4413      	add	r3, r2
 800ab72:	3305      	adds	r3, #5
 800ab74:	460a      	mov	r2, r1
 800ab76:	701a      	strb	r2, [r3, #0]
    frame->elements.args[args_num + 1] = 0;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	4413      	add	r3, r2
 800ab80:	2200      	movs	r2, #0
 800ab82:	715a      	strb	r2, [r3, #5]
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <serial_servo_set_position>:
    }
    return -1;
}

void serial_servo_set_position(SerialServoControllerTypeDef *self, uint32_t servo_id, int position, uint32_t duration)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
    SerialServoCmdTypeDef frame;
    position = position > 1000 ? 1000 : position;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aba0:	bfa8      	it	ge
 800aba2:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 800aba6:	607b      	str	r3, [r7, #4]
    cmd_frame_init(&frame, servo_id, SERIAL_SERVO_MOVE_TIME_WRITE);
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	f107 0310 	add.w	r3, r7, #16
 800abae:	2201      	movs	r2, #1
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff ffb1 	bl	800ab18 <cmd_frame_init>
    frame.elements.args[0] = GET_LOW_BYTE(position);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	757b      	strb	r3, [r7, #21]
    frame.elements.args[1] = GET_HIGH_BYTE(position);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	121b      	asrs	r3, r3, #8
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	75bb      	strb	r3, [r7, #22]
    frame.elements.args[2] = GET_LOW_BYTE(duration);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	75fb      	strb	r3, [r7, #23]
    frame.elements.args[3] = GET_HIGH_BYTE(duration);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	0a1b      	lsrs	r3, r3, #8
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	763b      	strb	r3, [r7, #24]
    cmd_frame_complete(&frame, 4);
 800abd2:	f107 0310 	add.w	r3, r7, #16
 800abd6:	2104      	movs	r1, #4
 800abd8:	4618      	mov	r0, r3
 800abda:	f7ff ffb7 	bl	800ab4c <cmd_frame_complete>
    self->serial_write_and_read(self, &frame, true);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe2:	f107 0110 	add.w	r1, r7, #16
 800abe6:	2201      	movs	r2, #1
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	4798      	blx	r3
}
 800abec:	bf00      	nop
 800abee:	3720      	adds	r7, #32
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <buttons_init>:
ButtonObjectTypeDef* buttons[2];
static uint32_t button_read_pin(ButtonObjectTypeDef *self); /* 读取按键IO状态 */


void buttons_init(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; ++i) {
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]
 800abfe:	e036      	b.n	800ac6e <buttons_init+0x7a>
		buttons[i] = LWMEM_CCM_MALLOC(sizeof(ButtonObjectTypeDef));
 800ac00:	222c      	movs	r2, #44	@ 0x2c
 800ac02:	491f      	ldr	r1, [pc, #124]	@ (800ac80 <buttons_init+0x8c>)
 800ac04:	2000      	movs	r0, #0
 800ac06:	f005 fd35 	bl	8010674 <lwmem_malloc_ex>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	491d      	ldr	r1, [pc, #116]	@ (800ac84 <buttons_init+0x90>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		button_object_init(buttons[i]);
 800ac14:	4a1b      	ldr	r2, [pc, #108]	@ (800ac84 <buttons_init+0x90>)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff fbd7 	bl	800a3d0 <button_object_init>
		buttons[i]->id = i + 1;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	1c59      	adds	r1, r3, #1
 800ac26:	4a17      	ldr	r2, [pc, #92]	@ (800ac84 <buttons_init+0x90>)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac2e:	460a      	mov	r2, r1
 800ac30:	601a      	str	r2, [r3, #0]
	    buttons[i]->read_pin = button_read_pin;
 800ac32:	4a14      	ldr	r2, [pc, #80]	@ (800ac84 <buttons_init+0x90>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac3a:	4a13      	ldr	r2, [pc, #76]	@ (800ac88 <buttons_init+0x94>)
 800ac3c:	629a      	str	r2, [r3, #40]	@ 0x28
		buttons[i]->combin_th = 300; 
 800ac3e:	4a11      	ldr	r2, [pc, #68]	@ (800ac84 <buttons_init+0x90>)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ac4a:	619a      	str	r2, [r3, #24]
		buttons[i]->lp_th = 1500;  
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	@ (800ac84 <buttons_init+0x90>)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac54:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ac58:	61da      	str	r2, [r3, #28]
		buttons[i]->repeat_th = 400;
 800ac5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ac84 <buttons_init+0x90>)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac62:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ac66:	621a      	str	r2, [r3, #32]
	for(int i = 0; i < 2; ++i) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	ddc5      	ble.n	800ac00 <buttons_init+0xc>
	}
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000010 	.word	0x20000010
 800ac84:	20003934 	.word	0x20003934
 800ac88:	0800ac8d 	.word	0x0800ac8d

0800ac8c <button_read_pin>:

static uint32_t button_read_pin(ButtonObjectTypeDef *self)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
    switch(self->id) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d002      	beq.n	800aca2 <button_read_pin+0x16>
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d009      	beq.n	800acb4 <button_read_pin+0x28>
 800aca0:	e011      	b.n	800acc6 <button_read_pin+0x3a>
        case 1:
            return ((uint32_t)HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)) ^ 1;
 800aca2:	2102      	movs	r1, #2
 800aca4:	480a      	ldr	r0, [pc, #40]	@ (800acd0 <button_read_pin+0x44>)
 800aca6:	f7fa fb71 	bl	800538c <HAL_GPIO_ReadPin>
 800acaa:	4603      	mov	r3, r0
 800acac:	f083 0301 	eor.w	r3, r3, #1
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	e009      	b.n	800acc8 <button_read_pin+0x3c>
        case 2:
            return ((uint32_t)HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin)) ^ 1;
 800acb4:	2101      	movs	r1, #1
 800acb6:	4806      	ldr	r0, [pc, #24]	@ (800acd0 <button_read_pin+0x44>)
 800acb8:	f7fa fb68 	bl	800538c <HAL_GPIO_ReadPin>
 800acbc:	4603      	mov	r3, r0
 800acbe:	f083 0301 	eor.w	r3, r3, #1
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	e000      	b.n	800acc8 <button_read_pin+0x3c>
        default:
            return 0;
 800acc6:	2300      	movs	r3, #0
    }
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	40021000 	.word	0x40021000

0800acd4 <button_timer_callback>:
 * @brief 定时器回调进行按键扫描
 *
 * @param argument
 */
void button_timer_callback(void *argument)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	button_task_handler(buttons[0], BUTTON_TASK_PERIOD);
 800acdc:	4b07      	ldr	r3, [pc, #28]	@ (800acfc <button_timer_callback+0x28>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	211e      	movs	r1, #30
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff fa96 	bl	800a214 <button_task_handler>
	button_task_handler(buttons[1], BUTTON_TASK_PERIOD);
 800ace8:	4b04      	ldr	r3, [pc, #16]	@ (800acfc <button_timer_callback+0x28>)
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	211e      	movs	r1, #30
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fa90 	bl	800a214 <button_task_handler>
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20003934 	.word	0x20003934

0800ad00 <buzzers_init>:
  * @brief 蜂鸣器相关的初始化
  * @retval None.
  *
*/
void buzzers_init(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);  /* 设置蜂鸣器引脚IO为低电平 */
 800ad06:	2200      	movs	r2, #0
 800ad08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ad0c:	482a      	ldr	r0, [pc, #168]	@ (800adb8 <buzzers_init+0xb8>)
 800ad0e:	f7fa fb55 	bl	80053bc <HAL_GPIO_WritePin>
	
	/* 建立蜂鸣器控制队列 */
	const osMessageQueueAttr_t buzzer1_ctrl_quque_attributes = { .name = "buzzer1_ctrl_quque" };
 800ad12:	463b      	mov	r3, r7
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	605a      	str	r2, [r3, #4]
 800ad1a:	609a      	str	r2, [r3, #8]
 800ad1c:	60da      	str	r2, [r3, #12]
 800ad1e:	611a      	str	r2, [r3, #16]
 800ad20:	615a      	str	r2, [r3, #20]
 800ad22:	4b26      	ldr	r3, [pc, #152]	@ (800adbc <buzzers_init+0xbc>)
 800ad24:	603b      	str	r3, [r7, #0]
	buzzer1_ctrl_ququeHandle = osMessageQueueNew (5, sizeof(BuzzerCtrlTypeDef), &buzzer1_ctrl_quque_attributes);
 800ad26:	463b      	mov	r3, r7
 800ad28:	461a      	mov	r2, r3
 800ad2a:	2110      	movs	r1, #16
 800ad2c:	2005      	movs	r0, #5
 800ad2e:	f001 fe2b 	bl	800c988 <osMessageQueueNew>
 800ad32:	4603      	mov	r3, r0
 800ad34:	4a22      	ldr	r2, [pc, #136]	@ (800adc0 <buzzers_init+0xc0>)
 800ad36:	6013      	str	r3, [r2, #0]
	
	/* 建立蜂鸣器对象实例 */
    buzzers[0] = LWMEM_CCM_MALLOC(sizeof(BuzzerObjectTypeDef)); 
 800ad38:	2228      	movs	r2, #40	@ 0x28
 800ad3a:	4922      	ldr	r1, [pc, #136]	@ (800adc4 <buzzers_init+0xc4>)
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f005 fc99 	bl	8010674 <lwmem_malloc_ex>
 800ad42:	4603      	mov	r3, r0
 800ad44:	4a20      	ldr	r2, [pc, #128]	@ (800adc8 <buzzers_init+0xc8>)
 800ad46:	6013      	str	r3, [r2, #0]
	buzzer_object_init(buzzers[0]);
 800ad48:	4b1f      	ldr	r3, [pc, #124]	@ (800adc8 <buzzers_init+0xc8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7ff fc2c 	bl	800a5aa <buzzer_object_init>
	buzzers[0]->id = 1;
 800ad52:	4b1d      	ldr	r3, [pc, #116]	@ (800adc8 <buzzers_init+0xc8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2201      	movs	r2, #1
 800ad58:	601a      	str	r2, [r3, #0]
    buzzers[0]->set_pwm = buzzer1_set_pwm;
 800ad5a:	4b1b      	ldr	r3, [pc, #108]	@ (800adc8 <buzzers_init+0xc8>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a1b      	ldr	r2, [pc, #108]	@ (800adcc <buzzers_init+0xcc>)
 800ad60:	625a      	str	r2, [r3, #36]	@ 0x24
	buzzers[0]->get_ctrl_block = get_ctrl_block;
 800ad62:	4b19      	ldr	r3, [pc, #100]	@ (800adc8 <buzzers_init+0xc8>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a1a      	ldr	r2, [pc, #104]	@ (800add0 <buzzers_init+0xd0>)
 800ad68:	61da      	str	r2, [r3, #28]
	buzzers[0]->put_ctrl_block = put_ctrl_block;
 800ad6a:	4b17      	ldr	r3, [pc, #92]	@ (800adc8 <buzzers_init+0xc8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a19      	ldr	r2, [pc, #100]	@ (800add4 <buzzers_init+0xd4>)
 800ad70:	621a      	str	r2, [r3, #32]

	/* 定时器的各个参数配置有 STM32CubeMX 软件配置生成 */
    __HAL_TIM_SET_COUNTER(&htim12, 0);               /* 清零定时器计数值 */
 800ad72:	4b19      	ldr	r3, [pc, #100]	@ (800add8 <buzzers_init+0xd8>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2200      	movs	r2, #0
 800ad78:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim12, TIM_FLAG_UPDATE);  /* 清除定时器更新中断标志 */
 800ad7a:	4b17      	ldr	r3, [pc, #92]	@ (800add8 <buzzers_init+0xd8>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f06f 0201 	mvn.w	r2, #1
 800ad82:	611a      	str	r2, [r3, #16]
    __HAL_TIM_CLEAR_FLAG(&htim12, TIM_FLAG_CC1);     /* 清除定时器比较中断标志 */
 800ad84:	4b14      	ldr	r3, [pc, #80]	@ (800add8 <buzzers_init+0xd8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f06f 0202 	mvn.w	r2, #2
 800ad8c:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);     /* 使能定时器更新中断 */
 800ad8e:	4b12      	ldr	r3, [pc, #72]	@ (800add8 <buzzers_init+0xd8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	4b10      	ldr	r3, [pc, #64]	@ (800add8 <buzzers_init+0xd8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f042 0201 	orr.w	r2, r2, #1
 800ad9c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_CC1);        /* 使能定时器比较中断 */
 800ad9e:	4b0e      	ldr	r3, [pc, #56]	@ (800add8 <buzzers_init+0xd8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	4b0c      	ldr	r3, [pc, #48]	@ (800add8 <buzzers_init+0xd8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0202 	orr.w	r2, r2, #2
 800adac:	60da      	str	r2, [r3, #12]
}
 800adae:	bf00      	nop
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	40020000 	.word	0x40020000
 800adbc:	0801273c 	.word	0x0801273c
 800adc0:	20003940 	.word	0x20003940
 800adc4:	20000010 	.word	0x20000010
 800adc8:	2000393c 	.word	0x2000393c
 800adcc:	0800adfd 	.word	0x0800adfd
 800add0:	0800aed9 	.word	0x0800aed9
 800add4:	0800aeb1 	.word	0x0800aeb1
 800add8:	20002fac 	.word	0x20002fac

0800addc <buzzer_timer_callback>:
  * @detials 定时刷新LED灯状态，定时时间通过 CubeMx 设置
  * @retval None.
  *
*/
void buzzer_timer_callback(void *argument)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
    buzzer_task_handler(buzzers[0], BUZZER_TASK_PERIOD);
 800ade4:	4b04      	ldr	r3, [pc, #16]	@ (800adf8 <buzzer_timer_callback+0x1c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	211e      	movs	r1, #30
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fb1a 	bl	800a424 <buzzer_task_handler>
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	2000393c 	.word	0x2000393c

0800adfc <buzzer1_set_pwm>:
  * @param freq PWM 频率
  * @retval None.
  *
*/
static void buzzer1_set_pwm(BuzzerObjectTypeDef *self, uint32_t freq)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
	freq  = freq > 20000 ? 20000: freq;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	bf28      	it	cs
 800ae10:	4613      	movcs	r3, r2
 800ae12:	603b      	str	r3, [r7, #0]

    if(freq < 10) {
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b09      	cmp	r3, #9
 800ae18:	d822      	bhi.n	800ae60 <buzzer1_set_pwm+0x64>
        __HAL_TIM_DISABLE(&htim12);
 800ae1a:	4b22      	ldr	r3, [pc, #136]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6a1a      	ldr	r2, [r3, #32]
 800ae20:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae24:	4013      	ands	r3, r2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10f      	bne.n	800ae4a <buzzer1_set_pwm+0x4e>
 800ae2a:	4b1e      	ldr	r3, [pc, #120]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6a1a      	ldr	r2, [r3, #32]
 800ae30:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae34:	4013      	ands	r3, r2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <buzzer1_set_pwm+0x4e>
 800ae3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	4b18      	ldr	r3, [pc, #96]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0201 	bic.w	r2, r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim12, 0);
 800ae4a:	4b16      	ldr	r3, [pc, #88]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800ae52:	2200      	movs	r2, #0
 800ae54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ae58:	4813      	ldr	r0, [pc, #76]	@ (800aea8 <buzzer1_set_pwm+0xac>)
 800ae5a:	f7fa faaf 	bl	80053bc <HAL_GPIO_WritePin>
        return;
 800ae5e:	e01d      	b.n	800ae9c <buzzer1_set_pwm+0xa0>
    }

    uint32_t period = 100000u / freq;
 800ae60:	4a12      	ldr	r2, [pc, #72]	@ (800aeac <buzzer1_set_pwm+0xb0>)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae68:	617b      	str	r3, [r7, #20]
    uint16_t pulse = period / 2;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	085b      	lsrs	r3, r3, #1
 800ae6e:	827b      	strh	r3, [r7, #18]
    uint32_t counter_period = period - 1;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim12, counter_period);
 800ae76:	4b0b      	ldr	r3, [pc, #44]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae7e:	4a09      	ldr	r2, [pc, #36]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, pulse);
 800ae84:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	8a7a      	ldrh	r2, [r7, #18]
 800ae8a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_ENABLE(&htim12);
 800ae8c:	4b05      	ldr	r3, [pc, #20]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	4b04      	ldr	r3, [pc, #16]	@ (800aea4 <buzzer1_set_pwm+0xa8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 0201 	orr.w	r2, r2, #1
 800ae9a:	601a      	str	r2, [r3, #0]
}
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20002fac 	.word	0x20002fac
 800aea8:	40020000 	.word	0x40020000
 800aeac:	000186a0 	.word	0x000186a0

0800aeb0 <put_ctrl_block>:
  * @param p 要出队的控制参数结构体指针
  * @retval 0 成功
  * @retval !=0 失败 
  *
*/
static int put_ctrl_block(BuzzerObjectTypeDef *self, BuzzerCtrlTypeDef *p) {
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
	return (int)osMessageQueuePut(buzzer1_ctrl_ququeHandle, p, 0, 0);
 800aeba:	4b06      	ldr	r3, [pc, #24]	@ (800aed4 <put_ctrl_block+0x24>)
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	2300      	movs	r3, #0
 800aec0:	2200      	movs	r2, #0
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	f001 fdd4 	bl	800ca70 <osMessageQueuePut>
 800aec8:	4603      	mov	r3, r0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20003940 	.word	0x20003940

0800aed8 <get_ctrl_block>:
  * @param  出队数据的存储指针
  * @retval 0 成功
  * @retval !=0 失败 
  *
*/
static int get_ctrl_block(BuzzerObjectTypeDef *self, BuzzerCtrlTypeDef *p) {
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
	return (int)osMessageQueueGet(buzzer1_ctrl_ququeHandle, p, 0, 0);
 800aee2:	4b06      	ldr	r3, [pc, #24]	@ (800aefc <get_ctrl_block+0x24>)
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	2300      	movs	r3, #0
 800aee8:	2200      	movs	r2, #0
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	f001 fe20 	bl	800cb30 <osMessageQueueGet>
 800aef0:	4603      	mov	r3, r0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20003940 	.word	0x20003940

0800af00 <jetank_set_motors>:
AckermannChassisTypeDef   jetacker;



static void jetank_set_motors(void* self, float rps_l, float rps_r)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	ed87 0a02 	vstr	s0, [r7, #8]
 800af0c:	edc7 0a01 	vstr	s1, [r7, #4]
    encoder_motor_set_speed(motors[0], rps_r);
 800af10:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <jetank_set_motors+0x3c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	ed97 0a01 	vldr	s0, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fc37 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[3], -rps_l);
 800af1e:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <jetank_set_motors+0x3c>)
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	edd7 7a02 	vldr	s15, [r7, #8]
 800af26:	eef1 7a67 	vneg.f32	s15, s15
 800af2a:	eeb0 0a67 	vmov.f32	s0, s15
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff fc2c 	bl	800a78c <encoder_motor_set_speed>
}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	2000d210 	.word	0x2000d210

0800af40 <tankblack_set_motors>:


static void tankblack_set_motors(void* self, float rps_l, float rps_r)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	ed87 0a02 	vstr	s0, [r7, #8]
 800af4c:	edc7 0a01 	vstr	s1, [r7, #4]
    encoder_motor_set_speed(motors[0], -rps_l);
 800af50:	4b0a      	ldr	r3, [pc, #40]	@ (800af7c <tankblack_set_motors+0x3c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	edd7 7a02 	vldr	s15, [r7, #8]
 800af58:	eef1 7a67 	vneg.f32	s15, s15
 800af5c:	eeb0 0a67 	vmov.f32	s0, s15
 800af60:	4618      	mov	r0, r3
 800af62:	f7ff fc13 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[1], rps_r);
 800af66:	4b05      	ldr	r3, [pc, #20]	@ (800af7c <tankblack_set_motors+0x3c>)
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	ed97 0a01 	vldr	s0, [r7, #4]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fc0c 	bl	800a78c <encoder_motor_set_speed>
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	2000d210 	.word	0x2000d210

0800af80 <ti4wd_set_motors>:

static void ti4wd_set_motors(void* self, float rps_l, float rps_r)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	ed87 0a02 	vstr	s0, [r7, #8]
 800af8c:	edc7 0a01 	vstr	s1, [r7, #4]
    encoder_motor_set_speed(motors[3], rps_r);
 800af90:	4b13      	ldr	r3, [pc, #76]	@ (800afe0 <ti4wd_set_motors+0x60>)
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	ed97 0a01 	vldr	s0, [r7, #4]
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff fbf7 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[2], rps_r);
 800af9e:	4b10      	ldr	r3, [pc, #64]	@ (800afe0 <ti4wd_set_motors+0x60>)
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	ed97 0a01 	vldr	s0, [r7, #4]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fbf0 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[0], -rps_l);
 800afac:	4b0c      	ldr	r3, [pc, #48]	@ (800afe0 <ti4wd_set_motors+0x60>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800afb4:	eef1 7a67 	vneg.f32	s15, s15
 800afb8:	eeb0 0a67 	vmov.f32	s0, s15
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fbe5 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[1], -rps_l);
 800afc2:	4b07      	ldr	r3, [pc, #28]	@ (800afe0 <ti4wd_set_motors+0x60>)
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	edd7 7a02 	vldr	s15, [r7, #8]
 800afca:	eef1 7a67 	vneg.f32	s15, s15
 800afce:	eeb0 0a67 	vmov.f32	s0, s15
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fbda 	bl	800a78c <encoder_motor_set_speed>
}
 800afd8:	bf00      	nop
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	2000d210 	.word	0x2000d210

0800afe4 <jetauto_set_motors>:

static void jetauto_set_motors(void* self, float rps_lh, float rps_lt, float rps_rh, float rps_rt)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6178      	str	r0, [r7, #20]
 800afec:	ed87 0a04 	vstr	s0, [r7, #16]
 800aff0:	edc7 0a03 	vstr	s1, [r7, #12]
 800aff4:	ed87 1a02 	vstr	s2, [r7, #8]
 800aff8:	edc7 1a01 	vstr	s3, [r7, #4]
    encoder_motor_set_speed(motors[1], rps_lh);
 800affc:	4b13      	ldr	r3, [pc, #76]	@ (800b04c <jetauto_set_motors+0x68>)
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	ed97 0a04 	vldr	s0, [r7, #16]
 800b004:	4618      	mov	r0, r3
 800b006:	f7ff fbc1 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[0], rps_lt);
 800b00a:	4b10      	ldr	r3, [pc, #64]	@ (800b04c <jetauto_set_motors+0x68>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	ed97 0a03 	vldr	s0, [r7, #12]
 800b012:	4618      	mov	r0, r3
 800b014:	f7ff fbba 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[2], -rps_rh);
 800b018:	4b0c      	ldr	r3, [pc, #48]	@ (800b04c <jetauto_set_motors+0x68>)
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b020:	eef1 7a67 	vneg.f32	s15, s15
 800b024:	eeb0 0a67 	vmov.f32	s0, s15
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff fbaf 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[3], -rps_rt);
 800b02e:	4b07      	ldr	r3, [pc, #28]	@ (800b04c <jetauto_set_motors+0x68>)
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	edd7 7a01 	vldr	s15, [r7, #4]
 800b036:	eef1 7a67 	vneg.f32	s15, s15
 800b03a:	eeb0 0a67 	vmov.f32	s0, s15
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fba4 	bl	800a78c <encoder_motor_set_speed>
}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	2000d210 	.word	0x2000d210

0800b050 <jetacker_set_motors>:

static void jetacker_set_motors(void* self, float rps_lh, float rps_lt,int position)
{   
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	ed87 0a02 	vstr	s0, [r7, #8]
 800b05c:	edc7 0a01 	vstr	s1, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
		serial_servo_set_position(&serial_servo_controller,9,position,100);
 800b062:	2364      	movs	r3, #100	@ 0x64
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	2109      	movs	r1, #9
 800b068:	480a      	ldr	r0, [pc, #40]	@ (800b094 <jetacker_set_motors+0x44>)
 800b06a:	f7ff fd8f 	bl	800ab8c <serial_servo_set_position>
    encoder_motor_set_speed(motors[1], rps_lh);
 800b06e:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <jetacker_set_motors+0x48>)
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	ed97 0a02 	vldr	s0, [r7, #8]
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fb88 	bl	800a78c <encoder_motor_set_speed>
    encoder_motor_set_speed(motors[0], rps_lt);
 800b07c:	4b06      	ldr	r3, [pc, #24]	@ (800b098 <jetacker_set_motors+0x48>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	ed97 0a01 	vldr	s0, [r7, #4]
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff fb81 	bl	800a78c <encoder_motor_set_speed>
}
 800b08a:	bf00      	nop
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	2000d384 	.word	0x2000d384
 800b098:	2000d210 	.word	0x2000d210

0800b09c <chassis_init>:
ChassisTypeDef *chassis = (ChassisTypeDef*)&jetauto;

void chassis_init(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
    diff_chassis_object_init(&jetank);
 800b0a0:	4833      	ldr	r0, [pc, #204]	@ (800b170 <chassis_init+0xd4>)
 800b0a2:	f7fe fdcd 	bl	8009c40 <diff_chassis_object_init>
    jetank.base.chassis_type = CHASSIS_TYPE_JETTANK;
 800b0a6:	4b32      	ldr	r3, [pc, #200]	@ (800b170 <chassis_init+0xd4>)
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	701a      	strb	r2, [r3, #0]
    jetank.correction_factor = JETTANK_CORRECITION_FACTOR;
 800b0ac:	4b30      	ldr	r3, [pc, #192]	@ (800b170 <chassis_init+0xd4>)
 800b0ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b0b2:	621a      	str	r2, [r3, #32]
    jetank.wheel_diameter = JETTANK_WHEEL_DIAMETER;
 800b0b4:	4b2e      	ldr	r3, [pc, #184]	@ (800b170 <chassis_init+0xd4>)
 800b0b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b174 <chassis_init+0xd8>)
 800b0b8:	61da      	str	r2, [r3, #28]
    jetank.shaft_length = JETTANK_SHAFT_LENGTH;
 800b0ba:	4b2d      	ldr	r3, [pc, #180]	@ (800b170 <chassis_init+0xd4>)
 800b0bc:	4a2e      	ldr	r2, [pc, #184]	@ (800b178 <chassis_init+0xdc>)
 800b0be:	619a      	str	r2, [r3, #24]
    jetank.set_motors = jetank_set_motors;
 800b0c0:	4b2b      	ldr	r3, [pc, #172]	@ (800b170 <chassis_init+0xd4>)
 800b0c2:	4a2e      	ldr	r2, [pc, #184]	@ (800b17c <chassis_init+0xe0>)
 800b0c4:	625a      	str	r2, [r3, #36]	@ 0x24

    diff_chassis_object_init(&tank_black);
 800b0c6:	482e      	ldr	r0, [pc, #184]	@ (800b180 <chassis_init+0xe4>)
 800b0c8:	f7fe fdba 	bl	8009c40 <diff_chassis_object_init>
    tank_black.base.chassis_type = CHASSIS_TYPE_JETTANK;
 800b0cc:	4b2c      	ldr	r3, [pc, #176]	@ (800b180 <chassis_init+0xe4>)
 800b0ce:	2203      	movs	r2, #3
 800b0d0:	701a      	strb	r2, [r3, #0]
    tank_black.correction_factor = JETTANK_CORRECITION_FACTOR;
 800b0d2:	4b2b      	ldr	r3, [pc, #172]	@ (800b180 <chassis_init+0xe4>)
 800b0d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b0d8:	621a      	str	r2, [r3, #32]
    tank_black.wheel_diameter = JETTANK_WHEEL_DIAMETER;
 800b0da:	4b29      	ldr	r3, [pc, #164]	@ (800b180 <chassis_init+0xe4>)
 800b0dc:	4a25      	ldr	r2, [pc, #148]	@ (800b174 <chassis_init+0xd8>)
 800b0de:	61da      	str	r2, [r3, #28]
    tank_black.shaft_length = JETTANK_SHAFT_LENGTH;
 800b0e0:	4b27      	ldr	r3, [pc, #156]	@ (800b180 <chassis_init+0xe4>)
 800b0e2:	4a25      	ldr	r2, [pc, #148]	@ (800b178 <chassis_init+0xdc>)
 800b0e4:	619a      	str	r2, [r3, #24]
    tank_black.set_motors = tankblack_set_motors;
 800b0e6:	4b26      	ldr	r3, [pc, #152]	@ (800b180 <chassis_init+0xe4>)
 800b0e8:	4a26      	ldr	r2, [pc, #152]	@ (800b184 <chassis_init+0xe8>)
 800b0ea:	625a      	str	r2, [r3, #36]	@ 0x24

    diff_chassis_object_init(&ti4wd);
 800b0ec:	4826      	ldr	r0, [pc, #152]	@ (800b188 <chassis_init+0xec>)
 800b0ee:	f7fe fda7 	bl	8009c40 <diff_chassis_object_init>
    ti4wd.base.chassis_type = CHASSIS_TYPE_TI4WD;
 800b0f2:	4b25      	ldr	r3, [pc, #148]	@ (800b188 <chassis_init+0xec>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	701a      	strb	r2, [r3, #0]
    ti4wd.correction_factor = TI4WD_CORRECITION_FACTOR;
 800b0f8:	4b23      	ldr	r3, [pc, #140]	@ (800b188 <chassis_init+0xec>)
 800b0fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b0fe:	621a      	str	r2, [r3, #32]
    ti4wd.wheel_diameter = TI4WD_WHEEL_DIAMETER;
 800b100:	4b21      	ldr	r3, [pc, #132]	@ (800b188 <chassis_init+0xec>)
 800b102:	4a22      	ldr	r2, [pc, #136]	@ (800b18c <chassis_init+0xf0>)
 800b104:	61da      	str	r2, [r3, #28]
    ti4wd.shaft_length = TI4WD_SHAFT_LENGTH;
 800b106:	4b20      	ldr	r3, [pc, #128]	@ (800b188 <chassis_init+0xec>)
 800b108:	4a21      	ldr	r2, [pc, #132]	@ (800b190 <chassis_init+0xf4>)
 800b10a:	619a      	str	r2, [r3, #24]
    ti4wd.set_motors = ti4wd_set_motors;
 800b10c:	4b1e      	ldr	r3, [pc, #120]	@ (800b188 <chassis_init+0xec>)
 800b10e:	4a21      	ldr	r2, [pc, #132]	@ (800b194 <chassis_init+0xf8>)
 800b110:	625a      	str	r2, [r3, #36]	@ 0x24

    mecanum_chassis_object_init(&jetauto);
 800b112:	4821      	ldr	r0, [pc, #132]	@ (800b198 <chassis_init+0xfc>)
 800b114:	f7fe feda 	bl	8009ecc <mecanum_chassis_object_init>
    jetauto.base.chassis_type = CHASSIS_TYPE_JETAUTO;
 800b118:	4b1f      	ldr	r3, [pc, #124]	@ (800b198 <chassis_init+0xfc>)
 800b11a:	2204      	movs	r2, #4
 800b11c:	701a      	strb	r2, [r3, #0]
    jetauto.correction_factor = JETAUTO_CORRECITION_FACTOR;
 800b11e:	4b1e      	ldr	r3, [pc, #120]	@ (800b198 <chassis_init+0xfc>)
 800b120:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b124:	621a      	str	r2, [r3, #32]
    jetauto.wheel_diameter = JETAUTO_WHEEL_DIAMETER;
 800b126:	4b1c      	ldr	r3, [pc, #112]	@ (800b198 <chassis_init+0xfc>)
 800b128:	4a1c      	ldr	r2, [pc, #112]	@ (800b19c <chassis_init+0x100>)
 800b12a:	61da      	str	r2, [r3, #28]
    jetauto.shaft_length = JETAUTO_SHAFT_LENGTH;
 800b12c:	4b1a      	ldr	r3, [pc, #104]	@ (800b198 <chassis_init+0xfc>)
 800b12e:	4a1c      	ldr	r2, [pc, #112]	@ (800b1a0 <chassis_init+0x104>)
 800b130:	619a      	str	r2, [r3, #24]
    jetauto.wheelbase = JETAUTO_WHEELBASE;
 800b132:	4b19      	ldr	r3, [pc, #100]	@ (800b198 <chassis_init+0xfc>)
 800b134:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a4 <chassis_init+0x108>)
 800b136:	615a      	str	r2, [r3, #20]
    jetauto.set_motors = jetauto_set_motors;
 800b138:	4b17      	ldr	r3, [pc, #92]	@ (800b198 <chassis_init+0xfc>)
 800b13a:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a8 <chassis_init+0x10c>)
 800b13c:	625a      	str	r2, [r3, #36]	@ 0x24
		
	ackermann_chassis_object_init(&jetacker);
 800b13e:	481b      	ldr	r0, [pc, #108]	@ (800b1ac <chassis_init+0x110>)
 800b140:	f7fe fca6 	bl	8009a90 <ackermann_chassis_object_init>
    jetacker.base.chassis_type = CHASSIS_TYPE_JETACKER;
 800b144:	4b19      	ldr	r3, [pc, #100]	@ (800b1ac <chassis_init+0x110>)
 800b146:	2205      	movs	r2, #5
 800b148:	701a      	strb	r2, [r3, #0]
    jetacker.correction_factor = JETACKER_CORRECITION_FACTOR;
 800b14a:	4b18      	ldr	r3, [pc, #96]	@ (800b1ac <chassis_init+0x110>)
 800b14c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b150:	621a      	str	r2, [r3, #32]
    jetacker.wheel_diameter = JETACKER_WHEEL_DIAMETER;
 800b152:	4b16      	ldr	r3, [pc, #88]	@ (800b1ac <chassis_init+0x110>)
 800b154:	4a16      	ldr	r2, [pc, #88]	@ (800b1b0 <chassis_init+0x114>)
 800b156:	61da      	str	r2, [r3, #28]
    jetacker.shaft_length = JETACKER_SHAFT_LENGTH;
 800b158:	4b14      	ldr	r3, [pc, #80]	@ (800b1ac <chassis_init+0x110>)
 800b15a:	4a16      	ldr	r2, [pc, #88]	@ (800b1b4 <chassis_init+0x118>)
 800b15c:	619a      	str	r2, [r3, #24]
    jetacker.wheelbase = JETACKER_WHEELBASE;
 800b15e:	4b13      	ldr	r3, [pc, #76]	@ (800b1ac <chassis_init+0x110>)
 800b160:	4a15      	ldr	r2, [pc, #84]	@ (800b1b8 <chassis_init+0x11c>)
 800b162:	615a      	str	r2, [r3, #20]
    jetacker.set_motors = jetacker_set_motors;
 800b164:	4b11      	ldr	r3, [pc, #68]	@ (800b1ac <chassis_init+0x110>)
 800b166:	4a15      	ldr	r2, [pc, #84]	@ (800b1bc <chassis_init+0x120>)
 800b168:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800b16a:	bf00      	nop
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20003944 	.word	0x20003944
 800b174:	42580000 	.word	0x42580000
 800b178:	434bcccd 	.word	0x434bcccd
 800b17c:	0800af01 	.word	0x0800af01
 800b180:	2000396c 	.word	0x2000396c
 800b184:	0800af41 	.word	0x0800af41
 800b188:	20003994 	.word	0x20003994
 800b18c:	42340000 	.word	0x42340000
 800b190:	43010000 	.word	0x43010000
 800b194:	0800af81 	.word	0x0800af81
 800b198:	200039bc 	.word	0x200039bc
 800b19c:	42c10000 	.word	0x42c10000
 800b1a0:	435a0000 	.word	0x435a0000
 800b1a4:	43430000 	.word	0x43430000
 800b1a8:	0800afe5 	.word	0x0800afe5
 800b1ac:	200039e4 	.word	0x200039e4
 800b1b0:	42c80000 	.word	0x42c80000
 800b1b4:	4355547b 	.word	0x4355547b
 800b1b8:	4360eb85 	.word	0x4360eb85
 800b1bc:	0800b051 	.word	0x0800b051

0800b1c0 <set_chassis_type>:

void set_chassis_type(uint8_t chassis_type)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	71fb      	strb	r3, [r7, #7]
    switch(chassis_type) {
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	f200 809a 	bhi.w	800b308 <set_chassis_type+0x148>
 800b1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <set_chassis_type+0x1c>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b299 	.word	0x0800b299
 800b1e0:	0800b2d1 	.word	0x0800b2d1
 800b1e4:	0800b261 	.word	0x0800b261
 800b1e8:	0800b1f1 	.word	0x0800b1f1
 800b1ec:	0800b229 	.word	0x0800b229
        case CHASSIS_TYPE_JETAUTO:
            chassis = (ChassisTypeDef*)&jetauto;
 800b1f0:	4b48      	ldr	r3, [pc, #288]	@ (800b314 <set_chassis_type+0x154>)
 800b1f2:	4a49      	ldr	r2, [pc, #292]	@ (800b318 <set_chassis_type+0x158>)
 800b1f4:	601a      	str	r2, [r3, #0]
            set_motor_type(motors[0], MOTOR_TYPE_JGB520);
 800b1f6:	4b49      	ldr	r3, [pc, #292]	@ (800b31c <set_chassis_type+0x15c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 f8c9 	bl	800b394 <set_motor_type>
            set_motor_type(motors[1], MOTOR_TYPE_JGB520);
 800b202:	4b46      	ldr	r3, [pc, #280]	@ (800b31c <set_chassis_type+0x15c>)
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	2100      	movs	r1, #0
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 f8c3 	bl	800b394 <set_motor_type>
            set_motor_type(motors[2], MOTOR_TYPE_JGB520);
 800b20e:	4b43      	ldr	r3, [pc, #268]	@ (800b31c <set_chassis_type+0x15c>)
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	2100      	movs	r1, #0
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f8bd 	bl	800b394 <set_motor_type>
            set_motor_type(motors[3], MOTOR_TYPE_JGB520);
 800b21a:	4b40      	ldr	r3, [pc, #256]	@ (800b31c <set_chassis_type+0x15c>)
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	2100      	movs	r1, #0
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f8b7 	bl	800b394 <set_motor_type>
            break;
 800b226:	e070      	b.n	800b30a <set_chassis_type+0x14a>
		case CHASSIS_TYPE_JETACKER:
            chassis = (ChassisTypeDef*)&jetacker;
 800b228:	4b3a      	ldr	r3, [pc, #232]	@ (800b314 <set_chassis_type+0x154>)
 800b22a:	4a3d      	ldr	r2, [pc, #244]	@ (800b320 <set_chassis_type+0x160>)
 800b22c:	601a      	str	r2, [r3, #0]
            set_motor_type(motors[0], MOTOR_TYPE_JGB520);
 800b22e:	4b3b      	ldr	r3, [pc, #236]	@ (800b31c <set_chassis_type+0x15c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2100      	movs	r1, #0
 800b234:	4618      	mov	r0, r3
 800b236:	f000 f8ad 	bl	800b394 <set_motor_type>
            set_motor_type(motors[1], MOTOR_TYPE_JGB520);
 800b23a:	4b38      	ldr	r3, [pc, #224]	@ (800b31c <set_chassis_type+0x15c>)
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f8a7 	bl	800b394 <set_motor_type>
            set_motor_type(motors[2], MOTOR_TYPE_JGB520);
 800b246:	4b35      	ldr	r3, [pc, #212]	@ (800b31c <set_chassis_type+0x15c>)
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 f8a1 	bl	800b394 <set_motor_type>
            set_motor_type(motors[3], MOTOR_TYPE_JGB520);
 800b252:	4b32      	ldr	r3, [pc, #200]	@ (800b31c <set_chassis_type+0x15c>)
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	2100      	movs	r1, #0
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 f89b 	bl	800b394 <set_motor_type>
            break;
 800b25e:	e054      	b.n	800b30a <set_chassis_type+0x14a>

        case CHASSIS_TYPE_JETTANK:
            chassis = (ChassisTypeDef*)&jetank;
 800b260:	4b2c      	ldr	r3, [pc, #176]	@ (800b314 <set_chassis_type+0x154>)
 800b262:	4a30      	ldr	r2, [pc, #192]	@ (800b324 <set_chassis_type+0x164>)
 800b264:	601a      	str	r2, [r3, #0]
            set_motor_type(motors[0], MOTOR_TYPE_JGB528);
 800b266:	4b2d      	ldr	r3, [pc, #180]	@ (800b31c <set_chassis_type+0x15c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2103      	movs	r1, #3
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 f891 	bl	800b394 <set_motor_type>
            set_motor_type(motors[1], MOTOR_TYPE_JGB528);
 800b272:	4b2a      	ldr	r3, [pc, #168]	@ (800b31c <set_chassis_type+0x15c>)
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	2103      	movs	r1, #3
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f88b 	bl	800b394 <set_motor_type>
            set_motor_type(motors[2], MOTOR_TYPE_JGB528);
 800b27e:	4b27      	ldr	r3, [pc, #156]	@ (800b31c <set_chassis_type+0x15c>)
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	2103      	movs	r1, #3
 800b284:	4618      	mov	r0, r3
 800b286:	f000 f885 	bl	800b394 <set_motor_type>
            set_motor_type(motors[3], MOTOR_TYPE_JGB528);
 800b28a:	4b24      	ldr	r3, [pc, #144]	@ (800b31c <set_chassis_type+0x15c>)
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	2103      	movs	r1, #3
 800b290:	4618      	mov	r0, r3
 800b292:	f000 f87f 	bl	800b394 <set_motor_type>
            break;
 800b296:	e038      	b.n	800b30a <set_chassis_type+0x14a>
        case CHASSIS_TYPE_TI4WD:
            chassis = (ChassisTypeDef*)&ti4wd;
 800b298:	4b1e      	ldr	r3, [pc, #120]	@ (800b314 <set_chassis_type+0x154>)
 800b29a:	4a23      	ldr	r2, [pc, #140]	@ (800b328 <set_chassis_type+0x168>)
 800b29c:	601a      	str	r2, [r3, #0]
            set_motor_type(motors[0], MOTOR_TYPE_JGA27);
 800b29e:	4b1f      	ldr	r3, [pc, #124]	@ (800b31c <set_chassis_type+0x15c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2102      	movs	r1, #2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f875 	bl	800b394 <set_motor_type>
            set_motor_type(motors[1], MOTOR_TYPE_JGA27);
 800b2aa:	4b1c      	ldr	r3, [pc, #112]	@ (800b31c <set_chassis_type+0x15c>)
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 f86f 	bl	800b394 <set_motor_type>
            set_motor_type(motors[2], MOTOR_TYPE_JGA27);
 800b2b6:	4b19      	ldr	r3, [pc, #100]	@ (800b31c <set_chassis_type+0x15c>)
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	2102      	movs	r1, #2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 f869 	bl	800b394 <set_motor_type>
            set_motor_type(motors[3], MOTOR_TYPE_JGA27);
 800b2c2:	4b16      	ldr	r3, [pc, #88]	@ (800b31c <set_chassis_type+0x15c>)
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f863 	bl	800b394 <set_motor_type>
			break;
 800b2ce:	e01c      	b.n	800b30a <set_chassis_type+0x14a>
        case CHASSIS_TYPE_TANKBLACK:
            chassis = (ChassisTypeDef*)&tank_black;
 800b2d0:	4b10      	ldr	r3, [pc, #64]	@ (800b314 <set_chassis_type+0x154>)
 800b2d2:	4a16      	ldr	r2, [pc, #88]	@ (800b32c <set_chassis_type+0x16c>)
 800b2d4:	601a      	str	r2, [r3, #0]
            set_motor_type(motors[0], MOTOR_TYPE_JGB37);
 800b2d6:	4b11      	ldr	r3, [pc, #68]	@ (800b31c <set_chassis_type+0x15c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2101      	movs	r1, #1
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 f859 	bl	800b394 <set_motor_type>
            set_motor_type(motors[1], MOTOR_TYPE_JGB37);
 800b2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b31c <set_chassis_type+0x15c>)
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 f853 	bl	800b394 <set_motor_type>
            set_motor_type(motors[2], MOTOR_TYPE_JGB37);
 800b2ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b31c <set_chassis_type+0x15c>)
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 f84d 	bl	800b394 <set_motor_type>
            set_motor_type(motors[3], MOTOR_TYPE_JGB37);
 800b2fa:	4b08      	ldr	r3, [pc, #32]	@ (800b31c <set_chassis_type+0x15c>)
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	2101      	movs	r1, #1
 800b300:	4618      	mov	r0, r3
 800b302:	f000 f847 	bl	800b394 <set_motor_type>
			break;
 800b306:	e000      	b.n	800b30a <set_chassis_type+0x14a>
        default:
            break;
 800b308:	bf00      	nop
    }
}
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	2000000c 	.word	0x2000000c
 800b318:	200039bc 	.word	0x200039bc
 800b31c:	2000d210 	.word	0x2000d210
 800b320:	200039e4 	.word	0x200039e4
 800b324:	20003944 	.word	0x20003944
 800b328:	20003994 	.word	0x20003994
 800b32c:	2000396c 	.word	0x2000396c

0800b330 <led_timer_callback>:
  * @brief 定时器回调
  * @detials 定时刷新LED灯状态
  * @retval None.
  *
*/
void led_timer_callback(void *argument) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
    led_task_handler(leds[0], LED_TASK_PERIOD);
 800b338:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <led_timer_callback+0x1c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	211e      	movs	r1, #30
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fa8e 	bl	800a860 <led_task_handler>
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20003a0c 	.word	0x20003a0c

0800b350 <set_motor_param>:
static void motor2_set_pulse(EncoderMotorObjectTypeDef *self, int speed);
static void motor3_set_pulse(EncoderMotorObjectTypeDef *self, int speed);
static void motor4_set_pulse(EncoderMotorObjectTypeDef *self, int speed);

void set_motor_param(EncoderMotorObjectTypeDef *motor, int32_t tpc, float rps_limit, float kp, float ki, float kd)
{
 800b350:	b480      	push	{r7}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6178      	str	r0, [r7, #20]
 800b358:	6139      	str	r1, [r7, #16]
 800b35a:	ed87 0a03 	vstr	s0, [r7, #12]
 800b35e:	edc7 0a02 	vstr	s1, [r7, #8]
 800b362:	ed87 1a01 	vstr	s2, [r7, #4]
 800b366:	edc7 1a00 	vstr	s3, [r7]
    motor->ticks_per_circle = tpc;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	63da      	str	r2, [r3, #60]	@ 0x3c
    motor->rps_limit = rps_limit;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->pid_controller.kp = kp;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->pid_controller.ki = ki;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	629a      	str	r2, [r3, #40]	@ 0x28
    motor->pid_controller.kd = kd;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b388:	bf00      	nop
 800b38a:	371c      	adds	r7, #28
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <set_motor_type>:

void set_motor_type(EncoderMotorObjectTypeDef *motor, MotorTypeEnum type) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
	switch(type) {
 800b3a0:	78fb      	ldrb	r3, [r7, #3]
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d842      	bhi.n	800b42c <set_motor_type+0x98>
 800b3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ac <set_motor_type+0x18>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3bd 	.word	0x0800b3bd
 800b3b0:	0800b3d9 	.word	0x0800b3d9
 800b3b4:	0800b3f5 	.word	0x0800b3f5
 800b3b8:	0800b411 	.word	0x0800b411
		case MOTOR_TYPE_JGB520:
			set_motor_param(motor, MOTOR_JGB520_TICKS_PER_CIRCLE, MOTOR_JGB520_RPS_LIMIT, MOTOR_JGB520_PID_KP, MOTOR_JGB520_PID_KI, MOTOR_JGB520_PID_KD);
 800b3bc:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 800b438 <set_motor_type+0xa4>
 800b3c0:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800b43c <set_motor_type+0xa8>
 800b3c4:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 800b440 <set_motor_type+0xac>
 800b3c8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b3cc:	f640 7178 	movw	r1, #3960	@ 0xf78
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff ffbd 	bl	800b350 <set_motor_param>
			break;
 800b3d6:	e02a      	b.n	800b42e <set_motor_type+0x9a>
		case MOTOR_TYPE_JGB37:
			set_motor_param(motor, MOTOR_JGB37_TICKS_PER_CIRCLE, MOTOR_JGB37_RPS_LIMIT, MOTOR_JGB37_PID_KP, MOTOR_JGB37_PID_KI, MOTOR_JGB37_PID_KD);
 800b3d8:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800b3dc:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800b3e0:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800b444 <set_motor_type+0xb0>
 800b3e4:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800b3e8:	f240 71bc 	movw	r1, #1980	@ 0x7bc
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff ffaf 	bl	800b350 <set_motor_param>
			break;
 800b3f2:	e01c      	b.n	800b42e <set_motor_type+0x9a>
		case MOTOR_TYPE_JGA27:
			set_motor_param(motor, MOTOR_JGA27_TICKS_PER_CIRCLE, MOTOR_JGA27_RPS_LIMIT, MOTOR_JGA27_PID_KP, MOTOR_JGA27_PID_KI, MOTOR_JGA27_PID_KD);
 800b3f4:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 800b3f8:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 800b3fc:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800b448 <set_motor_type+0xb4>
 800b400:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 800b404:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff ffa1 	bl	800b350 <set_motor_param>
			break;
 800b40e:	e00e      	b.n	800b42e <set_motor_type+0x9a>
		case MOTOR_TYPE_JGB528:
			set_motor_param(motor, MOTOR_JGB528_TICKS_PER_CIRCLE, MOTOR_JGB528_RPS_LIMIT, MOTOR_JGB528_PID_KP, MOTOR_JGB528_PID_KI, MOTOR_JGB528_PID_KD);
 800b410:	eef2 1a08 	vmov.f32	s3, #40	@ 0x41400000  12.0
 800b414:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800b418:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800b44c <set_motor_type+0xb8>
 800b41c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800b450 <set_motor_type+0xbc>
 800b420:	f241 6184 	movw	r1, #5764	@ 0x1684
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff ff93 	bl	800b350 <set_motor_param>
			break;
 800b42a:	e000      	b.n	800b42e <set_motor_type+0x9a>
		default:
			break;
 800b42c:	bf00      	nop
	}
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	4019999a 	.word	0x4019999a
 800b43c:	40266666 	.word	0x40266666
 800b440:	427c0000 	.word	0x427c0000
 800b444:	42200000 	.word	0x42200000
 800b448:	c2100000 	.word	0xc2100000
 800b44c:	43960000 	.word	0x43960000
 800b450:	3f8ccccd 	.word	0x3f8ccccd

0800b454 <motors_init>:

void motors_init(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; ++i) {
 800b45a:	2300      	movs	r3, #0
 800b45c:	607b      	str	r3, [r7, #4]
 800b45e:	e040      	b.n	800b4e2 <motors_init+0x8e>
        motors[i] = LWMEM_CCM_MALLOC(sizeof( EncoderMotorObjectTypeDef));
 800b460:	2248      	movs	r2, #72	@ 0x48
 800b462:	4998      	ldr	r1, [pc, #608]	@ (800b6c4 <motors_init+0x270>)
 800b464:	2000      	movs	r0, #0
 800b466:	f005 f905 	bl	8010674 <lwmem_malloc_ex>
 800b46a:	4602      	mov	r2, r0
 800b46c:	4996      	ldr	r1, [pc, #600]	@ (800b6c8 <motors_init+0x274>)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        encoder_motor_object_init(motors[i]);
 800b474:	4a94      	ldr	r2, [pc, #592]	@ (800b6c8 <motors_init+0x274>)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff f9b9 	bl	800a7f4 <encoder_motor_object_init>
		motors[i]->ticks_overflow = 60000;
 800b482:	4a91      	ldr	r2, [pc, #580]	@ (800b6c8 <motors_init+0x274>)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b48a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800b48e:	611a      	str	r2, [r3, #16]
        motors[i]->ticks_per_circle = MOTOR_DEFAULT_TICKS_PER_CIRCLE;
 800b490:	4a8d      	ldr	r2, [pc, #564]	@ (800b6c8 <motors_init+0x274>)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b498:	f640 7278 	movw	r2, #3960	@ 0xf78
 800b49c:	63da      	str	r2, [r3, #60]	@ 0x3c
        motors[i]->rps_limit = MOTOR_DEFAULT_RPS_LIMIT;
 800b49e:	4a8a      	ldr	r2, [pc, #552]	@ (800b6c8 <motors_init+0x274>)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4a6:	4a89      	ldr	r2, [pc, #548]	@ (800b6cc <motors_init+0x278>)
 800b4a8:	641a      	str	r2, [r3, #64]	@ 0x40
        motors[i]->pid_controller.set_point = 0.0f;
 800b4aa:	4a87      	ldr	r2, [pc, #540]	@ (800b6c8 <motors_init+0x274>)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	621a      	str	r2, [r3, #32]
        motors[i]->pid_controller.kp = MOTOR_DEFAULT_PID_KP;
 800b4b8:	4a83      	ldr	r2, [pc, #524]	@ (800b6c8 <motors_init+0x274>)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c0:	4a83      	ldr	r2, [pc, #524]	@ (800b6d0 <motors_init+0x27c>)
 800b4c2:	625a      	str	r2, [r3, #36]	@ 0x24
        motors[i]->pid_controller.ki = MOTOR_DEFAULT_PID_KI;
 800b4c4:	4a80      	ldr	r2, [pc, #512]	@ (800b6c8 <motors_init+0x274>)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4cc:	4a81      	ldr	r2, [pc, #516]	@ (800b6d4 <motors_init+0x280>)
 800b4ce:	629a      	str	r2, [r3, #40]	@ 0x28
        motors[i]->pid_controller.kd = MOTOR_DEFAULT_PID_KD;
 800b4d0:	4a7d      	ldr	r2, [pc, #500]	@ (800b6c8 <motors_init+0x274>)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4d8:	4a7f      	ldr	r2, [pc, #508]	@ (800b6d8 <motors_init+0x284>)
 800b4da:	62da      	str	r2, [r3, #44]	@ 0x2c
    for(int i = 0; i < 4; ++i) {
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	607b      	str	r3, [r7, #4]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b03      	cmp	r3, #3
 800b4e6:	ddbb      	ble.n	800b460 <motors_init+0xc>
    }

    /* 马达 1 */
    motors[0]->set_pulse = motor1_set_pulse;
 800b4e8:	4b77      	ldr	r3, [pc, #476]	@ (800b6c8 <motors_init+0x274>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a7b      	ldr	r2, [pc, #492]	@ (800b6dc <motors_init+0x288>)
 800b4ee:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800b4f0:	4b7b      	ldr	r3, [pc, #492]	@ (800b6e0 <motors_init+0x28c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE(&htim1);
 800b4f8:	4b79      	ldr	r3, [pc, #484]	@ (800b6e0 <motors_init+0x28c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	4b78      	ldr	r3, [pc, #480]	@ (800b6e0 <motors_init+0x28c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f042 0201 	orr.w	r2, r2, #1
 800b506:	601a      	str	r2, [r3, #0]
    __HAL_TIM_MOE_ENABLE(&htim1);
 800b508:	4b75      	ldr	r3, [pc, #468]	@ (800b6e0 <motors_init+0x28c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b50e:	4b74      	ldr	r3, [pc, #464]	@ (800b6e0 <motors_init+0x28c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b516:	645a      	str	r2, [r3, #68]	@ 0x44

    /* 编码器 */
    __HAL_TIM_SET_COUNTER(&htim5, 0);
 800b518:	4b72      	ldr	r3, [pc, #456]	@ (800b6e4 <motors_init+0x290>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2200      	movs	r2, #0
 800b51e:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 800b520:	4b70      	ldr	r3, [pc, #448]	@ (800b6e4 <motors_init+0x290>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f06f 0201 	mvn.w	r2, #1
 800b528:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 800b52a:	4b6e      	ldr	r3, [pc, #440]	@ (800b6e4 <motors_init+0x290>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	4b6c      	ldr	r3, [pc, #432]	@ (800b6e4 <motors_init+0x290>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0201 	orr.w	r2, r2, #1
 800b538:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(&htim5);
 800b53a:	4b6a      	ldr	r3, [pc, #424]	@ (800b6e4 <motors_init+0x290>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	4b68      	ldr	r3, [pc, #416]	@ (800b6e4 <motors_init+0x290>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f042 0201 	orr.w	r2, r2, #1
 800b548:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800b54a:	213c      	movs	r1, #60	@ 0x3c
 800b54c:	4865      	ldr	r0, [pc, #404]	@ (800b6e4 <motors_init+0x290>)
 800b54e:	f7fb fa79 	bl	8006a44 <HAL_TIM_Encoder_Start>


    /* 马达 2 */
    motors[1]->set_pulse = motor2_set_pulse;
 800b552:	4b5d      	ldr	r3, [pc, #372]	@ (800b6c8 <motors_init+0x274>)
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	4a64      	ldr	r2, [pc, #400]	@ (800b6e8 <motors_init+0x294>)
 800b558:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800b55a:	4b61      	ldr	r3, [pc, #388]	@ (800b6e0 <motors_init+0x28c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2200      	movs	r2, #0
 800b560:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE(&htim1);
 800b562:	4b5f      	ldr	r3, [pc, #380]	@ (800b6e0 <motors_init+0x28c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	4b5d      	ldr	r3, [pc, #372]	@ (800b6e0 <motors_init+0x28c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f042 0201 	orr.w	r2, r2, #1
 800b570:	601a      	str	r2, [r3, #0]
    __HAL_TIM_MOE_ENABLE(&htim1);
 800b572:	4b5b      	ldr	r3, [pc, #364]	@ (800b6e0 <motors_init+0x28c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b578:	4b59      	ldr	r3, [pc, #356]	@ (800b6e0 <motors_init+0x28c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b580:	645a      	str	r2, [r3, #68]	@ 0x44

    /* 编码器 */
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800b582:	4b5a      	ldr	r3, [pc, #360]	@ (800b6ec <motors_init+0x298>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2200      	movs	r2, #0
 800b588:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800b58a:	4b58      	ldr	r3, [pc, #352]	@ (800b6ec <motors_init+0x298>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f06f 0201 	mvn.w	r2, #1
 800b592:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800b594:	4b55      	ldr	r3, [pc, #340]	@ (800b6ec <motors_init+0x298>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	4b54      	ldr	r3, [pc, #336]	@ (800b6ec <motors_init+0x298>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(&htim2);
 800b5a4:	4b51      	ldr	r3, [pc, #324]	@ (800b6ec <motors_init+0x298>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4b50      	ldr	r3, [pc, #320]	@ (800b6ec <motors_init+0x298>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0201 	orr.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800b5b4:	213c      	movs	r1, #60	@ 0x3c
 800b5b6:	484d      	ldr	r0, [pc, #308]	@ (800b6ec <motors_init+0x298>)
 800b5b8:	f7fb fa44 	bl	8006a44 <HAL_TIM_Encoder_Start>

    /* 马达 3 */
    motors[2]->set_pulse = motor3_set_pulse;
 800b5bc:	4b42      	ldr	r3, [pc, #264]	@ (800b6c8 <motors_init+0x274>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	4a4b      	ldr	r2, [pc, #300]	@ (800b6f0 <motors_init+0x29c>)
 800b5c2:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_SET_COUNTER(&htim9, 0);
 800b5c4:	4b4b      	ldr	r3, [pc, #300]	@ (800b6f4 <motors_init+0x2a0>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE(&htim9);
 800b5cc:	4b49      	ldr	r3, [pc, #292]	@ (800b6f4 <motors_init+0x2a0>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4b48      	ldr	r3, [pc, #288]	@ (800b6f4 <motors_init+0x2a0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f042 0201 	orr.w	r2, r2, #1
 800b5da:	601a      	str	r2, [r3, #0]
    __HAL_TIM_MOE_ENABLE(&htim9);
 800b5dc:	4b45      	ldr	r3, [pc, #276]	@ (800b6f4 <motors_init+0x2a0>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5e2:	4b44      	ldr	r3, [pc, #272]	@ (800b6f4 <motors_init+0x2a0>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b5ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* 编码器 */
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 800b5ec:	4b42      	ldr	r3, [pc, #264]	@ (800b6f8 <motors_init+0x2a4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 800b5f4:	4b40      	ldr	r3, [pc, #256]	@ (800b6f8 <motors_init+0x2a4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f06f 0201 	mvn.w	r2, #1
 800b5fc:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800b5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800b6f8 <motors_init+0x2a4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	4b3c      	ldr	r3, [pc, #240]	@ (800b6f8 <motors_init+0x2a4>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0201 	orr.w	r2, r2, #1
 800b60c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(&htim4);
 800b60e:	4b3a      	ldr	r3, [pc, #232]	@ (800b6f8 <motors_init+0x2a4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	4b38      	ldr	r3, [pc, #224]	@ (800b6f8 <motors_init+0x2a4>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f042 0201 	orr.w	r2, r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800b61e:	213c      	movs	r1, #60	@ 0x3c
 800b620:	4835      	ldr	r0, [pc, #212]	@ (800b6f8 <motors_init+0x2a4>)
 800b622:	f7fb fa0f 	bl	8006a44 <HAL_TIM_Encoder_Start>

    /* 马达 4 */
    motors[3]->set_pulse = motor4_set_pulse;
 800b626:	4b28      	ldr	r3, [pc, #160]	@ (800b6c8 <motors_init+0x274>)
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	4a34      	ldr	r2, [pc, #208]	@ (800b6fc <motors_init+0x2a8>)
 800b62c:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_SET_COUNTER(&htim10, 0);
 800b62e:	4b34      	ldr	r3, [pc, #208]	@ (800b700 <motors_init+0x2ac>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2200      	movs	r2, #0
 800b634:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim11, 0);
 800b636:	4b33      	ldr	r3, [pc, #204]	@ (800b704 <motors_init+0x2b0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE(&htim10);
 800b63e:	4b30      	ldr	r3, [pc, #192]	@ (800b700 <motors_init+0x2ac>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	4b2e      	ldr	r3, [pc, #184]	@ (800b700 <motors_init+0x2ac>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f042 0201 	orr.w	r2, r2, #1
 800b64c:	601a      	str	r2, [r3, #0]
    __HAL_TIM_ENABLE(&htim11);
 800b64e:	4b2d      	ldr	r3, [pc, #180]	@ (800b704 <motors_init+0x2b0>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b2b      	ldr	r3, [pc, #172]	@ (800b704 <motors_init+0x2b0>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f042 0201 	orr.w	r2, r2, #1
 800b65c:	601a      	str	r2, [r3, #0]
    __HAL_TIM_MOE_ENABLE(&htim10);
 800b65e:	4b28      	ldr	r3, [pc, #160]	@ (800b700 <motors_init+0x2ac>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b664:	4b26      	ldr	r3, [pc, #152]	@ (800b700 <motors_init+0x2ac>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b66c:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_MOE_ENABLE(&htim11);
 800b66e:	4b25      	ldr	r3, [pc, #148]	@ (800b704 <motors_init+0x2b0>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b674:	4b23      	ldr	r3, [pc, #140]	@ (800b704 <motors_init+0x2b0>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b67c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* 编码器 */
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800b67e:	4b22      	ldr	r3, [pc, #136]	@ (800b708 <motors_init+0x2b4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800b686:	4b20      	ldr	r3, [pc, #128]	@ (800b708 <motors_init+0x2b4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f06f 0201 	mvn.w	r2, #1
 800b68e:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800b690:	4b1d      	ldr	r3, [pc, #116]	@ (800b708 <motors_init+0x2b4>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68da      	ldr	r2, [r3, #12]
 800b696:	4b1c      	ldr	r3, [pc, #112]	@ (800b708 <motors_init+0x2b4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0201 	orr.w	r2, r2, #1
 800b69e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(&htim3);
 800b6a0:	4b19      	ldr	r3, [pc, #100]	@ (800b708 <motors_init+0x2b4>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	4b18      	ldr	r3, [pc, #96]	@ (800b708 <motors_init+0x2b4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0201 	orr.w	r2, r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800b6b0:	213c      	movs	r1, #60	@ 0x3c
 800b6b2:	4811      	ldr	r0, [pc, #68]	@ (800b6f8 <motors_init+0x2a4>)
 800b6b4:	f7fb f9c6 	bl	8006a44 <HAL_TIM_Encoder_Start>


    // 测速更新定时器
    __HAL_TIM_SET_COUNTER(&htim7, 0);
 800b6b8:	4b14      	ldr	r3, [pc, #80]	@ (800b70c <motors_init+0x2b8>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	625a      	str	r2, [r3, #36]	@ 0x24
 800b6c0:	e026      	b.n	800b710 <motors_init+0x2bc>
 800b6c2:	bf00      	nop
 800b6c4:	20000010 	.word	0x20000010
 800b6c8:	2000d210 	.word	0x2000d210
 800b6cc:	3faccccd 	.word	0x3faccccd
 800b6d0:	427c0000 	.word	0x427c0000
 800b6d4:	40266666 	.word	0x40266666
 800b6d8:	4019999a 	.word	0x4019999a
 800b6dc:	0800b749 	.word	0x0800b749
 800b6e0:	20002958 	.word	0x20002958
 800b6e4:	20002c28 	.word	0x20002c28
 800b6e8:	0800b7b1 	.word	0x0800b7b1
 800b6ec:	20002a0c 	.word	0x20002a0c
 800b6f0:	0800b819 	.word	0x0800b819
 800b6f4:	20002d90 	.word	0x20002d90
 800b6f8:	20002b74 	.word	0x20002b74
 800b6fc:	0800b891 	.word	0x0800b891
 800b700:	20002e44 	.word	0x20002e44
 800b704:	20002ef8 	.word	0x20002ef8
 800b708:	20002ac0 	.word	0x20002ac0
 800b70c:	20002cdc 	.word	0x20002cdc
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 800b710:	4b0c      	ldr	r3, [pc, #48]	@ (800b744 <motors_init+0x2f0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f06f 0201 	mvn.w	r2, #1
 800b718:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 800b71a:	4b0a      	ldr	r3, [pc, #40]	@ (800b744 <motors_init+0x2f0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	4b08      	ldr	r3, [pc, #32]	@ (800b744 <motors_init+0x2f0>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f042 0201 	orr.w	r2, r2, #1
 800b728:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(&htim7);
 800b72a:	4b06      	ldr	r3, [pc, #24]	@ (800b744 <motors_init+0x2f0>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	4b04      	ldr	r3, [pc, #16]	@ (800b744 <motors_init+0x2f0>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f042 0201 	orr.w	r2, r2, #1
 800b738:	601a      	str	r2, [r3, #0]

    //packet_register_callback(&packet_controller, PACKET_FUNC_MOTOR, packet_handler);
}
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20002cdc 	.word	0x20002cdc

0800b748 <motor1_set_pulse>:

static void motor1_set_pulse(EncoderMotorObjectTypeDef *self, int speed)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
    if(speed > 0) {
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	dd08      	ble.n	800b76a <motor1_set_pulse+0x22>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800b758:	4b14      	ldr	r3, [pc, #80]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2200      	movs	r2, #0
 800b75e:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed);
 800b760:	4b12      	ldr	r3, [pc, #72]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	641a      	str	r2, [r3, #64]	@ 0x40
 800b768:	e014      	b.n	800b794 <motor1_set_pulse+0x4c>
    } else if(speed < 0) {
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da09      	bge.n	800b784 <motor1_set_pulse+0x3c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800b770:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2200      	movs	r2, #0
 800b776:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -speed);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	425a      	negs	r2, r3
 800b77c:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b782:	e007      	b.n	800b794 <motor1_set_pulse+0x4c>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800b784:	4b09      	ldr	r3, [pc, #36]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2200      	movs	r2, #0
 800b78a:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800b78c:	4b07      	ldr	r3, [pc, #28]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2200      	movs	r2, #0
 800b792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800b794:	2108      	movs	r1, #8
 800b796:	4805      	ldr	r0, [pc, #20]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b798:	f7fa ff68 	bl	800666c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800b79c:	210c      	movs	r1, #12
 800b79e:	4803      	ldr	r0, [pc, #12]	@ (800b7ac <motor1_set_pulse+0x64>)
 800b7a0:	f7fa ff64 	bl	800666c <HAL_TIM_PWM_Start>
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20002958 	.word	0x20002958

0800b7b0 <motor2_set_pulse>:


static void motor2_set_pulse(EncoderMotorObjectTypeDef *self, int speed)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
    if(speed > 0) {
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dd08      	ble.n	800b7d2 <motor2_set_pulse+0x22>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800b7c0:	4b14      	ldr	r3, [pc, #80]	@ (800b814 <motor2_set_pulse+0x64>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 800b7c8:	4b12      	ldr	r3, [pc, #72]	@ (800b814 <motor2_set_pulse+0x64>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800b7d0:	e014      	b.n	800b7fc <motor2_set_pulse+0x4c>
    } else if(speed < 0) {
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da09      	bge.n	800b7ec <motor2_set_pulse+0x3c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800b7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b814 <motor2_set_pulse+0x64>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -speed);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	425a      	negs	r2, r3
 800b7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b814 <motor2_set_pulse+0x64>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b7ea:	e007      	b.n	800b7fc <motor2_set_pulse+0x4c>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800b7ec:	4b09      	ldr	r3, [pc, #36]	@ (800b814 <motor2_set_pulse+0x64>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800b7f4:	4b07      	ldr	r3, [pc, #28]	@ (800b814 <motor2_set_pulse+0x64>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	4805      	ldr	r0, [pc, #20]	@ (800b814 <motor2_set_pulse+0x64>)
 800b800:	f7fa ff34 	bl	800666c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b804:	2104      	movs	r1, #4
 800b806:	4803      	ldr	r0, [pc, #12]	@ (800b814 <motor2_set_pulse+0x64>)
 800b808:	f7fa ff30 	bl	800666c <HAL_TIM_PWM_Start>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20002958 	.word	0x20002958

0800b818 <motor3_set_pulse>:

static void motor3_set_pulse(EncoderMotorObjectTypeDef *self, int speed)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 800b822:	2100      	movs	r1, #0
 800b824:	4819      	ldr	r0, [pc, #100]	@ (800b88c <motor3_set_pulse+0x74>)
 800b826:	f7fa ffe9 	bl	80067fc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_2);
 800b82a:	2104      	movs	r1, #4
 800b82c:	4817      	ldr	r0, [pc, #92]	@ (800b88c <motor3_set_pulse+0x74>)
 800b82e:	f7fa ffe5 	bl	80067fc <HAL_TIM_PWM_Stop>
    if(speed > 0) {
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd08      	ble.n	800b84a <motor3_set_pulse+0x32>
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 800b838:	4b14      	ldr	r3, [pc, #80]	@ (800b88c <motor3_set_pulse+0x74>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2200      	movs	r2, #0
 800b83e:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
 800b840:	4b12      	ldr	r3, [pc, #72]	@ (800b88c <motor3_set_pulse+0x74>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	635a      	str	r2, [r3, #52]	@ 0x34
 800b848:	e014      	b.n	800b874 <motor3_set_pulse+0x5c>
    } else if(speed < 0) {
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	da09      	bge.n	800b864 <motor3_set_pulse+0x4c>
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800b850:	4b0e      	ldr	r3, [pc, #56]	@ (800b88c <motor3_set_pulse+0x74>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2200      	movs	r2, #0
 800b856:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, -speed);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	425a      	negs	r2, r3
 800b85c:	4b0b      	ldr	r3, [pc, #44]	@ (800b88c <motor3_set_pulse+0x74>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	639a      	str	r2, [r3, #56]	@ 0x38
 800b862:	e007      	b.n	800b874 <motor3_set_pulse+0x5c>
    } else {
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800b864:	4b09      	ldr	r3, [pc, #36]	@ (800b88c <motor3_set_pulse+0x74>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2200      	movs	r2, #0
 800b86a:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 800b86c:	4b07      	ldr	r3, [pc, #28]	@ (800b88c <motor3_set_pulse+0x74>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2200      	movs	r2, #0
 800b872:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800b874:	2100      	movs	r1, #0
 800b876:	4805      	ldr	r0, [pc, #20]	@ (800b88c <motor3_set_pulse+0x74>)
 800b878:	f7fa fef8 	bl	800666c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800b87c:	2104      	movs	r1, #4
 800b87e:	4803      	ldr	r0, [pc, #12]	@ (800b88c <motor3_set_pulse+0x74>)
 800b880:	f7fa fef4 	bl	800666c <HAL_TIM_PWM_Start>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20002d90 	.word	0x20002d90

0800b890 <motor4_set_pulse>:

static void motor4_set_pulse(EncoderMotorObjectTypeDef *self, int speed)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 800b89a:	2100      	movs	r1, #0
 800b89c:	4819      	ldr	r0, [pc, #100]	@ (800b904 <motor4_set_pulse+0x74>)
 800b89e:	f7fa ffad 	bl	80067fc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	4818      	ldr	r0, [pc, #96]	@ (800b908 <motor4_set_pulse+0x78>)
 800b8a6:	f7fa ffa9 	bl	80067fc <HAL_TIM_PWM_Stop>
    if(speed > 0) {
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	dd08      	ble.n	800b8c2 <motor4_set_pulse+0x32>
        __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 800b8b0:	4b14      	ldr	r3, [pc, #80]	@ (800b904 <motor4_set_pulse+0x74>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, speed);
 800b8b8:	4b13      	ldr	r3, [pc, #76]	@ (800b908 <motor4_set_pulse+0x78>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	635a      	str	r2, [r3, #52]	@ 0x34
 800b8c0:	e014      	b.n	800b8ec <motor4_set_pulse+0x5c>
    } else if(speed < 0) {
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	da09      	bge.n	800b8dc <motor4_set_pulse+0x4c>
        __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b908 <motor4_set_pulse+0x78>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, -speed);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	425a      	negs	r2, r3
 800b8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800b904 <motor4_set_pulse+0x74>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b8da:	e007      	b.n	800b8ec <motor4_set_pulse+0x5c>
    } else {
        __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 800b8dc:	4b09      	ldr	r3, [pc, #36]	@ (800b904 <motor4_set_pulse+0x74>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 800b8e4:	4b08      	ldr	r3, [pc, #32]	@ (800b908 <motor4_set_pulse+0x78>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	4805      	ldr	r0, [pc, #20]	@ (800b904 <motor4_set_pulse+0x74>)
 800b8f0:	f7fa febc 	bl	800666c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4804      	ldr	r0, [pc, #16]	@ (800b908 <motor4_set_pulse+0x78>)
 800b8f8:	f7fa feb8 	bl	800666c <HAL_TIM_PWM_Start>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	20002e44 	.word	0x20002e44
 800b908:	20002ef8 	.word	0x20002ef8

0800b90c <packet_dma_receive_event_callback>:
 * @param huart 串口实例
 * @param Pos 接收到的字节数
 * @retval void
 */
static void packet_dma_receive_event_callback(UART_HandleTypeDef *huart, uint16_t length)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	807b      	strh	r3, [r7, #2]
    int cur_index = packet_controller.rx_dma_buffer_index; /* 取得当前DMA缓存的索引号 */
 800b918:	4b19      	ldr	r3, [pc, #100]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b91a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b91e:	60fb      	str	r3, [r7, #12]
    packet_controller.rx_dma_buffer_index ^= 1;
 800b920:	4b17      	ldr	r3, [pc, #92]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b922:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b926:	f083 0301 	eor.w	r3, r3, #1
 800b92a:	4a15      	ldr	r2, [pc, #84]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b92c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    HAL_UART_AbortReceive(&huart3);
 800b930:	4814      	ldr	r0, [pc, #80]	@ (800b984 <packet_dma_receive_event_callback+0x78>)
 800b932:	f7fc fac2 	bl	8007eba <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, packet_controller.rx_dma_buffers[packet_controller.rx_dma_buffer_index], PACKET_RX_DMA_BUFFER_SIZE);
 800b936:	4b12      	ldr	r3, [pc, #72]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b938:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b93c:	4a10      	ldr	r2, [pc, #64]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b93e:	334c      	adds	r3, #76	@ 0x4c
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b94a:	4619      	mov	r1, r3
 800b94c:	480d      	ldr	r0, [pc, #52]	@ (800b984 <packet_dma_receive_event_callback+0x78>)
 800b94e:	f7fc fa57 	bl	8007e00 <HAL_UARTEx_ReceiveToIdle_DMA>
    lwrb_write(packet_controller.rx_fifo, packet_controller.rx_dma_buffers[cur_index], length); /* 将接收到的数据写入fifo ring */
 800b952:	4b0b      	ldr	r3, [pc, #44]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b954:	f8d3 0148 	ldr.w	r0, [r3, #328]	@ 0x148
 800b958:	4a09      	ldr	r2, [pc, #36]	@ (800b980 <packet_dma_receive_event_callback+0x74>)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	334c      	adds	r3, #76	@ 0x4c
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	887a      	ldrh	r2, [r7, #2]
 800b966:	4619      	mov	r1, r3
 800b968:	f004 ff24 	bl	80107b4 <lwrb_write>
    osSemaphoreRelease(packet_rx_not_emptyHandle); /* 置位接收缓存非空信号 */
 800b96c:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <packet_dma_receive_event_callback+0x7c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4618      	mov	r0, r3
 800b972:	f000 ffc5 	bl	800c900 <osSemaphoreRelease>
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	2000d220 	.word	0x2000d220
 800b984:	2000327c 	.word	0x2000327c
 800b988:	2000266c 	.word	0x2000266c

0800b98c <packet_start_recv>:
/**
 * @brief 开始串口协议接收
 * @retval void
 */
void packet_start_recv(void)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
    HAL_UART_AbortReceive(&huart3);
 800b990:	480d      	ldr	r0, [pc, #52]	@ (800b9c8 <packet_start_recv+0x3c>)
 800b992:	f7fc fa92 	bl	8007eba <HAL_UART_AbortReceive>
    HAL_UART_RegisterCallback(&huart3, HAL_UART_ERROR_CB_ID, packet_uart_error_callblack);
 800b996:	4a0d      	ldr	r2, [pc, #52]	@ (800b9cc <packet_start_recv+0x40>)
 800b998:	2104      	movs	r1, #4
 800b99a:	480b      	ldr	r0, [pc, #44]	@ (800b9c8 <packet_start_recv+0x3c>)
 800b99c:	f7fc f8ee 	bl	8007b7c <HAL_UART_RegisterCallback>
    HAL_UART_RegisterRxEventCallback(&huart3, packet_dma_receive_event_callback); /* 注册接收事件回调 */
 800b9a0:	490b      	ldr	r1, [pc, #44]	@ (800b9d0 <packet_start_recv+0x44>)
 800b9a2:	4809      	ldr	r0, [pc, #36]	@ (800b9c8 <packet_start_recv+0x3c>)
 800b9a4:	f7fc f982 	bl	8007cac <HAL_UART_RegisterRxEventCallback>
    /* 使用 ReceiveToIdle_DMA 进行接收， 该函数会在DMA缓存满时中断或在接收空闲时中断并触发接收事件回调 */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, packet_controller.rx_dma_buffers[packet_controller.rx_dma_buffer_index], PACKET_RX_DMA_BUFFER_SIZE);
 800b9a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d4 <packet_start_recv+0x48>)
 800b9aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b9ae:	4a09      	ldr	r2, [pc, #36]	@ (800b9d4 <packet_start_recv+0x48>)
 800b9b0:	334c      	adds	r3, #76	@ 0x4c
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4802      	ldr	r0, [pc, #8]	@ (800b9c8 <packet_start_recv+0x3c>)
 800b9c0:	f7fc fa1e 	bl	8007e00 <HAL_UARTEx_ReceiveToIdle_DMA>
    /* 开始接收 */
}
 800b9c4:	bf00      	nop
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	2000327c 	.word	0x2000327c
 800b9cc:	0800b9d9 	.word	0x0800b9d9
 800b9d0:	0800b90d 	.word	0x0800b90d
 800b9d4:	2000d220 	.word	0x2000d220

0800b9d8 <packet_uart_error_callblack>:
 * @param huart 串口实例
 * @retval None.
 *
*/
static void packet_uart_error_callblack(UART_HandleTypeDef *huart)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
    packet_start_recv();
 800b9e0:	f7ff ffd4 	bl	800b98c <packet_start_recv>
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <packet_rx_task_entry>:
 * 串口缓存非空信号量由串口接收事件置位
 * @param argument 保留
 * @retval void
 */
void packet_rx_task_entry(void *argument)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
    osSemaphoreAcquire(packet_rx_not_emptyHandle, 0); /* 默认信号不为零，先清除掉 */
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	@ (800ba24 <packet_rx_task_entry+0x38>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 ff2e 	bl	800c85c <osSemaphoreAcquire>
    __HAL_UNLOCK(&huart3);
 800ba00:	4b09      	ldr	r3, [pc, #36]	@ (800ba28 <packet_rx_task_entry+0x3c>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    packet_start_recv();
 800ba08:	f7ff ffc0 	bl	800b98c <packet_start_recv>
    for(;;) {
        osSemaphoreAcquire(packet_rx_not_emptyHandle, osWaitForever); /* 等待接收缓存非空 */
 800ba0c:	4b05      	ldr	r3, [pc, #20]	@ (800ba24 <packet_rx_task_entry+0x38>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f04f 31ff 	mov.w	r1, #4294967295
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 ff21 	bl	800c85c <osSemaphoreAcquire>
        packet_recv(&packet_controller);
 800ba1a:	4804      	ldr	r0, [pc, #16]	@ (800ba2c <packet_rx_task_entry+0x40>)
 800ba1c:	f7fe fa74 	bl	8009f08 <packet_recv>
        osSemaphoreAcquire(packet_rx_not_emptyHandle, osWaitForever); /* 等待接收缓存非空 */
 800ba20:	bf00      	nop
 800ba22:	e7f3      	b.n	800ba0c <packet_rx_task_entry+0x20>
 800ba24:	2000266c 	.word	0x2000266c
 800ba28:	2000327c 	.word	0x2000327c
 800ba2c:	2000d220 	.word	0x2000d220

0800ba30 <packet_tx_task_entry>:
 *  https://note.youdao.com/s/D1lHKSH0
 * @param argument 保留
 * @retval void
 */
void packet_tx_task_entry(void *argument)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	  osSemaphoreRelease(packet_tx_idleHandle);
 800ba38:	4b15      	ldr	r3, [pc, #84]	@ (800ba90 <packet_tx_task_entry+0x60>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 ff5f 	bl	800c900 <osSemaphoreRelease>
    for(;;) {
        osSemaphoreAcquire(packet_tx_idleHandle, osWaitForever); /* 等待发送空闲信号 */
 800ba42:	4b13      	ldr	r3, [pc, #76]	@ (800ba90 <packet_tx_task_entry+0x60>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f04f 31ff 	mov.w	r1, #4294967295
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 ff06 	bl	800c85c <osSemaphoreAcquire>
        osStatus_t status = osMessageQueueGet(packet_tx_queueHandle, &packet_controller.tx_dma_buffer, NULL, osWaitForever); /* 从发送队列中取出数据 */
 800ba50:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <packet_tx_task_entry+0x64>)
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295
 800ba58:	2200      	movs	r2, #0
 800ba5a:	490f      	ldr	r1, [pc, #60]	@ (800ba98 <packet_tx_task_entry+0x68>)
 800ba5c:	f001 f868 	bl	800cb30 <osMessageQueueGet>
 800ba60:	60f8      	str	r0, [r7, #12]
        if(osOK == status) {
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1ec      	bne.n	800ba42 <packet_tx_task_entry+0x12>
            HAL_UART_RegisterCallback(&huart3, HAL_UART_TX_COMPLETE_CB_ID, packet_dma_transmit_finished); /* 注册 DMA 接收完成回调 */
 800ba68:	4a0c      	ldr	r2, [pc, #48]	@ (800ba9c <packet_tx_task_entry+0x6c>)
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	480c      	ldr	r0, [pc, #48]	@ (800baa0 <packet_tx_task_entry+0x70>)
 800ba6e:	f7fc f885 	bl	8007b7c <HAL_UART_RegisterCallback>
            HAL_UART_Transmit_DMA(&huart3, (uint8_t*)packet_controller.tx_dma_buffer, packet_controller.tx_dma_buffer->data_length + 5);  /* 触发 DMA 发送*/
 800ba72:	4b0c      	ldr	r3, [pc, #48]	@ (800baa4 <packet_tx_task_entry+0x74>)
 800ba74:	f8d3 1150 	ldr.w	r1, [r3, #336]	@ 0x150
 800ba78:	4b0a      	ldr	r3, [pc, #40]	@ (800baa4 <packet_tx_task_entry+0x74>)
 800ba7a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800ba7e:	78db      	ldrb	r3, [r3, #3]
 800ba80:	3305      	adds	r3, #5
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	4806      	ldr	r0, [pc, #24]	@ (800baa0 <packet_tx_task_entry+0x70>)
 800ba88:	f7fc f94a 	bl	8007d20 <HAL_UART_Transmit_DMA>
    for(;;) {
 800ba8c:	e7d9      	b.n	800ba42 <packet_tx_task_entry+0x12>
 800ba8e:	bf00      	nop
 800ba90:	20002668 	.word	0x20002668
 800ba94:	20002258 	.word	0x20002258
 800ba98:	2000d370 	.word	0x2000d370
 800ba9c:	0800baa9 	.word	0x0800baa9
 800baa0:	2000327c 	.word	0x2000327c
 800baa4:	2000d220 	.word	0x2000d220

0800baa8 <packet_dma_transmit_finished>:
 * @param huart
 * @retval void
 */

static void packet_dma_transmit_finished(UART_HandleTypeDef * huart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
    lwmem_free(packet_controller.tx_dma_buffer);
 800bab0:	4b16      	ldr	r3, [pc, #88]	@ (800bb0c <packet_dma_transmit_finished+0x64>)
 800bab2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800bab6:	4619      	mov	r1, r3
 800bab8:	2000      	movs	r0, #0
 800baba:	f004 fdff 	bl	80106bc <lwmem_free_ex>
    osStatus_t status = osMessageQueueGet(packet_tx_queueHandle, &packet_controller.tx_dma_buffer, NULL, 0); /* 从发送队列中取出数据 */
 800babe:	4b14      	ldr	r3, [pc, #80]	@ (800bb10 <packet_dma_transmit_finished+0x68>)
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	2300      	movs	r3, #0
 800bac4:	2200      	movs	r2, #0
 800bac6:	4913      	ldr	r1, [pc, #76]	@ (800bb14 <packet_dma_transmit_finished+0x6c>)
 800bac8:	f001 f832 	bl	800cb30 <osMessageQueueGet>
 800bacc:	60f8      	str	r0, [r7, #12]
    if(osOK == status) {
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d112      	bne.n	800bafa <packet_dma_transmit_finished+0x52>
        HAL_UART_RegisterCallback(&huart3, HAL_UART_TX_COMPLETE_CB_ID, packet_dma_transmit_finished); /* 注册 DMA 接收完成回调 */
 800bad4:	4a10      	ldr	r2, [pc, #64]	@ (800bb18 <packet_dma_transmit_finished+0x70>)
 800bad6:	2101      	movs	r1, #1
 800bad8:	4810      	ldr	r0, [pc, #64]	@ (800bb1c <packet_dma_transmit_finished+0x74>)
 800bada:	f7fc f84f 	bl	8007b7c <HAL_UART_RegisterCallback>
        HAL_UART_Transmit_DMA(&huart3, (uint8_t*)packet_controller.tx_dma_buffer, packet_controller.tx_dma_buffer->data_length + 5); /* 触发 DMA 发送*/
 800bade:	4b0b      	ldr	r3, [pc, #44]	@ (800bb0c <packet_dma_transmit_finished+0x64>)
 800bae0:	f8d3 1150 	ldr.w	r1, [r3, #336]	@ 0x150
 800bae4:	4b09      	ldr	r3, [pc, #36]	@ (800bb0c <packet_dma_transmit_finished+0x64>)
 800bae6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800baea:	78db      	ldrb	r3, [r3, #3]
 800baec:	3305      	adds	r3, #5
 800baee:	b29b      	uxth	r3, r3
 800baf0:	461a      	mov	r2, r3
 800baf2:	480a      	ldr	r0, [pc, #40]	@ (800bb1c <packet_dma_transmit_finished+0x74>)
 800baf4:	f7fc f914 	bl	8007d20 <HAL_UART_Transmit_DMA>
    } else {
        osSemaphoreRelease(packet_tx_idleHandle); /* 置位发送空闲信号 */
    }
}
 800baf8:	e004      	b.n	800bb04 <packet_dma_transmit_finished+0x5c>
        osSemaphoreRelease(packet_tx_idleHandle); /* 置位发送空闲信号 */
 800bafa:	4b09      	ldr	r3, [pc, #36]	@ (800bb20 <packet_dma_transmit_finished+0x78>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fefe 	bl	800c900 <osSemaphoreRelease>
}
 800bb04:	bf00      	nop
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	2000d220 	.word	0x2000d220
 800bb10:	20002258 	.word	0x20002258
 800bb14:	2000d370 	.word	0x2000d370
 800bb18:	0800baa9 	.word	0x0800baa9
 800bb1c:	2000327c 	.word	0x2000327c
 800bb20:	20002668 	.word	0x20002668

0800bb24 <pwm_servo1_write_pin>:
#include "lwmem_porting.h"

PWMServoObjectTypeDef *pwm_servos[4];

static void pwm_servo1_write_pin(uint32_t new_state)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(PWM_SERVO_1_GPIO_Port, PWM_SERVO_1_Pin, (GPIO_PinState)new_state);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	461a      	mov	r2, r3
 800bb32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bb36:	4803      	ldr	r0, [pc, #12]	@ (800bb44 <pwm_servo1_write_pin+0x20>)
 800bb38:	f7f9 fc40 	bl	80053bc <HAL_GPIO_WritePin>
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	40020000 	.word	0x40020000

0800bb48 <pwm_servo2_write_pin>:

static void pwm_servo2_write_pin(uint32_t new_state)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(PWM_SERVO_2_GPIO_Port, PWM_SERVO_2_Pin, (GPIO_PinState)new_state);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	461a      	mov	r2, r3
 800bb56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bb5a:	4803      	ldr	r0, [pc, #12]	@ (800bb68 <pwm_servo2_write_pin+0x20>)
 800bb5c:	f7f9 fc2e 	bl	80053bc <HAL_GPIO_WritePin>
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	40020000 	.word	0x40020000

0800bb6c <pwm_servo3_write_pin>:

static void pwm_servo3_write_pin(uint32_t new_state)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(PWM_SERVO_3_GPIO_Port, PWM_SERVO_3_Pin, (GPIO_PinState)new_state);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	461a      	mov	r2, r3
 800bb7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb7e:	4803      	ldr	r0, [pc, #12]	@ (800bb8c <pwm_servo3_write_pin+0x20>)
 800bb80:	f7f9 fc1c 	bl	80053bc <HAL_GPIO_WritePin>
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	40020800 	.word	0x40020800

0800bb90 <pwm_servo4_write_pin>:

static void pwm_servo4_write_pin(uint32_t new_state)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(PWM_SERVO_4_GPIO_Port, PWM_SERVO_4_Pin, (GPIO_PinState)new_state);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bba2:	4803      	ldr	r0, [pc, #12]	@ (800bbb0 <pwm_servo4_write_pin+0x20>)
 800bba4:	f7f9 fc0a 	bl	80053bc <HAL_GPIO_WritePin>
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	40020800 	.word	0x40020800

0800bbb4 <pwm_servos_init>:

void pwm_servos_init(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; ++i) {
 800bbba:	2300      	movs	r3, #0
 800bbbc:	607b      	str	r3, [r7, #4]
 800bbbe:	e013      	b.n	800bbe8 <pwm_servos_init+0x34>
	    pwm_servos[i] = LWMEM_CCM_MALLOC(sizeof(PWMServoObjectTypeDef));
 800bbc0:	2228      	movs	r2, #40	@ 0x28
 800bbc2:	4928      	ldr	r1, [pc, #160]	@ (800bc64 <pwm_servos_init+0xb0>)
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f004 fd55 	bl	8010674 <lwmem_malloc_ex>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	4926      	ldr	r1, [pc, #152]	@ (800bc68 <pwm_servos_init+0xb4>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        pwm_servo_object_init(pwm_servos[i]);  // 初始化PWM舵机对象内存
 800bbd4:	4a24      	ldr	r2, [pc, #144]	@ (800bc68 <pwm_servos_init+0xb4>)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fe ff5d 	bl	800aa9c <pwm_servo_object_init>
    for(int i = 0; i < 4; ++i) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	607b      	str	r3, [r7, #4]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	dde8      	ble.n	800bbc0 <pwm_servos_init+0xc>
    }
    pwm_servos[0]->write_pin = pwm_servo1_write_pin;
 800bbee:	4b1e      	ldr	r3, [pc, #120]	@ (800bc68 <pwm_servos_init+0xb4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a1e      	ldr	r2, [pc, #120]	@ (800bc6c <pwm_servos_init+0xb8>)
 800bbf4:	625a      	str	r2, [r3, #36]	@ 0x24
    pwm_servos[1]->write_pin = pwm_servo2_write_pin;
 800bbf6:	4b1c      	ldr	r3, [pc, #112]	@ (800bc68 <pwm_servos_init+0xb4>)
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	4a1d      	ldr	r2, [pc, #116]	@ (800bc70 <pwm_servos_init+0xbc>)
 800bbfc:	625a      	str	r2, [r3, #36]	@ 0x24
    pwm_servos[2]->write_pin = pwm_servo3_write_pin;
 800bbfe:	4b1a      	ldr	r3, [pc, #104]	@ (800bc68 <pwm_servos_init+0xb4>)
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	4a1c      	ldr	r2, [pc, #112]	@ (800bc74 <pwm_servos_init+0xc0>)
 800bc04:	625a      	str	r2, [r3, #36]	@ 0x24
    pwm_servos[3]->write_pin = pwm_servo4_write_pin;
 800bc06:	4b18      	ldr	r3, [pc, #96]	@ (800bc68 <pwm_servos_init+0xb4>)
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <pwm_servos_init+0xc4>)
 800bc0c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_TIM_SET_COUNTER(&htim13, 0);
 800bc0e:	4b1b      	ldr	r3, [pc, #108]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2200      	movs	r2, #0
 800bc14:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_UPDATE);
 800bc16:	4b19      	ldr	r3, [pc, #100]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f06f 0201 	mvn.w	r2, #1
 800bc1e:	611a      	str	r2, [r3, #16]
    __HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_CC1);
 800bc20:	4b16      	ldr	r3, [pc, #88]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f06f 0202 	mvn.w	r2, #2
 800bc28:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 800bc2a:	4b14      	ldr	r3, [pc, #80]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	4b12      	ldr	r3, [pc, #72]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f042 0201 	orr.w	r2, r2, #1
 800bc38:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_CC1);
 800bc3a:	4b10      	ldr	r3, [pc, #64]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	4b0e      	ldr	r3, [pc, #56]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f042 0202 	orr.w	r2, r2, #2
 800bc48:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE(&htim13);
 800bc4a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	4b0a      	ldr	r3, [pc, #40]	@ (800bc7c <pwm_servos_init+0xc8>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f042 0201 	orr.w	r2, r2, #1
 800bc58:	601a      	str	r2, [r3, #0]
}
 800bc5a:	bf00      	nop
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000010 	.word	0x20000010
 800bc68:	2000d374 	.word	0x2000d374
 800bc6c:	0800bb25 	.word	0x0800bb25
 800bc70:	0800bb49 	.word	0x0800bb49
 800bc74:	0800bb6d 	.word	0x0800bb6d
 800bc78:	0800bb91 	.word	0x0800bb91
 800bc7c:	20003060 	.word	0x20003060

0800bc80 <app_task_entry>:
void minacker_control(void);


/* 用户入口函数 */
void app_task_entry(void *argument)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
    extern osTimerId_t button_timerHandle;


	
    /* 硬件初始化 */
    motors_init();      //电机初始化
 800bc88:	f7ff fbe4 	bl	800b454 <motors_init>
	pwm_servos_init();  //云台舵机初始化
 800bc8c:	f7ff ff92 	bl	800bbb4 <pwm_servos_init>
    buzzers_init();     //蜂鸣器初始化
 800bc90:	f7ff f836 	bl	800ad00 <buzzers_init>
    buttons_init();		//按键初始化
 800bc94:	f7fe ffae 	bl	800abf4 <buttons_init>
	
	

    //开启蜂鸣器定时器，让其在中断中运作，后面调用接口函数即可
    //参数1：定时器句柄 ， 参数2：定时器的工作间隔 ms
    osTimerStart(buzzer_timerHandle, BUZZER_TASK_PERIOD);   
 800bc98:	4b12      	ldr	r3, [pc, #72]	@ (800bce4 <app_task_entry+0x64>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	211e      	movs	r1, #30
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fbd8 	bl	800c454 <osTimerStart>
	//开启电量监控定时器，实时监控电量
    osTimerStart(battery_check_timerHandle, BATTERY_TASK_PERIOD);
 800bca4:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <app_task_entry+0x68>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2132      	movs	r1, #50	@ 0x32
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 fbd2 	bl	800c454 <osTimerStart>
	//开启ADC通道转换
	HAL_ADC_Start(&hadc1);
 800bcb0:	480e      	ldr	r0, [pc, #56]	@ (800bcec <app_task_entry+0x6c>)
 800bcb2:	f7f8 f823 	bl	8003cfc <HAL_ADC_Start>
	
	

    //初始化底盘电机运动参数
    chassis_init();     
 800bcb6:	f7ff f9f1 	bl	800b09c <chassis_init>
    //选择底盘类型
    set_chassis_type(Chassis_run_type);
 800bcba:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf0 <app_task_entry+0x70>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff fa7d 	bl	800b1c0 <set_chassis_type>
	
	chassis->stop(chassis); //停止
 800bcc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf4 <app_task_entry+0x74>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	4a09      	ldr	r2, [pc, #36]	@ (800bcf4 <app_task_entry+0x74>)
 800bcce:	6812      	ldr	r2, [r2, #0]
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4798      	blx	r3
	
	

	mecanum_control();
 800bcd4:	f000 f810 	bl	800bcf8 <mecanum_control>


	// 循环  : RTOS任务中的循环，必须要有osDelay或者其他系统阻塞函数，否则会导致系统异常
    for(;;) {
		
		osDelay(5000);
 800bcd8:	f241 3088 	movw	r0, #5000	@ 0x1388
 800bcdc:	f000 fb0e 	bl	800c2fc <osDelay>
 800bce0:	e7fa      	b.n	800bcd8 <app_task_entry+0x58>
 800bce2:	bf00      	nop
 800bce4:	200025d8 	.word	0x200025d8
 800bce8:	20002608 	.word	0x20002608
 800bcec:	200000a8 	.word	0x200000a8
 800bcf0:	20000028 	.word	0x20000028
 800bcf4:	2000000c 	.word	0x2000000c

0800bcf8 <mecanum_control>:

/* 
*  麦克纳姆轮底盘控制函数
*/
void mecanum_control(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
    //建议范围为 [50 , 450]
    static float speed = 300.0f;  


	//以x轴线速度运动（即向前运动）
	chassis->set_velocity(chassis, 200.0, 0, 0);
 800bcfc:	4b87      	ldr	r3, [pc, #540]	@ (800bf1c <mecanum_control+0x224>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	4a86      	ldr	r2, [pc, #536]	@ (800bf1c <mecanum_control+0x224>)
 800bd04:	6812      	ldr	r2, [r2, #0]
 800bd06:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 800bf20 <mecanum_control+0x228>
 800bd0a:	eddf 0a85 	vldr	s1, [pc, #532]	@ 800bf20 <mecanum_control+0x228>
 800bd0e:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 800bf24 <mecanum_control+0x22c>
 800bd12:	4610      	mov	r0, r2
 800bd14:	4798      	blx	r3
	osDelay(2000); //延时2s
 800bd16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bd1a:	f000 faef 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bd1e:	4b7f      	ldr	r3, [pc, #508]	@ (800bf1c <mecanum_control+0x224>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	4a7d      	ldr	r2, [pc, #500]	@ (800bf1c <mecanum_control+0x224>)
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4798      	blx	r3
	osDelay(1000); //延时1s
 800bd2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd30:	f000 fae4 	bl	800c2fc <osDelay>
	
	//以x轴线速度运动（即向后运动）
	chassis->set_velocity(chassis, -200.0, 0, 0);
 800bd34:	4b79      	ldr	r3, [pc, #484]	@ (800bf1c <mecanum_control+0x224>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	4a78      	ldr	r2, [pc, #480]	@ (800bf1c <mecanum_control+0x224>)
 800bd3c:	6812      	ldr	r2, [r2, #0]
 800bd3e:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 800bf20 <mecanum_control+0x228>
 800bd42:	eddf 0a77 	vldr	s1, [pc, #476]	@ 800bf20 <mecanum_control+0x228>
 800bd46:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 800bf28 <mecanum_control+0x230>
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4798      	blx	r3
	osDelay(2000); //延时2s	
 800bd4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bd52:	f000 fad3 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bd56:	4b71      	ldr	r3, [pc, #452]	@ (800bf1c <mecanum_control+0x224>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	4a6f      	ldr	r2, [pc, #444]	@ (800bf1c <mecanum_control+0x224>)
 800bd5e:	6812      	ldr	r2, [r2, #0]
 800bd60:	4610      	mov	r0, r2
 800bd62:	4798      	blx	r3
	osDelay(1000); //延时1s
 800bd64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd68:	f000 fac8 	bl	800c2fc <osDelay>
	

	//以y轴线速度运动（即向左运动）
	chassis->set_velocity(chassis, 0, 200.0, 0);
 800bd6c:	4b6b      	ldr	r3, [pc, #428]	@ (800bf1c <mecanum_control+0x224>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	4a6a      	ldr	r2, [pc, #424]	@ (800bf1c <mecanum_control+0x224>)
 800bd74:	6812      	ldr	r2, [r2, #0]
 800bd76:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800bf20 <mecanum_control+0x228>
 800bd7a:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800bf24 <mecanum_control+0x22c>
 800bd7e:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 800bf20 <mecanum_control+0x228>
 800bd82:	4610      	mov	r0, r2
 800bd84:	4798      	blx	r3
	osDelay(2000); //延时2s
 800bd86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bd8a:	f000 fab7 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bd8e:	4b63      	ldr	r3, [pc, #396]	@ (800bf1c <mecanum_control+0x224>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	4a61      	ldr	r2, [pc, #388]	@ (800bf1c <mecanum_control+0x224>)
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
	osDelay(1000); //延时1s
 800bd9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bda0:	f000 faac 	bl	800c2fc <osDelay>

	chassis->set_velocity(chassis, 0, -200.0, 0);
 800bda4:	4b5d      	ldr	r3, [pc, #372]	@ (800bf1c <mecanum_control+0x224>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	4a5c      	ldr	r2, [pc, #368]	@ (800bf1c <mecanum_control+0x224>)
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 800bf20 <mecanum_control+0x228>
 800bdb2:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 800bf28 <mecanum_control+0x230>
 800bdb6:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800bf20 <mecanum_control+0x228>
 800bdba:	4610      	mov	r0, r2
 800bdbc:	4798      	blx	r3
	osDelay(2000); //延时2s	
 800bdbe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bdc2:	f000 fa9b 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bdc6:	4b55      	ldr	r3, [pc, #340]	@ (800bf1c <mecanum_control+0x224>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	4a53      	ldr	r2, [pc, #332]	@ (800bf1c <mecanum_control+0x224>)
 800bdce:	6812      	ldr	r2, [r2, #0]
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4798      	blx	r3
	osDelay(1000); //延时1s
 800bdd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bdd8:	f000 fa90 	bl	800c2fc <osDelay>


	//角速度运动 即原地向左运动
	chassis->set_velocity(chassis, 0, 0, -0.5);
 800bddc:	4b4f      	ldr	r3, [pc, #316]	@ (800bf1c <mecanum_control+0x224>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	4a4e      	ldr	r2, [pc, #312]	@ (800bf1c <mecanum_control+0x224>)
 800bde4:	6812      	ldr	r2, [r2, #0]
 800bde6:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 800bdea:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800bf20 <mecanum_control+0x228>
 800bdee:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800bf20 <mecanum_control+0x228>
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	4798      	blx	r3
	osDelay(2000); //延时2s
 800bdf6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bdfa:	f000 fa7f 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bdfe:	4b47      	ldr	r3, [pc, #284]	@ (800bf1c <mecanum_control+0x224>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	4a45      	ldr	r2, [pc, #276]	@ (800bf1c <mecanum_control+0x224>)
 800be06:	6812      	ldr	r2, [r2, #0]
 800be08:	4610      	mov	r0, r2
 800be0a:	4798      	blx	r3
	osDelay(1000); //延时1s
 800be0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800be10:	f000 fa74 	bl	800c2fc <osDelay>
	
	//角速度运动 即原地向右运动
	chassis->set_velocity(chassis, 0, 0, 0.5);
 800be14:	4b41      	ldr	r3, [pc, #260]	@ (800bf1c <mecanum_control+0x224>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	4a40      	ldr	r2, [pc, #256]	@ (800bf1c <mecanum_control+0x224>)
 800be1c:	6812      	ldr	r2, [r2, #0]
 800be1e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800be22:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800bf20 <mecanum_control+0x228>
 800be26:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800bf20 <mecanum_control+0x228>
 800be2a:	4610      	mov	r0, r2
 800be2c:	4798      	blx	r3
	osDelay(2000); //延时2s	
 800be2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800be32:	f000 fa63 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800be36:	4b39      	ldr	r3, [pc, #228]	@ (800bf1c <mecanum_control+0x224>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	4a37      	ldr	r2, [pc, #220]	@ (800bf1c <mecanum_control+0x224>)
 800be3e:	6812      	ldr	r2, [r2, #0]
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
	osDelay(1000); //延时1s
 800be44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800be48:	f000 fa58 	bl	800c2fc <osDelay>


	//斜向运动 斜向左前运动
	chassis->set_velocity(chassis, 100.0, 100.0, 0);
 800be4c:	4b33      	ldr	r3, [pc, #204]	@ (800bf1c <mecanum_control+0x224>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	4a32      	ldr	r2, [pc, #200]	@ (800bf1c <mecanum_control+0x224>)
 800be54:	6812      	ldr	r2, [r2, #0]
 800be56:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 800bf20 <mecanum_control+0x228>
 800be5a:	eddf 0a34 	vldr	s1, [pc, #208]	@ 800bf2c <mecanum_control+0x234>
 800be5e:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800bf2c <mecanum_control+0x234>
 800be62:	4610      	mov	r0, r2
 800be64:	4798      	blx	r3
	osDelay(2000); //延时2s
 800be66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800be6a:	f000 fa47 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800be6e:	4b2b      	ldr	r3, [pc, #172]	@ (800bf1c <mecanum_control+0x224>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	4a29      	ldr	r2, [pc, #164]	@ (800bf1c <mecanum_control+0x224>)
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	4610      	mov	r0, r2
 800be7a:	4798      	blx	r3
	osDelay(1000); //延时1s
 800be7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800be80:	f000 fa3c 	bl	800c2fc <osDelay>

	//斜向运动 斜向右后运动
	chassis->set_velocity(chassis, -100.0, -100.0, 0);
 800be84:	4b25      	ldr	r3, [pc, #148]	@ (800bf1c <mecanum_control+0x224>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	4a24      	ldr	r2, [pc, #144]	@ (800bf1c <mecanum_control+0x224>)
 800be8c:	6812      	ldr	r2, [r2, #0]
 800be8e:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 800bf20 <mecanum_control+0x228>
 800be92:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800bf30 <mecanum_control+0x238>
 800be96:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800bf30 <mecanum_control+0x238>
 800be9a:	4610      	mov	r0, r2
 800be9c:	4798      	blx	r3
	osDelay(2000); //延时2s	
 800be9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bea2:	f000 fa2b 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bea6:	4b1d      	ldr	r3, [pc, #116]	@ (800bf1c <mecanum_control+0x224>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	4a1b      	ldr	r2, [pc, #108]	@ (800bf1c <mecanum_control+0x224>)
 800beae:	6812      	ldr	r2, [r2, #0]
 800beb0:	4610      	mov	r0, r2
 800beb2:	4798      	blx	r3
	osDelay(1000); //延时1s
 800beb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800beb8:	f000 fa20 	bl	800c2fc <osDelay>


	//漂移运动 向左边漂移
	chassis->drift(chassis, false);
 800bebc:	4b17      	ldr	r3, [pc, #92]	@ (800bf1c <mecanum_control+0x224>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	4a16      	ldr	r2, [pc, #88]	@ (800bf1c <mecanum_control+0x224>)
 800bec4:	6812      	ldr	r2, [r2, #0]
 800bec6:	2100      	movs	r1, #0
 800bec8:	4610      	mov	r0, r2
 800beca:	4798      	blx	r3
	osDelay(2000); //延时2s	
 800becc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bed0:	f000 fa14 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bed4:	4b11      	ldr	r3, [pc, #68]	@ (800bf1c <mecanum_control+0x224>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	4a10      	ldr	r2, [pc, #64]	@ (800bf1c <mecanum_control+0x224>)
 800bedc:	6812      	ldr	r2, [r2, #0]
 800bede:	4610      	mov	r0, r2
 800bee0:	4798      	blx	r3
	osDelay(1000); //延时1s
 800bee2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bee6:	f000 fa09 	bl	800c2fc <osDelay>

	//漂移运动 向右边漂移
	chassis->drift(chassis, true);
 800beea:	4b0c      	ldr	r3, [pc, #48]	@ (800bf1c <mecanum_control+0x224>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	4a0a      	ldr	r2, [pc, #40]	@ (800bf1c <mecanum_control+0x224>)
 800bef2:	6812      	ldr	r2, [r2, #0]
 800bef4:	2101      	movs	r1, #1
 800bef6:	4610      	mov	r0, r2
 800bef8:	4798      	blx	r3
	osDelay(2000); //延时2s
 800befa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800befe:	f000 f9fd 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
 800bf02:	4b06      	ldr	r3, [pc, #24]	@ (800bf1c <mecanum_control+0x224>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	4a04      	ldr	r2, [pc, #16]	@ (800bf1c <mecanum_control+0x224>)
 800bf0a:	6812      	ldr	r2, [r2, #0]
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	4798      	blx	r3
	osDelay(1000); //延时1s
 800bf10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf14:	f000 f9f2 	bl	800c2fc <osDelay>

	chassis->stop(chassis); //停止
	osDelay(1000); //延时1s*/


}
 800bf18:	bf00      	nop
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	2000000c 	.word	0x2000000c
 800bf20:	00000000 	.word	0x00000000
 800bf24:	43480000 	.word	0x43480000
 800bf28:	c3480000 	.word	0xc3480000
 800bf2c:	42c80000 	.word	0x42c80000
 800bf30:	c2c80000 	.word	0xc2c80000

0800bf34 <battery_check_timer_callback>:
extern osMessageQueueId_t bluetooth_tx_queueHandle; /* 蓝牙数据发送队列 */
#endif


void battery_check_timer_callback(void *argument)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af02      	add	r7, sp, #8
 800bf3a:	6078      	str	r0, [r7, #4]
	if(adc_value[0] != 0 && adc_value[0] != 4095) {
 800bf3c:	4b42      	ldr	r3, [pc, #264]	@ (800c048 <battery_check_timer_callback+0x114>)
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d048      	beq.n	800bfd6 <battery_check_timer_callback+0xa2>
 800bf44:	4b40      	ldr	r3, [pc, #256]	@ (800c048 <battery_check_timer_callback+0x114>)
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d042      	beq.n	800bfd6 <battery_check_timer_callback+0xa2>
	    float volt = 1210.0f / ((float)adc_value[0]) * ((float)adc_value[1]) * 11.0f ; /* 1210.0是内部参考电压值， 100k + 10k 电阻分压， 实际电压是测量电压的11倍 */
 800bf50:	4b3d      	ldr	r3, [pc, #244]	@ (800c048 <battery_check_timer_callback+0x114>)
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	ee07 3a90 	vmov	s15, r3
 800bf58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c04c <battery_check_timer_callback+0x118>
 800bf60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf64:	4b38      	ldr	r3, [pc, #224]	@ (800c048 <battery_check_timer_callback+0x114>)
 800bf66:	885b      	ldrh	r3, [r3, #2]
 800bf68:	ee07 3a90 	vmov	s15, r3
 800bf6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf74:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800bf78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf7c:	edc7 7a03 	vstr	s15, [r7, #12]
		volt = volt > 20000 ? 0 : volt;
 800bf80:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf84:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c050 <battery_check_timer_callback+0x11c>
 800bf88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf90:	dd02      	ble.n	800bf98 <battery_check_timer_callback+0x64>
 800bf92:	f04f 0300 	mov.w	r3, #0
 800bf96:	e000      	b.n	800bf9a <battery_check_timer_callback+0x66>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	60fb      	str	r3, [r7, #12]
        battery_volt = battery_volt == 0 ? volt : battery_volt * 0.95f + volt * 0.05f;
 800bf9c:	4b2d      	ldr	r3, [pc, #180]	@ (800c054 <battery_check_timer_callback+0x120>)
 800bf9e:	edd3 7a00 	vldr	s15, [r3]
 800bfa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfaa:	d00f      	beq.n	800bfcc <battery_check_timer_callback+0x98>
 800bfac:	4b29      	ldr	r3, [pc, #164]	@ (800c054 <battery_check_timer_callback+0x120>)
 800bfae:	edd3 7a00 	vldr	s15, [r3]
 800bfb2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800c058 <battery_check_timer_callback+0x124>
 800bfb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bfba:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfbe:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c05c <battery_check_timer_callback+0x128>
 800bfc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bfc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfca:	e001      	b.n	800bfd0 <battery_check_timer_callback+0x9c>
 800bfcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfd0:	4b20      	ldr	r3, [pc, #128]	@ (800c054 <battery_check_timer_callback+0x120>)
 800bfd2:	edc3 7a00 	vstr	s15, [r3]
    }
//	printf("%d\r\n", adc_value[0]);
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 2);
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	491b      	ldr	r1, [pc, #108]	@ (800c048 <battery_check_timer_callback+0x114>)
 800bfda:	4821      	ldr	r0, [pc, #132]	@ (800c060 <battery_check_timer_callback+0x12c>)
 800bfdc:	f7f7 ff60 	bl	8003ea0 <HAL_ADC_Start_DMA>
#endif

	
#if ENABLE_BATTERY_LOW_ALARM
	static int count = 0;
    if(battery_volt < BATTERY_LOW_ALARM_THRESHOLD && battery_volt > 4900) {
 800bfe0:	4b1c      	ldr	r3, [pc, #112]	@ (800c054 <battery_check_timer_callback+0x120>)
 800bfe2:	edd3 7a00 	vldr	s15, [r3]
 800bfe6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800c064 <battery_check_timer_callback+0x130>
 800bfea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff2:	d50f      	bpl.n	800c014 <battery_check_timer_callback+0xe0>
 800bff4:	4b17      	ldr	r3, [pc, #92]	@ (800c054 <battery_check_timer_callback+0x120>)
 800bff6:	edd3 7a00 	vldr	s15, [r3]
 800bffa:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800c068 <battery_check_timer_callback+0x134>
 800bffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c006:	dd05      	ble.n	800c014 <battery_check_timer_callback+0xe0>
        count++;
 800c008:	4b18      	ldr	r3, [pc, #96]	@ (800c06c <battery_check_timer_callback+0x138>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3301      	adds	r3, #1
 800c00e:	4a17      	ldr	r2, [pc, #92]	@ (800c06c <battery_check_timer_callback+0x138>)
 800c010:	6013      	str	r3, [r2, #0]
 800c012:	e002      	b.n	800c01a <battery_check_timer_callback+0xe6>
    } else {
        count = 0;
 800c014:	4b15      	ldr	r3, [pc, #84]	@ (800c06c <battery_check_timer_callback+0x138>)
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]
    }
    if(count > (int)(10 * 1000 / BATTERY_TASK_PERIOD)) { /* 每 10s 触发一次警报声 */
 800c01a:	4b14      	ldr	r3, [pc, #80]	@ (800c06c <battery_check_timer_callback+0x138>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2bc8      	cmp	r3, #200	@ 0xc8
 800c020:	dd0d      	ble.n	800c03e <battery_check_timer_callback+0x10a>
        buzzer_didi(buzzers[0], 2100, 800, 200, 5);
 800c022:	4b13      	ldr	r3, [pc, #76]	@ (800c070 <battery_check_timer_callback+0x13c>)
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	2305      	movs	r3, #5
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	23c8      	movs	r3, #200	@ 0xc8
 800c02c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c030:	f640 0134 	movw	r1, #2100	@ 0x834
 800c034:	f7fe fa9c 	bl	800a570 <buzzer_didi>
        count = 0;
 800c038:	4b0c      	ldr	r3, [pc, #48]	@ (800c06c <battery_check_timer_callback+0x138>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	601a      	str	r2, [r3, #0]
    }
#endif
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	2000d3bc 	.word	0x2000d3bc
 800c04c:	44974000 	.word	0x44974000
 800c050:	469c4000 	.word	0x469c4000
 800c054:	2000d3b8 	.word	0x2000d3b8
 800c058:	3f733333 	.word	0x3f733333
 800c05c:	3d4ccccd 	.word	0x3d4ccccd
 800c060:	200000a8 	.word	0x200000a8
 800c064:	45c4e000 	.word	0x45c4e000
 800c068:	45992000 	.word	0x45992000
 800c06c:	2000d3c0 	.word	0x2000d3c0
 800c070:	2000393c 	.word	0x2000393c

0800c074 <checksum_crc8>:
    return ((uint16_t) check) & 0x00FF;
}


uint16_t checksum_crc8(const uint8_t *buf, uint16_t len)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	807b      	strh	r3, [r7, #2]
    uint8_t check = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 800c084:	e00a      	b.n	800c09c <checksum_crc8+0x28>
        check = crc8_table[check ^ (*buf++)];
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	4053      	eors	r3, r2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	4b08      	ldr	r3, [pc, #32]	@ (800c0b8 <checksum_crc8+0x44>)
 800c098:	5c9b      	ldrb	r3, [r3, r2]
 800c09a:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 800c09c:	887b      	ldrh	r3, [r7, #2]
 800c09e:	1e5a      	subs	r2, r3, #1
 800c0a0:	807a      	strh	r2, [r7, #2]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1ef      	bne.n	800c086 <checksum_crc8+0x12>
    }
    return ((uint16_t) check) & 0x00FF;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
 800c0a8:	b29b      	uxth	r3, r3

}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	080129f4 	.word	0x080129f4

0800c0bc <__NVIC_SetPriority>:
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	db0a      	blt.n	800c0e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	490c      	ldr	r1, [pc, #48]	@ (800c108 <__NVIC_SetPriority+0x4c>)
 800c0d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0da:	0112      	lsls	r2, r2, #4
 800c0dc:	b2d2      	uxtb	r2, r2
 800c0de:	440b      	add	r3, r1
 800c0e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c0e4:	e00a      	b.n	800c0fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	4908      	ldr	r1, [pc, #32]	@ (800c10c <__NVIC_SetPriority+0x50>)
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	f003 030f 	and.w	r3, r3, #15
 800c0f2:	3b04      	subs	r3, #4
 800c0f4:	0112      	lsls	r2, r2, #4
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	761a      	strb	r2, [r3, #24]
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	e000e100 	.word	0xe000e100
 800c10c:	e000ed00 	.word	0xe000ed00

0800c110 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c114:	4b05      	ldr	r3, [pc, #20]	@ (800c12c <SysTick_Handler+0x1c>)
 800c116:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c118:	f002 fdcc 	bl	800ecb4 <xTaskGetSchedulerState>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d001      	beq.n	800c126 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c122:	f003 fd81 	bl	800fc28 <xPortSysTickHandler>
  }
}
 800c126:	bf00      	nop
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	e000e010 	.word	0xe000e010

0800c130 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c134:	2100      	movs	r1, #0
 800c136:	f06f 0004 	mvn.w	r0, #4
 800c13a:	f7ff ffbf 	bl	800c0bc <__NVIC_SetPriority>
#endif
}
 800c13e:	bf00      	nop
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c14a:	f3ef 8305 	mrs	r3, IPSR
 800c14e:	603b      	str	r3, [r7, #0]
  return(result);
 800c150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c156:	f06f 0305 	mvn.w	r3, #5
 800c15a:	607b      	str	r3, [r7, #4]
 800c15c:	e00c      	b.n	800c178 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c15e:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <osKernelInitialize+0x44>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d105      	bne.n	800c172 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c166:	4b08      	ldr	r3, [pc, #32]	@ (800c188 <osKernelInitialize+0x44>)
 800c168:	2201      	movs	r2, #1
 800c16a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	607b      	str	r3, [r7, #4]
 800c170:	e002      	b.n	800c178 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c172:	f04f 33ff 	mov.w	r3, #4294967295
 800c176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c178:	687b      	ldr	r3, [r7, #4]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	2000d3c4 	.word	0x2000d3c4

0800c18c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c192:	f3ef 8305 	mrs	r3, IPSR
 800c196:	603b      	str	r3, [r7, #0]
  return(result);
 800c198:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c19e:	f06f 0305 	mvn.w	r3, #5
 800c1a2:	607b      	str	r3, [r7, #4]
 800c1a4:	e010      	b.n	800c1c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d4 <osKernelStart+0x48>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d109      	bne.n	800c1c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1ae:	f7ff ffbf 	bl	800c130 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1b2:	4b08      	ldr	r3, [pc, #32]	@ (800c1d4 <osKernelStart+0x48>)
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1b8:	f002 f914 	bl	800e3e4 <vTaskStartScheduler>
      stat = osOK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	607b      	str	r3, [r7, #4]
 800c1c0:	e002      	b.n	800c1c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1c8:	687b      	ldr	r3, [r7, #4]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	2000d3c4 	.word	0x2000d3c4

0800c1d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08e      	sub	sp, #56	@ 0x38
 800c1dc:	af04      	add	r7, sp, #16
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e8:	f3ef 8305 	mrs	r3, IPSR
 800c1ec:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d17e      	bne.n	800c2f2 <osThreadNew+0x11a>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d07b      	beq.n	800c2f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1fa:	2380      	movs	r3, #128	@ 0x80
 800c1fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1fe:	2318      	movs	r3, #24
 800c200:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c202:	2300      	movs	r3, #0
 800c204:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c206:	f04f 33ff 	mov.w	r3, #4294967295
 800c20a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d045      	beq.n	800c29e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <osThreadNew+0x48>
        name = attr->name;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d008      	beq.n	800c246 <osThreadNew+0x6e>
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	2b38      	cmp	r3, #56	@ 0x38
 800c238:	d805      	bhi.n	800c246 <osThreadNew+0x6e>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <osThreadNew+0x72>
        return (NULL);
 800c246:	2300      	movs	r3, #0
 800c248:	e054      	b.n	800c2f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	089b      	lsrs	r3, r3, #2
 800c258:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00e      	beq.n	800c280 <osThreadNew+0xa8>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	2b5b      	cmp	r3, #91	@ 0x5b
 800c268:	d90a      	bls.n	800c280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d006      	beq.n	800c280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d002      	beq.n	800c280 <osThreadNew+0xa8>
        mem = 1;
 800c27a:	2301      	movs	r3, #1
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	e010      	b.n	800c2a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10c      	bne.n	800c2a2 <osThreadNew+0xca>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d108      	bne.n	800c2a2 <osThreadNew+0xca>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d104      	bne.n	800c2a2 <osThreadNew+0xca>
          mem = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	e001      	b.n	800c2a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d110      	bne.n	800c2ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2b0:	9202      	str	r2, [sp, #8]
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	6a3a      	ldr	r2, [r7, #32]
 800c2bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f001 feb4 	bl	800e02c <xTaskCreateStatic>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	e013      	b.n	800c2f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d110      	bne.n	800c2f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2d0:	6a3b      	ldr	r3, [r7, #32]
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	f107 0310 	add.w	r3, r7, #16
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f001 ff02 	bl	800e0ec <xTaskCreate>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d001      	beq.n	800c2f2 <osThreadNew+0x11a>
            hTask = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2f2:	693b      	ldr	r3, [r7, #16]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3728      	adds	r7, #40	@ 0x28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c304:	f3ef 8305 	mrs	r3, IPSR
 800c308:	60bb      	str	r3, [r7, #8]
  return(result);
 800c30a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <osDelay+0x1c>
    stat = osErrorISR;
 800c310:	f06f 0305 	mvn.w	r3, #5
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	e007      	b.n	800c328 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f002 f828 	bl	800e378 <vTaskDelay>
    }
  }

  return (stat);
 800c328:	68fb      	ldr	r3, [r7, #12]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f003 fa94 	bl	800f868 <pvTimerGetTimerID>
 800c340:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d005      	beq.n	800c354 <TimerCallback+0x22>
    callb->func (callb->arg);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	6852      	ldr	r2, [r2, #4]
 800c350:	4610      	mov	r0, r2
 800c352:	4798      	blx	r3
  }
}
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08c      	sub	sp, #48	@ 0x30
 800c360:	af02      	add	r7, sp, #8
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	607a      	str	r2, [r7, #4]
 800c366:	603b      	str	r3, [r7, #0]
 800c368:	460b      	mov	r3, r1
 800c36a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c36c:	2300      	movs	r3, #0
 800c36e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c370:	f3ef 8305 	mrs	r3, IPSR
 800c374:	613b      	str	r3, [r7, #16]
  return(result);
 800c376:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d163      	bne.n	800c444 <osTimerNew+0xe8>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d060      	beq.n	800c444 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c382:	2008      	movs	r0, #8
 800c384:	f003 fce2 	bl	800fd4c <pvPortMalloc>
 800c388:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d059      	beq.n	800c444 <osTimerNew+0xe8>
      callb->func = func;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c39c:	7afb      	ldrb	r3, [r7, #11]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	61fb      	str	r3, [r7, #28]
 800c3a6:	e001      	b.n	800c3ac <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01c      	beq.n	800c3f6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <osTimerNew+0x6e>
          name = attr->name;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d006      	beq.n	800c3e0 <osTimerNew+0x84>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3d8:	d902      	bls.n	800c3e0 <osTimerNew+0x84>
          mem = 1;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	61bb      	str	r3, [r7, #24]
 800c3de:	e00c      	b.n	800c3fa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d108      	bne.n	800c3fa <osTimerNew+0x9e>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d104      	bne.n	800c3fa <osTimerNew+0x9e>
            mem = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61bb      	str	r3, [r7, #24]
 800c3f4:	e001      	b.n	800c3fa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10c      	bne.n	800c41a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	4b12      	ldr	r3, [pc, #72]	@ (800c450 <osTimerNew+0xf4>)
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	2101      	movs	r1, #1
 800c410:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c412:	f002 fe9c 	bl	800f14e <xTimerCreateStatic>
 800c416:	6238      	str	r0, [r7, #32]
 800c418:	e00b      	b.n	800c432 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d108      	bne.n	800c432 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c420:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <osTimerNew+0xf4>)
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	69fa      	ldr	r2, [r7, #28]
 800c428:	2101      	movs	r1, #1
 800c42a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c42c:	f002 fe6e 	bl	800f10c <xTimerCreate>
 800c430:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d105      	bne.n	800c444 <osTimerNew+0xe8>
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <osTimerNew+0xe8>
        vPortFree (callb);
 800c43e:	6978      	ldr	r0, [r7, #20]
 800c440:	f003 fd52 	bl	800fee8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c444:	6a3b      	ldr	r3, [r7, #32]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3728      	adds	r7, #40	@ 0x28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	0800c333 	.word	0x0800c333

0800c454 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af02      	add	r7, sp, #8
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c462:	f3ef 8305 	mrs	r3, IPSR
 800c466:	60fb      	str	r3, [r7, #12]
  return(result);
 800c468:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <osTimerStart+0x22>
    stat = osErrorISR;
 800c46e:	f06f 0305 	mvn.w	r3, #5
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	e017      	b.n	800c4a6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d103      	bne.n	800c484 <osTimerStart+0x30>
    stat = osErrorParameter;
 800c47c:	f06f 0303 	mvn.w	r3, #3
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e010      	b.n	800c4a6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c484:	2300      	movs	r3, #0
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	2300      	movs	r3, #0
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	2104      	movs	r1, #4
 800c48e:	6938      	ldr	r0, [r7, #16]
 800c490:	f002 feda 	bl	800f248 <xTimerGenericCommand>
 800c494:	4603      	mov	r3, r0
 800c496:	2b01      	cmp	r3, #1
 800c498:	d102      	bne.n	800c4a0 <osTimerStart+0x4c>
      stat = osOK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	e002      	b.n	800c4a6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c4a0:	f06f 0302 	mvn.w	r3, #2
 800c4a4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c4a6:	697b      	ldr	r3, [r7, #20]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4bc:	f3ef 8305 	mrs	r3, IPSR
 800c4c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4c2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d12d      	bne.n	800c524 <osEventFlagsNew+0x74>
    mem = -1;
 800c4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4cc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d015      	beq.n	800c500 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d006      	beq.n	800c4ea <osEventFlagsNew+0x3a>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b1f      	cmp	r3, #31
 800c4e2:	d902      	bls.n	800c4ea <osEventFlagsNew+0x3a>
        mem = 1;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	613b      	str	r3, [r7, #16]
 800c4e8:	e00c      	b.n	800c504 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d108      	bne.n	800c504 <osEventFlagsNew+0x54>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d104      	bne.n	800c504 <osEventFlagsNew+0x54>
          mem = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	613b      	str	r3, [r7, #16]
 800c4fe:	e001      	b.n	800c504 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c500:	2300      	movs	r3, #0
 800c502:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d106      	bne.n	800c518 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 fba0 	bl	800cc54 <xEventGroupCreateStatic>
 800c514:	6178      	str	r0, [r7, #20]
 800c516:	e005      	b.n	800c524 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c51e:	f000 fbd2 	bl	800ccc6 <xEventGroupCreate>
 800c522:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c524:	697b      	ldr	r3, [r7, #20]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c52e:	b580      	push	{r7, lr}
 800c530:	b088      	sub	sp, #32
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c536:	2300      	movs	r3, #0
 800c538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c53a:	f3ef 8305 	mrs	r3, IPSR
 800c53e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c540:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c542:	2b00      	cmp	r3, #0
 800c544:	d174      	bne.n	800c630 <osMutexNew+0x102>
    if (attr != NULL) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	e001      	b.n	800c558 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c554:	2300      	movs	r3, #0
 800c556:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d002      	beq.n	800c568 <osMutexNew+0x3a>
      rmtx = 1U;
 800c562:	2301      	movs	r3, #1
 800c564:	617b      	str	r3, [r7, #20]
 800c566:	e001      	b.n	800c56c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d15c      	bne.n	800c630 <osMutexNew+0x102>
      mem = -1;
 800c576:	f04f 33ff 	mov.w	r3, #4294967295
 800c57a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d015      	beq.n	800c5ae <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d006      	beq.n	800c598 <osMutexNew+0x6a>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	2b4f      	cmp	r3, #79	@ 0x4f
 800c590:	d902      	bls.n	800c598 <osMutexNew+0x6a>
          mem = 1;
 800c592:	2301      	movs	r3, #1
 800c594:	613b      	str	r3, [r7, #16]
 800c596:	e00c      	b.n	800c5b2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d108      	bne.n	800c5b2 <osMutexNew+0x84>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d104      	bne.n	800c5b2 <osMutexNew+0x84>
            mem = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	613b      	str	r3, [r7, #16]
 800c5ac:	e001      	b.n	800c5b2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d112      	bne.n	800c5de <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d007      	beq.n	800c5ce <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	2004      	movs	r0, #4
 800c5c6:	f000 fdc4 	bl	800d152 <xQueueCreateMutexStatic>
 800c5ca:	61f8      	str	r0, [r7, #28]
 800c5cc:	e016      	b.n	800c5fc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	2001      	movs	r0, #1
 800c5d6:	f000 fdbc 	bl	800d152 <xQueueCreateMutexStatic>
 800c5da:	61f8      	str	r0, [r7, #28]
 800c5dc:	e00e      	b.n	800c5fc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10b      	bne.n	800c5fc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c5ea:	2004      	movs	r0, #4
 800c5ec:	f000 fd99 	bl	800d122 <xQueueCreateMutex>
 800c5f0:	61f8      	str	r0, [r7, #28]
 800c5f2:	e003      	b.n	800c5fc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	f000 fd94 	bl	800d122 <xQueueCreateMutex>
 800c5fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00c      	beq.n	800c61c <osMutexNew+0xee>
        if (attr != NULL) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <osMutexNew+0xe2>
          name = attr->name;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	e001      	b.n	800c614 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c614:	68f9      	ldr	r1, [r7, #12]
 800c616:	69f8      	ldr	r0, [r7, #28]
 800c618:	f001 fc80 	bl	800df1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d006      	beq.n	800c630 <osMutexNew+0x102>
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	f043 0301 	orr.w	r3, r3, #1
 800c62e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c630:	69fb      	ldr	r3, [r7, #28]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b086      	sub	sp, #24
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f023 0301 	bic.w	r3, r3, #1
 800c64a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c654:	2300      	movs	r3, #0
 800c656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c658:	f3ef 8305 	mrs	r3, IPSR
 800c65c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c65e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c664:	f06f 0305 	mvn.w	r3, #5
 800c668:	617b      	str	r3, [r7, #20]
 800c66a:	e02c      	b.n	800c6c6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c672:	f06f 0303 	mvn.w	r3, #3
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	e025      	b.n	800c6c6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d011      	beq.n	800c6a4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6938      	ldr	r0, [r7, #16]
 800c684:	f000 fdb5 	bl	800d1f2 <xQueueTakeMutexRecursive>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d01b      	beq.n	800c6c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d003      	beq.n	800c69c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c694:	f06f 0301 	mvn.w	r3, #1
 800c698:	617b      	str	r3, [r7, #20]
 800c69a:	e014      	b.n	800c6c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c69c:	f06f 0302 	mvn.w	r3, #2
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	e010      	b.n	800c6c6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6938      	ldr	r0, [r7, #16]
 800c6a8:	f001 f95a 	bl	800d960 <xQueueSemaphoreTake>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d009      	beq.n	800c6c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d003      	beq.n	800c6c0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c6b8:	f06f 0301 	mvn.w	r3, #1
 800c6bc:	617b      	str	r3, [r7, #20]
 800c6be:	e002      	b.n	800c6c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c6c0:	f06f 0302 	mvn.w	r3, #2
 800c6c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f023 0301 	bic.w	r3, r3, #1
 800c6de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6ec:	f3ef 8305 	mrs	r3, IPSR
 800c6f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c6f8:	f06f 0305 	mvn.w	r3, #5
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	e01f      	b.n	800c740 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d103      	bne.n	800c70e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c706:	f06f 0303 	mvn.w	r3, #3
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	e018      	b.n	800c740 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d009      	beq.n	800c728 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c714:	6938      	ldr	r0, [r7, #16]
 800c716:	f000 fd37 	bl	800d188 <xQueueGiveMutexRecursive>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d00f      	beq.n	800c740 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c720:	f06f 0302 	mvn.w	r3, #2
 800c724:	617b      	str	r3, [r7, #20]
 800c726:	e00b      	b.n	800c740 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c728:	2300      	movs	r3, #0
 800c72a:	2200      	movs	r2, #0
 800c72c:	2100      	movs	r1, #0
 800c72e:	6938      	ldr	r0, [r7, #16]
 800c730:	f000 fe04 	bl	800d33c <xQueueGenericSend>
 800c734:	4603      	mov	r3, r0
 800c736:	2b01      	cmp	r3, #1
 800c738:	d002      	beq.n	800c740 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c73a:	f06f 0302 	mvn.w	r3, #2
 800c73e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c740:	697b      	ldr	r3, [r7, #20]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b08a      	sub	sp, #40	@ 0x28
 800c74e:	af02      	add	r7, sp, #8
 800c750:	60f8      	str	r0, [r7, #12]
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c756:	2300      	movs	r3, #0
 800c758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c75a:	f3ef 8305 	mrs	r3, IPSR
 800c75e:	613b      	str	r3, [r7, #16]
  return(result);
 800c760:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c762:	2b00      	cmp	r3, #0
 800c764:	d175      	bne.n	800c852 <osSemaphoreNew+0x108>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d072      	beq.n	800c852 <osSemaphoreNew+0x108>
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	429a      	cmp	r2, r3
 800c772:	d86e      	bhi.n	800c852 <osSemaphoreNew+0x108>
    mem = -1;
 800c774:	f04f 33ff 	mov.w	r3, #4294967295
 800c778:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d015      	beq.n	800c7ac <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d006      	beq.n	800c796 <osSemaphoreNew+0x4c>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b4f      	cmp	r3, #79	@ 0x4f
 800c78e:	d902      	bls.n	800c796 <osSemaphoreNew+0x4c>
        mem = 1;
 800c790:	2301      	movs	r3, #1
 800c792:	61bb      	str	r3, [r7, #24]
 800c794:	e00c      	b.n	800c7b0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d108      	bne.n	800c7b0 <osSemaphoreNew+0x66>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d104      	bne.n	800c7b0 <osSemaphoreNew+0x66>
          mem = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	61bb      	str	r3, [r7, #24]
 800c7aa:	e001      	b.n	800c7b0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b6:	d04c      	beq.n	800c852 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d128      	bne.n	800c810 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d10a      	bne.n	800c7da <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	2203      	movs	r2, #3
 800c7ca:	9200      	str	r2, [sp, #0]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	f000 fbb1 	bl	800cf38 <xQueueGenericCreateStatic>
 800c7d6:	61f8      	str	r0, [r7, #28]
 800c7d8:	e005      	b.n	800c7e6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c7da:	2203      	movs	r2, #3
 800c7dc:	2100      	movs	r1, #0
 800c7de:	2001      	movs	r0, #1
 800c7e0:	f000 fc27 	bl	800d032 <xQueueGenericCreate>
 800c7e4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d022      	beq.n	800c832 <osSemaphoreNew+0xe8>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d01f      	beq.n	800c832 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	69f8      	ldr	r0, [r7, #28]
 800c7fa:	f000 fd9f 	bl	800d33c <xQueueGenericSend>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b01      	cmp	r3, #1
 800c802:	d016      	beq.n	800c832 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c804:	69f8      	ldr	r0, [r7, #28]
 800c806:	f001 fa3d 	bl	800dc84 <vQueueDelete>
            hSemaphore = NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	61fb      	str	r3, [r7, #28]
 800c80e:	e010      	b.n	800c832 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d108      	bne.n	800c828 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	461a      	mov	r2, r3
 800c81c:	68b9      	ldr	r1, [r7, #8]
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f000 fd1e 	bl	800d260 <xQueueCreateCountingSemaphoreStatic>
 800c824:	61f8      	str	r0, [r7, #28]
 800c826:	e004      	b.n	800c832 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 fd51 	bl	800d2d2 <xQueueCreateCountingSemaphore>
 800c830:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00c      	beq.n	800c852 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d003      	beq.n	800c846 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e001      	b.n	800c84a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c846:	2300      	movs	r3, #0
 800c848:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c84a:	6979      	ldr	r1, [r7, #20]
 800c84c:	69f8      	ldr	r0, [r7, #28]
 800c84e:	f001 fb65 	bl	800df1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c852:	69fb      	ldr	r3, [r7, #28]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3720      	adds	r7, #32
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b086      	sub	sp, #24
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d103      	bne.n	800c87c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c874:	f06f 0303 	mvn.w	r3, #3
 800c878:	617b      	str	r3, [r7, #20]
 800c87a:	e039      	b.n	800c8f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c87c:	f3ef 8305 	mrs	r3, IPSR
 800c880:	60fb      	str	r3, [r7, #12]
  return(result);
 800c882:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c884:	2b00      	cmp	r3, #0
 800c886:	d022      	beq.n	800c8ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c88e:	f06f 0303 	mvn.w	r3, #3
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	e02c      	b.n	800c8f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c896:	2300      	movs	r3, #0
 800c898:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c89a:	f107 0308 	add.w	r3, r7, #8
 800c89e:	461a      	mov	r2, r3
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	6938      	ldr	r0, [r7, #16]
 800c8a4:	f001 f96c 	bl	800db80 <xQueueReceiveFromISR>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d003      	beq.n	800c8b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c8ae:	f06f 0302 	mvn.w	r3, #2
 800c8b2:	617b      	str	r3, [r7, #20]
 800c8b4:	e01c      	b.n	800c8f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d019      	beq.n	800c8f0 <osSemaphoreAcquire+0x94>
 800c8bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c8fc <osSemaphoreAcquire+0xa0>)
 800c8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8c2:	601a      	str	r2, [r3, #0]
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	e010      	b.n	800c8f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6938      	ldr	r0, [r7, #16]
 800c8d2:	f001 f845 	bl	800d960 <xQueueSemaphoreTake>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d009      	beq.n	800c8f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c8e2:	f06f 0301 	mvn.w	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	e002      	b.n	800c8f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c8ea:	f06f 0302 	mvn.w	r3, #2
 800c8ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c8f0:	697b      	ldr	r3, [r7, #20]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d103      	bne.n	800c91e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c916:	f06f 0303 	mvn.w	r3, #3
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	e02c      	b.n	800c978 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c91e:	f3ef 8305 	mrs	r3, IPSR
 800c922:	60fb      	str	r3, [r7, #12]
  return(result);
 800c924:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c926:	2b00      	cmp	r3, #0
 800c928:	d01a      	beq.n	800c960 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c92a:	2300      	movs	r3, #0
 800c92c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c92e:	f107 0308 	add.w	r3, r7, #8
 800c932:	4619      	mov	r1, r3
 800c934:	6938      	ldr	r0, [r7, #16]
 800c936:	f000 fea1 	bl	800d67c <xQueueGiveFromISR>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d003      	beq.n	800c948 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c940:	f06f 0302 	mvn.w	r3, #2
 800c944:	617b      	str	r3, [r7, #20]
 800c946:	e017      	b.n	800c978 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d014      	beq.n	800c978 <osSemaphoreRelease+0x78>
 800c94e:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <osSemaphoreRelease+0x84>)
 800c950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	e00b      	b.n	800c978 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c960:	2300      	movs	r3, #0
 800c962:	2200      	movs	r2, #0
 800c964:	2100      	movs	r1, #0
 800c966:	6938      	ldr	r0, [r7, #16]
 800c968:	f000 fce8 	bl	800d33c <xQueueGenericSend>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d002      	beq.n	800c978 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c972:	f06f 0302 	mvn.w	r3, #2
 800c976:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c978:	697b      	ldr	r3, [r7, #20]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	e000ed04 	.word	0xe000ed04

0800c988 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08a      	sub	sp, #40	@ 0x28
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c998:	f3ef 8305 	mrs	r3, IPSR
 800c99c:	613b      	str	r3, [r7, #16]
  return(result);
 800c99e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d15f      	bne.n	800ca64 <osMessageQueueNew+0xdc>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d05c      	beq.n	800ca64 <osMessageQueueNew+0xdc>
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d059      	beq.n	800ca64 <osMessageQueueNew+0xdc>
    mem = -1;
 800c9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d029      	beq.n	800ca10 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d012      	beq.n	800c9ea <osMessageQueueNew+0x62>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	2b4f      	cmp	r3, #79	@ 0x4f
 800c9ca:	d90e      	bls.n	800c9ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00a      	beq.n	800c9ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	695a      	ldr	r2, [r3, #20]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	68b9      	ldr	r1, [r7, #8]
 800c9dc:	fb01 f303 	mul.w	r3, r1, r3
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d302      	bcc.n	800c9ea <osMessageQueueNew+0x62>
        mem = 1;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	61bb      	str	r3, [r7, #24]
 800c9e8:	e014      	b.n	800ca14 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d110      	bne.n	800ca14 <osMessageQueueNew+0x8c>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10c      	bne.n	800ca14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d108      	bne.n	800ca14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d104      	bne.n	800ca14 <osMessageQueueNew+0x8c>
          mem = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	61bb      	str	r3, [r7, #24]
 800ca0e:	e001      	b.n	800ca14 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d10b      	bne.n	800ca32 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	691a      	ldr	r2, [r3, #16]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	2100      	movs	r1, #0
 800ca24:	9100      	str	r1, [sp, #0]
 800ca26:	68b9      	ldr	r1, [r7, #8]
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f000 fa85 	bl	800cf38 <xQueueGenericCreateStatic>
 800ca2e:	61f8      	str	r0, [r7, #28]
 800ca30:	e008      	b.n	800ca44 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d105      	bne.n	800ca44 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ca38:	2200      	movs	r2, #0
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 faf8 	bl	800d032 <xQueueGenericCreate>
 800ca42:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00c      	beq.n	800ca64 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	e001      	b.n	800ca5c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ca5c:	6979      	ldr	r1, [r7, #20]
 800ca5e:	69f8      	ldr	r0, [r7, #28]
 800ca60:	f001 fa5c 	bl	800df1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ca64:	69fb      	ldr	r3, [r7, #28]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3720      	adds	r7, #32
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
	...

0800ca70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca88:	f3ef 8305 	mrs	r3, IPSR
 800ca8c:	617b      	str	r3, [r7, #20]
  return(result);
 800ca8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d028      	beq.n	800cae6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d005      	beq.n	800caa6 <osMessageQueuePut+0x36>
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <osMessageQueuePut+0x36>
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800caa6:	f06f 0303 	mvn.w	r3, #3
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	e038      	b.n	800cb20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800caae:	2300      	movs	r3, #0
 800cab0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cab2:	f107 0210 	add.w	r2, r7, #16
 800cab6:	2300      	movs	r3, #0
 800cab8:	68b9      	ldr	r1, [r7, #8]
 800caba:	69b8      	ldr	r0, [r7, #24]
 800cabc:	f000 fd40 	bl	800d540 <xQueueGenericSendFromISR>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d003      	beq.n	800cace <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cac6:	f06f 0302 	mvn.w	r3, #2
 800caca:	61fb      	str	r3, [r7, #28]
 800cacc:	e028      	b.n	800cb20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d025      	beq.n	800cb20 <osMessageQueuePut+0xb0>
 800cad4:	4b15      	ldr	r3, [pc, #84]	@ (800cb2c <osMessageQueuePut+0xbc>)
 800cad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	e01c      	b.n	800cb20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d002      	beq.n	800caf2 <osMessageQueuePut+0x82>
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d103      	bne.n	800cafa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800caf2:	f06f 0303 	mvn.w	r3, #3
 800caf6:	61fb      	str	r3, [r7, #28]
 800caf8:	e012      	b.n	800cb20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cafa:	2300      	movs	r3, #0
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	68b9      	ldr	r1, [r7, #8]
 800cb00:	69b8      	ldr	r0, [r7, #24]
 800cb02:	f000 fc1b 	bl	800d33c <xQueueGenericSend>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d009      	beq.n	800cb20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cb12:	f06f 0301 	mvn.w	r3, #1
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	e002      	b.n	800cb20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cb1a:	f06f 0302 	mvn.w	r3, #2
 800cb1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb20:	69fb      	ldr	r3, [r7, #28]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3720      	adds	r7, #32
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	e000ed04 	.word	0xe000ed04

0800cb30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb46:	f3ef 8305 	mrs	r3, IPSR
 800cb4a:	617b      	str	r3, [r7, #20]
  return(result);
 800cb4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d028      	beq.n	800cba4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d005      	beq.n	800cb64 <osMessageQueueGet+0x34>
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <osMessageQueueGet+0x34>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cb64:	f06f 0303 	mvn.w	r3, #3
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	e037      	b.n	800cbdc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cb70:	f107 0310 	add.w	r3, r7, #16
 800cb74:	461a      	mov	r2, r3
 800cb76:	68b9      	ldr	r1, [r7, #8]
 800cb78:	69b8      	ldr	r0, [r7, #24]
 800cb7a:	f001 f801 	bl	800db80 <xQueueReceiveFromISR>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d003      	beq.n	800cb8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cb84:	f06f 0302 	mvn.w	r3, #2
 800cb88:	61fb      	str	r3, [r7, #28]
 800cb8a:	e027      	b.n	800cbdc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d024      	beq.n	800cbdc <osMessageQueueGet+0xac>
 800cb92:	4b15      	ldr	r3, [pc, #84]	@ (800cbe8 <osMessageQueueGet+0xb8>)
 800cb94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	e01b      	b.n	800cbdc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <osMessageQueueGet+0x80>
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cbb0:	f06f 0303 	mvn.w	r3, #3
 800cbb4:	61fb      	str	r3, [r7, #28]
 800cbb6:	e011      	b.n	800cbdc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	69b8      	ldr	r0, [r7, #24]
 800cbbe:	f000 fded 	bl	800d79c <xQueueReceive>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d009      	beq.n	800cbdc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cbce:	f06f 0301 	mvn.w	r3, #1
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e002      	b.n	800cbdc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cbd6:	f06f 0302 	mvn.w	r3, #2
 800cbda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cbdc:	69fb      	ldr	r3, [r7, #28]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3720      	adds	r7, #32
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	4a07      	ldr	r2, [pc, #28]	@ (800cc18 <vApplicationGetIdleTaskMemory+0x2c>)
 800cbfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	4a06      	ldr	r2, [pc, #24]	@ (800cc1c <vApplicationGetIdleTaskMemory+0x30>)
 800cc02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2280      	movs	r2, #128	@ 0x80
 800cc08:	601a      	str	r2, [r3, #0]
}
 800cc0a:	bf00      	nop
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	2000d3c8 	.word	0x2000d3c8
 800cc1c:	2000d424 	.word	0x2000d424

0800cc20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4a07      	ldr	r2, [pc, #28]	@ (800cc4c <vApplicationGetTimerTaskMemory+0x2c>)
 800cc30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	4a06      	ldr	r2, [pc, #24]	@ (800cc50 <vApplicationGetTimerTaskMemory+0x30>)
 800cc36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800cc3e:	601a      	str	r2, [r3, #0]
}
 800cc40:	bf00      	nop
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	2000d624 	.word	0x2000d624
 800cc50:	2000d680 	.word	0x2000d680

0800cc54 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10b      	bne.n	800cc7a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800cc7a:	2320      	movs	r3, #32
 800cc7c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b20      	cmp	r3, #32
 800cc82:	d00b      	beq.n	800cc9c <xEventGroupCreateStatic+0x48>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	60fb      	str	r3, [r7, #12]
}
 800cc96:	bf00      	nop
 800cc98:	bf00      	nop
 800cc9a:	e7fd      	b.n	800cc98 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00a      	beq.n	800ccbc <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f822 	bl	800ccfa <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ccbc:	697b      	ldr	r3, [r7, #20]
	}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b082      	sub	sp, #8
 800ccca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800cccc:	2020      	movs	r0, #32
 800ccce:	f003 f83d 	bl	800fd4c <pvPortMalloc>
 800ccd2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3304      	adds	r3, #4
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 f808 	bl	800ccfa <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ccf0:	687b      	ldr	r3, [r7, #4]
	}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b083      	sub	sp, #12
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f103 0208 	add.w	r2, r3, #8
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f103 0208 	add.w	r2, r3, #8
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f103 0208 	add.w	r2, r3, #8
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd2e:	bf00      	nop
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b083      	sub	sp, #12
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	689a      	ldr	r2, [r3, #8]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	601a      	str	r2, [r3, #0]
}
 800cd90:	bf00      	nop
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb2:	d103      	bne.n	800cdbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	e00c      	b.n	800cdd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	e002      	b.n	800cdca <vListInsert+0x2e>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d2f6      	bcs.n	800cdc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	601a      	str	r2, [r3, #0]
}
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b085      	sub	sp, #20
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	6892      	ldr	r2, [r2, #8]
 800ce24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	6852      	ldr	r2, [r2, #4]
 800ce2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d103      	bne.n	800ce42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689a      	ldr	r2, [r3, #8]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	1e5a      	subs	r2, r3, #1
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
	...

0800ce64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10b      	bne.n	800ce90 <xQueueGenericReset+0x2c>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	60bb      	str	r3, [r7, #8]
}
 800ce8a:	bf00      	nop
 800ce8c:	bf00      	nop
 800ce8e:	e7fd      	b.n	800ce8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce90:	f002 fe3a 	bl	800fb08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce9c:	68f9      	ldr	r1, [r7, #12]
 800ce9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cea0:	fb01 f303 	mul.w	r3, r1, r3
 800cea4:	441a      	add	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cec0:	3b01      	subs	r3, #1
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cec6:	fb01 f303 	mul.w	r3, r1, r3
 800ceca:	441a      	add	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	22ff      	movs	r2, #255	@ 0xff
 800ced4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	22ff      	movs	r2, #255	@ 0xff
 800cedc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d114      	bne.n	800cf10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d01a      	beq.n	800cf24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3310      	adds	r3, #16
 800cef2:	4618      	mov	r0, r3
 800cef4:	f001 fd0c 	bl	800e910 <xTaskRemoveFromEventList>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d012      	beq.n	800cf24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cefe:	4b0d      	ldr	r3, [pc, #52]	@ (800cf34 <xQueueGenericReset+0xd0>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	e009      	b.n	800cf24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3310      	adds	r3, #16
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7ff fef0 	bl	800ccfa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3324      	adds	r3, #36	@ 0x24
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff feeb 	bl	800ccfa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf24:	f002 fe22 	bl	800fb6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf28:	2301      	movs	r3, #1
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	e000ed04 	.word	0xe000ed04

0800cf38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08e      	sub	sp, #56	@ 0x38
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10b      	bne.n	800cf64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf5e:	bf00      	nop
 800cf60:	bf00      	nop
 800cf62:	e7fd      	b.n	800cf60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10b      	bne.n	800cf82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	e7fd      	b.n	800cf7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <xQueueGenericCreateStatic+0x56>
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <xQueueGenericCreateStatic+0x5a>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e000      	b.n	800cf94 <xQueueGenericCreateStatic+0x5c>
 800cf92:	2300      	movs	r3, #0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10b      	bne.n	800cfb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	623b      	str	r3, [r7, #32]
}
 800cfaa:	bf00      	nop
 800cfac:	bf00      	nop
 800cfae:	e7fd      	b.n	800cfac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d102      	bne.n	800cfbc <xQueueGenericCreateStatic+0x84>
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <xQueueGenericCreateStatic+0x88>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e000      	b.n	800cfc2 <xQueueGenericCreateStatic+0x8a>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10b      	bne.n	800cfde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	61fb      	str	r3, [r7, #28]
}
 800cfd8:	bf00      	nop
 800cfda:	bf00      	nop
 800cfdc:	e7fd      	b.n	800cfda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfde:	2350      	movs	r3, #80	@ 0x50
 800cfe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b50      	cmp	r3, #80	@ 0x50
 800cfe6:	d00b      	beq.n	800d000 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	61bb      	str	r3, [r7, #24]
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d000:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00d      	beq.n	800d028 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d014:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	4613      	mov	r3, r2
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	68b9      	ldr	r1, [r7, #8]
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f000 f840 	bl	800d0a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3730      	adds	r7, #48	@ 0x30
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d032:	b580      	push	{r7, lr}
 800d034:	b08a      	sub	sp, #40	@ 0x28
 800d036:	af02      	add	r7, sp, #8
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	4613      	mov	r3, r2
 800d03e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10b      	bne.n	800d05e <xQueueGenericCreate+0x2c>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	613b      	str	r3, [r7, #16]
}
 800d058:	bf00      	nop
 800d05a:	bf00      	nop
 800d05c:	e7fd      	b.n	800d05a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	fb02 f303 	mul.w	r3, r2, r3
 800d066:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	3350      	adds	r3, #80	@ 0x50
 800d06c:	4618      	mov	r0, r3
 800d06e:	f002 fe6d 	bl	800fd4c <pvPortMalloc>
 800d072:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d011      	beq.n	800d09e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	3350      	adds	r3, #80	@ 0x50
 800d082:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d08c:	79fa      	ldrb	r2, [r7, #7]
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	4613      	mov	r3, r2
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	68b9      	ldr	r1, [r7, #8]
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f000 f805 	bl	800d0a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d09e:	69bb      	ldr	r3, [r7, #24]
	}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3720      	adds	r7, #32
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d103      	bne.n	800d0c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	69ba      	ldr	r2, [r7, #24]
 800d0c0:	601a      	str	r2, [r3, #0]
 800d0c2:	e002      	b.n	800d0ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	69b8      	ldr	r0, [r7, #24]
 800d0da:	f7ff fec3 	bl	800ce64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	78fa      	ldrb	r2, [r7, #3]
 800d0e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0e6:	bf00      	nop
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b082      	sub	sp, #8
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00e      	beq.n	800d11a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d10e:	2300      	movs	r3, #0
 800d110:	2200      	movs	r2, #0
 800d112:	2100      	movs	r1, #0
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f911 	bl	800d33c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d122:	b580      	push	{r7, lr}
 800d124:	b086      	sub	sp, #24
 800d126:	af00      	add	r7, sp, #0
 800d128:	4603      	mov	r3, r0
 800d12a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d12c:	2301      	movs	r3, #1
 800d12e:	617b      	str	r3, [r7, #20]
 800d130:	2300      	movs	r3, #0
 800d132:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	461a      	mov	r2, r3
 800d138:	6939      	ldr	r1, [r7, #16]
 800d13a:	6978      	ldr	r0, [r7, #20]
 800d13c:	f7ff ff79 	bl	800d032 <xQueueGenericCreate>
 800d140:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f7ff ffd3 	bl	800d0ee <prvInitialiseMutex>

		return xNewQueue;
 800d148:	68fb      	ldr	r3, [r7, #12]
	}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3718      	adds	r7, #24
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d152:	b580      	push	{r7, lr}
 800d154:	b088      	sub	sp, #32
 800d156:	af02      	add	r7, sp, #8
 800d158:	4603      	mov	r3, r0
 800d15a:	6039      	str	r1, [r7, #0]
 800d15c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d15e:	2301      	movs	r3, #1
 800d160:	617b      	str	r3, [r7, #20]
 800d162:	2300      	movs	r3, #0
 800d164:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2200      	movs	r2, #0
 800d16e:	6939      	ldr	r1, [r7, #16]
 800d170:	6978      	ldr	r0, [r7, #20]
 800d172:	f7ff fee1 	bl	800cf38 <xQueueGenericCreateStatic>
 800d176:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff ffb8 	bl	800d0ee <prvInitialiseMutex>

		return xNewQueue;
 800d17e:	68fb      	ldr	r3, [r7, #12]
	}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d188:	b590      	push	{r4, r7, lr}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10b      	bne.n	800d1b2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	60fb      	str	r3, [r7, #12]
}
 800d1ac:	bf00      	nop
 800d1ae:	bf00      	nop
 800d1b0:	e7fd      	b.n	800d1ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	689c      	ldr	r4, [r3, #8]
 800d1b6:	f001 fd6d 	bl	800ec94 <xTaskGetCurrentTaskHandle>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	429c      	cmp	r4, r3
 800d1be:	d111      	bne.n	800d1e4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	1e5a      	subs	r2, r3, #1
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d105      	bne.n	800d1de <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	6938      	ldr	r0, [r7, #16]
 800d1da:	f000 f8af 	bl	800d33c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	e001      	b.n	800d1e8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d1e8:	697b      	ldr	r3, [r7, #20]
	}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	371c      	adds	r7, #28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd90      	pop	{r4, r7, pc}

0800d1f2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d1f2:	b590      	push	{r4, r7, lr}
 800d1f4:	b087      	sub	sp, #28
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10b      	bne.n	800d21e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	60fb      	str	r3, [r7, #12]
}
 800d218:	bf00      	nop
 800d21a:	bf00      	nop
 800d21c:	e7fd      	b.n	800d21a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	689c      	ldr	r4, [r3, #8]
 800d222:	f001 fd37 	bl	800ec94 <xTaskGetCurrentTaskHandle>
 800d226:	4603      	mov	r3, r0
 800d228:	429c      	cmp	r4, r3
 800d22a:	d107      	bne.n	800d23c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d236:	2301      	movs	r3, #1
 800d238:	617b      	str	r3, [r7, #20]
 800d23a:	e00c      	b.n	800d256 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6938      	ldr	r0, [r7, #16]
 800d240:	f000 fb8e 	bl	800d960 <xQueueSemaphoreTake>
 800d244:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	1c5a      	adds	r2, r3, #1
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d256:	697b      	ldr	r3, [r7, #20]
	}
 800d258:	4618      	mov	r0, r3
 800d25a:	371c      	adds	r7, #28
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd90      	pop	{r4, r7, pc}

0800d260 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08a      	sub	sp, #40	@ 0x28
 800d264:	af02      	add	r7, sp, #8
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10b      	bne.n	800d28a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	61bb      	str	r3, [r7, #24]
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop
 800d288:	e7fd      	b.n	800d286 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d90b      	bls.n	800d2aa <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	617b      	str	r3, [r7, #20]
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop
 800d2a8:	e7fd      	b.n	800d2a6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7ff fe3f 	bl	800cf38 <xQueueGenericCreateStatic>
 800d2ba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
	}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3720      	adds	r7, #32
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b086      	sub	sp, #24
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10b      	bne.n	800d2fa <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	613b      	str	r3, [r7, #16]
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop
 800d2f8:	e7fd      	b.n	800d2f6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d90b      	bls.n	800d31a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	60fb      	str	r3, [r7, #12]
}
 800d314:	bf00      	nop
 800d316:	bf00      	nop
 800d318:	e7fd      	b.n	800d316 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d31a:	2202      	movs	r2, #2
 800d31c:	2100      	movs	r1, #0
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fe87 	bl	800d032 <xQueueGenericCreate>
 800d324:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d332:	697b      	ldr	r3, [r7, #20]
	}
 800d334:	4618      	mov	r0, r3
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08e      	sub	sp, #56	@ 0x38
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d34a:	2300      	movs	r3, #0
 800d34c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10b      	bne.n	800d370 <xQueueGenericSend+0x34>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d36a:	bf00      	nop
 800d36c:	bf00      	nop
 800d36e:	e7fd      	b.n	800d36c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d103      	bne.n	800d37e <xQueueGenericSend+0x42>
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <xQueueGenericSend+0x46>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <xQueueGenericSend+0x48>
 800d382:	2300      	movs	r3, #0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10b      	bne.n	800d3a0 <xQueueGenericSend+0x64>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d39a:	bf00      	nop
 800d39c:	bf00      	nop
 800d39e:	e7fd      	b.n	800d39c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d103      	bne.n	800d3ae <xQueueGenericSend+0x72>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d101      	bne.n	800d3b2 <xQueueGenericSend+0x76>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e000      	b.n	800d3b4 <xQueueGenericSend+0x78>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10b      	bne.n	800d3d0 <xQueueGenericSend+0x94>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	623b      	str	r3, [r7, #32]
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	e7fd      	b.n	800d3cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3d0:	f001 fc70 	bl	800ecb4 <xTaskGetSchedulerState>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d102      	bne.n	800d3e0 <xQueueGenericSend+0xa4>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d101      	bne.n	800d3e4 <xQueueGenericSend+0xa8>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e000      	b.n	800d3e6 <xQueueGenericSend+0xaa>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10b      	bne.n	800d402 <xQueueGenericSend+0xc6>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	61fb      	str	r3, [r7, #28]
}
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	e7fd      	b.n	800d3fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d402:	f002 fb81 	bl	800fb08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d40e:	429a      	cmp	r2, r3
 800d410:	d302      	bcc.n	800d418 <xQueueGenericSend+0xdc>
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2b02      	cmp	r3, #2
 800d416:	d129      	bne.n	800d46c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	68b9      	ldr	r1, [r7, #8]
 800d41c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d41e:	f000 fc6d 	bl	800dcfc <prvCopyDataToQueue>
 800d422:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d010      	beq.n	800d44e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42e:	3324      	adds	r3, #36	@ 0x24
 800d430:	4618      	mov	r0, r3
 800d432:	f001 fa6d 	bl	800e910 <xTaskRemoveFromEventList>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d013      	beq.n	800d464 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d43c:	4b3f      	ldr	r3, [pc, #252]	@ (800d53c <xQueueGenericSend+0x200>)
 800d43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	e00a      	b.n	800d464 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d007      	beq.n	800d464 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d454:	4b39      	ldr	r3, [pc, #228]	@ (800d53c <xQueueGenericSend+0x200>)
 800d456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d464:	f002 fb82 	bl	800fb6c <vPortExitCritical>
				return pdPASS;
 800d468:	2301      	movs	r3, #1
 800d46a:	e063      	b.n	800d534 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d103      	bne.n	800d47a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d472:	f002 fb7b 	bl	800fb6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d476:	2300      	movs	r3, #0
 800d478:	e05c      	b.n	800d534 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d106      	bne.n	800d48e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d480:	f107 0314 	add.w	r3, r7, #20
 800d484:	4618      	mov	r0, r3
 800d486:	f001 faa7 	bl	800e9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d48a:	2301      	movs	r3, #1
 800d48c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d48e:	f002 fb6d 	bl	800fb6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d492:	f001 f80f 	bl	800e4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d496:	f002 fb37 	bl	800fb08 <vPortEnterCritical>
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4a0:	b25b      	sxtb	r3, r3
 800d4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a6:	d103      	bne.n	800d4b0 <xQueueGenericSend+0x174>
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d103      	bne.n	800d4c6 <xQueueGenericSend+0x18a>
 800d4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4c6:	f002 fb51 	bl	800fb6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4ca:	1d3a      	adds	r2, r7, #4
 800d4cc:	f107 0314 	add.w	r3, r7, #20
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f001 fa96 	bl	800ea04 <xTaskCheckForTimeOut>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d124      	bne.n	800d528 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d4de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4e0:	f000 fd04 	bl	800deec <prvIsQueueFull>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d018      	beq.n	800d51c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ec:	3310      	adds	r3, #16
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f001 f9ba 	bl	800e86c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d4f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4fa:	f000 fc8f 	bl	800de1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d4fe:	f000 ffe7 	bl	800e4d0 <xTaskResumeAll>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	f47f af7c 	bne.w	800d402 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d50a:	4b0c      	ldr	r3, [pc, #48]	@ (800d53c <xQueueGenericSend+0x200>)
 800d50c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	e772      	b.n	800d402 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d51c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d51e:	f000 fc7d 	bl	800de1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d522:	f000 ffd5 	bl	800e4d0 <xTaskResumeAll>
 800d526:	e76c      	b.n	800d402 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d52a:	f000 fc77 	bl	800de1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d52e:	f000 ffcf 	bl	800e4d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d534:	4618      	mov	r0, r3
 800d536:	3738      	adds	r7, #56	@ 0x38
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	e000ed04 	.word	0xe000ed04

0800d540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b090      	sub	sp, #64	@ 0x40
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10b      	bne.n	800d570 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d56a:	bf00      	nop
 800d56c:	bf00      	nop
 800d56e:	e7fd      	b.n	800d56c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d103      	bne.n	800d57e <xQueueGenericSendFromISR+0x3e>
 800d576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <xQueueGenericSendFromISR+0x42>
 800d57e:	2301      	movs	r3, #1
 800d580:	e000      	b.n	800d584 <xQueueGenericSendFromISR+0x44>
 800d582:	2300      	movs	r3, #0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10b      	bne.n	800d5a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d59a:	bf00      	nop
 800d59c:	bf00      	nop
 800d59e:	e7fd      	b.n	800d59c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d103      	bne.n	800d5ae <xQueueGenericSendFromISR+0x6e>
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d101      	bne.n	800d5b2 <xQueueGenericSendFromISR+0x72>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <xQueueGenericSendFromISR+0x74>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10b      	bne.n	800d5d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	623b      	str	r3, [r7, #32]
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5d0:	f002 fb7a 	bl	800fcc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d5d4:	f3ef 8211 	mrs	r2, BASEPRI
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	61fa      	str	r2, [r7, #28]
 800d5ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d5ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d302      	bcc.n	800d602 <xQueueGenericSendFromISR+0xc2>
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d12f      	bne.n	800d662 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d610:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	68b9      	ldr	r1, [r7, #8]
 800d616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d618:	f000 fb70 	bl	800dcfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d61c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d624:	d112      	bne.n	800d64c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d016      	beq.n	800d65c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	3324      	adds	r3, #36	@ 0x24
 800d632:	4618      	mov	r0, r3
 800d634:	f001 f96c 	bl	800e910 <xTaskRemoveFromEventList>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00e      	beq.n	800d65c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00b      	beq.n	800d65c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	e007      	b.n	800d65c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d64c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d650:	3301      	adds	r3, #1
 800d652:	b2db      	uxtb	r3, r3
 800d654:	b25a      	sxtb	r2, r3
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d65c:	2301      	movs	r3, #1
 800d65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d660:	e001      	b.n	800d666 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d662:	2300      	movs	r3, #0
 800d664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d668:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d674:	4618      	mov	r0, r3
 800d676:	3740      	adds	r7, #64	@ 0x40
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08e      	sub	sp, #56	@ 0x38
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10b      	bne.n	800d6a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	623b      	str	r3, [r7, #32]
}
 800d6a2:	bf00      	nop
 800d6a4:	bf00      	nop
 800d6a6:	e7fd      	b.n	800d6a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00b      	beq.n	800d6c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	61fb      	str	r3, [r7, #28]
}
 800d6c2:	bf00      	nop
 800d6c4:	bf00      	nop
 800d6c6:	e7fd      	b.n	800d6c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <xQueueGiveFromISR+0x5c>
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <xQueueGiveFromISR+0x60>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e000      	b.n	800d6de <xQueueGiveFromISR+0x62>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10b      	bne.n	800d6fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	61bb      	str	r3, [r7, #24]
}
 800d6f4:	bf00      	nop
 800d6f6:	bf00      	nop
 800d6f8:	e7fd      	b.n	800d6f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6fa:	f002 fae5 	bl	800fcc8 <vPortValidateInterruptPriority>
	__asm volatile
 800d6fe:	f3ef 8211 	mrs	r2, BASEPRI
 800d702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d706:	f383 8811 	msr	BASEPRI, r3
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	617a      	str	r2, [r7, #20]
 800d714:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d716:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d718:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d71e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d726:	429a      	cmp	r2, r3
 800d728:	d22b      	bcs.n	800d782 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d72c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d73c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d744:	d112      	bne.n	800d76c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d016      	beq.n	800d77c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d750:	3324      	adds	r3, #36	@ 0x24
 800d752:	4618      	mov	r0, r3
 800d754:	f001 f8dc 	bl	800e910 <xTaskRemoveFromEventList>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00e      	beq.n	800d77c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00b      	beq.n	800d77c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	2201      	movs	r2, #1
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	e007      	b.n	800d77c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d76c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d770:	3301      	adds	r3, #1
 800d772:	b2db      	uxtb	r3, r3
 800d774:	b25a      	sxtb	r2, r3
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d77c:	2301      	movs	r3, #1
 800d77e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d780:	e001      	b.n	800d786 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d782:	2300      	movs	r3, #0
 800d784:	637b      	str	r3, [r7, #52]	@ 0x34
 800d786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d788:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f383 8811 	msr	BASEPRI, r3
}
 800d790:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d794:	4618      	mov	r0, r3
 800d796:	3738      	adds	r7, #56	@ 0x38
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08c      	sub	sp, #48	@ 0x30
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d10b      	bne.n	800d7ce <xQueueReceive+0x32>
	__asm volatile
 800d7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	623b      	str	r3, [r7, #32]
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	e7fd      	b.n	800d7ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d103      	bne.n	800d7dc <xQueueReceive+0x40>
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <xQueueReceive+0x44>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e000      	b.n	800d7e2 <xQueueReceive+0x46>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10b      	bne.n	800d7fe <xQueueReceive+0x62>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	61fb      	str	r3, [r7, #28]
}
 800d7f8:	bf00      	nop
 800d7fa:	bf00      	nop
 800d7fc:	e7fd      	b.n	800d7fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7fe:	f001 fa59 	bl	800ecb4 <xTaskGetSchedulerState>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d102      	bne.n	800d80e <xQueueReceive+0x72>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <xQueueReceive+0x76>
 800d80e:	2301      	movs	r3, #1
 800d810:	e000      	b.n	800d814 <xQueueReceive+0x78>
 800d812:	2300      	movs	r3, #0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10b      	bne.n	800d830 <xQueueReceive+0x94>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	61bb      	str	r3, [r7, #24]
}
 800d82a:	bf00      	nop
 800d82c:	bf00      	nop
 800d82e:	e7fd      	b.n	800d82c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d830:	f002 f96a 	bl	800fb08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d838:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01f      	beq.n	800d880 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d844:	f000 fac4 	bl	800ddd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84a:	1e5a      	subs	r2, r3, #1
 800d84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00f      	beq.n	800d878 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85a:	3310      	adds	r3, #16
 800d85c:	4618      	mov	r0, r3
 800d85e:	f001 f857 	bl	800e910 <xTaskRemoveFromEventList>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d007      	beq.n	800d878 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d868:	4b3c      	ldr	r3, [pc, #240]	@ (800d95c <xQueueReceive+0x1c0>)
 800d86a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d878:	f002 f978 	bl	800fb6c <vPortExitCritical>
				return pdPASS;
 800d87c:	2301      	movs	r3, #1
 800d87e:	e069      	b.n	800d954 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d103      	bne.n	800d88e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d886:	f002 f971 	bl	800fb6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d88a:	2300      	movs	r3, #0
 800d88c:	e062      	b.n	800d954 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d890:	2b00      	cmp	r3, #0
 800d892:	d106      	bne.n	800d8a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d894:	f107 0310 	add.w	r3, r7, #16
 800d898:	4618      	mov	r0, r3
 800d89a:	f001 f89d 	bl	800e9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8a2:	f002 f963 	bl	800fb6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8a6:	f000 fe05 	bl	800e4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8aa:	f002 f92d 	bl	800fb08 <vPortEnterCritical>
 800d8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8b4:	b25b      	sxtb	r3, r3
 800d8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ba:	d103      	bne.n	800d8c4 <xQueueReceive+0x128>
 800d8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8ca:	b25b      	sxtb	r3, r3
 800d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d0:	d103      	bne.n	800d8da <xQueueReceive+0x13e>
 800d8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8da:	f002 f947 	bl	800fb6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8de:	1d3a      	adds	r2, r7, #4
 800d8e0:	f107 0310 	add.w	r3, r7, #16
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f001 f88c 	bl	800ea04 <xTaskCheckForTimeOut>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d123      	bne.n	800d93a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8f4:	f000 fae4 	bl	800dec0 <prvIsQueueEmpty>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d017      	beq.n	800d92e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d900:	3324      	adds	r3, #36	@ 0x24
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f000 ffb0 	bl	800e86c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d90c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d90e:	f000 fa85 	bl	800de1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d912:	f000 fddd 	bl	800e4d0 <xTaskResumeAll>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d189      	bne.n	800d830 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d91c:	4b0f      	ldr	r3, [pc, #60]	@ (800d95c <xQueueReceive+0x1c0>)
 800d91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	e780      	b.n	800d830 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d92e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d930:	f000 fa74 	bl	800de1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d934:	f000 fdcc 	bl	800e4d0 <xTaskResumeAll>
 800d938:	e77a      	b.n	800d830 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d93a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d93c:	f000 fa6e 	bl	800de1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d940:	f000 fdc6 	bl	800e4d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d946:	f000 fabb 	bl	800dec0 <prvIsQueueEmpty>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f43f af6f 	beq.w	800d830 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d952:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d954:	4618      	mov	r0, r3
 800d956:	3730      	adds	r7, #48	@ 0x30
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b08e      	sub	sp, #56	@ 0x38
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d96a:	2300      	movs	r3, #0
 800d96c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d972:	2300      	movs	r3, #0
 800d974:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10b      	bne.n	800d994 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	623b      	str	r3, [r7, #32]
}
 800d98e:	bf00      	nop
 800d990:	bf00      	nop
 800d992:	e7fd      	b.n	800d990 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00b      	beq.n	800d9b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	61fb      	str	r3, [r7, #28]
}
 800d9ae:	bf00      	nop
 800d9b0:	bf00      	nop
 800d9b2:	e7fd      	b.n	800d9b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9b4:	f001 f97e 	bl	800ecb4 <xTaskGetSchedulerState>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d102      	bne.n	800d9c4 <xQueueSemaphoreTake+0x64>
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d101      	bne.n	800d9c8 <xQueueSemaphoreTake+0x68>
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e000      	b.n	800d9ca <xQueueSemaphoreTake+0x6a>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10b      	bne.n	800d9e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	61bb      	str	r3, [r7, #24]
}
 800d9e0:	bf00      	nop
 800d9e2:	bf00      	nop
 800d9e4:	e7fd      	b.n	800d9e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9e6:	f002 f88f 	bl	800fb08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d024      	beq.n	800da40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d104      	bne.n	800da10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da06:	f001 facf 	bl	800efa8 <pvTaskIncrementMutexHeldCount>
 800da0a:	4602      	mov	r2, r0
 800da0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00f      	beq.n	800da38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1a:	3310      	adds	r3, #16
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 ff77 	bl	800e910 <xTaskRemoveFromEventList>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d007      	beq.n	800da38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da28:	4b54      	ldr	r3, [pc, #336]	@ (800db7c <xQueueSemaphoreTake+0x21c>)
 800da2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da38:	f002 f898 	bl	800fb6c <vPortExitCritical>
				return pdPASS;
 800da3c:	2301      	movs	r3, #1
 800da3e:	e098      	b.n	800db72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d112      	bne.n	800da6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00b      	beq.n	800da64 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	617b      	str	r3, [r7, #20]
}
 800da5e:	bf00      	nop
 800da60:	bf00      	nop
 800da62:	e7fd      	b.n	800da60 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800da64:	f002 f882 	bl	800fb6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da68:	2300      	movs	r3, #0
 800da6a:	e082      	b.n	800db72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da72:	f107 030c 	add.w	r3, r7, #12
 800da76:	4618      	mov	r0, r3
 800da78:	f000 ffae 	bl	800e9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da7c:	2301      	movs	r3, #1
 800da7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da80:	f002 f874 	bl	800fb6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da84:	f000 fd16 	bl	800e4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da88:	f002 f83e 	bl	800fb08 <vPortEnterCritical>
 800da8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da92:	b25b      	sxtb	r3, r3
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d103      	bne.n	800daa2 <xQueueSemaphoreTake+0x142>
 800da9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800daa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daa8:	b25b      	sxtb	r3, r3
 800daaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daae:	d103      	bne.n	800dab8 <xQueueSemaphoreTake+0x158>
 800dab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dab8:	f002 f858 	bl	800fb6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dabc:	463a      	mov	r2, r7
 800dabe:	f107 030c 	add.w	r3, r7, #12
 800dac2:	4611      	mov	r1, r2
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 ff9d 	bl	800ea04 <xTaskCheckForTimeOut>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d132      	bne.n	800db36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dad2:	f000 f9f5 	bl	800dec0 <prvIsQueueEmpty>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d026      	beq.n	800db2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d109      	bne.n	800daf8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dae4:	f002 f810 	bl	800fb08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	4618      	mov	r0, r3
 800daee:	f001 f8ff 	bl	800ecf0 <xTaskPriorityInherit>
 800daf2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800daf4:	f002 f83a 	bl	800fb6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800daf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafa:	3324      	adds	r3, #36	@ 0x24
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	4611      	mov	r1, r2
 800db00:	4618      	mov	r0, r3
 800db02:	f000 feb3 	bl	800e86c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db08:	f000 f988 	bl	800de1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db0c:	f000 fce0 	bl	800e4d0 <xTaskResumeAll>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	f47f af67 	bne.w	800d9e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800db18:	4b18      	ldr	r3, [pc, #96]	@ (800db7c <xQueueSemaphoreTake+0x21c>)
 800db1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	e75d      	b.n	800d9e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800db2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db2c:	f000 f976 	bl	800de1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db30:	f000 fcce 	bl	800e4d0 <xTaskResumeAll>
 800db34:	e757      	b.n	800d9e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800db36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db38:	f000 f970 	bl	800de1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db3c:	f000 fcc8 	bl	800e4d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db42:	f000 f9bd 	bl	800dec0 <prvIsQueueEmpty>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f43f af4c 	beq.w	800d9e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800db4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00d      	beq.n	800db70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800db54:	f001 ffd8 	bl	800fb08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800db58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db5a:	f000 f8b7 	bl	800dccc <prvGetDisinheritPriorityAfterTimeout>
 800db5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800db60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db66:	4618      	mov	r0, r3
 800db68:	f001 f99a 	bl	800eea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800db6c:	f001 fffe 	bl	800fb6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db72:	4618      	mov	r0, r3
 800db74:	3738      	adds	r7, #56	@ 0x38
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	e000ed04 	.word	0xe000ed04

0800db80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08e      	sub	sp, #56	@ 0x38
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800db90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10b      	bne.n	800dbae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	623b      	str	r3, [r7, #32]
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	e7fd      	b.n	800dbaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d103      	bne.n	800dbbc <xQueueReceiveFromISR+0x3c>
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <xQueueReceiveFromISR+0x40>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e000      	b.n	800dbc2 <xQueueReceiveFromISR+0x42>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10b      	bne.n	800dbde <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	61fb      	str	r3, [r7, #28]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbde:	f002 f873 	bl	800fcc8 <vPortValidateInterruptPriority>
	__asm volatile
 800dbe2:	f3ef 8211 	mrs	r2, BASEPRI
 800dbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	61ba      	str	r2, [r7, #24]
 800dbf8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dbfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d02f      	beq.n	800dc6a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc14:	68b9      	ldr	r1, [r7, #8]
 800dc16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc18:	f000 f8da 	bl	800ddd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1e:	1e5a      	subs	r2, r3, #1
 800dc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dc24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2c:	d112      	bne.n	800dc54 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d016      	beq.n	800dc64 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc38:	3310      	adds	r3, #16
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 fe68 	bl	800e910 <xTaskRemoveFromEventList>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00e      	beq.n	800dc64 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00b      	beq.n	800dc64 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	601a      	str	r2, [r3, #0]
 800dc52:	e007      	b.n	800dc64 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dc54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc58:	3301      	adds	r3, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	b25a      	sxtb	r2, r3
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dc64:	2301      	movs	r3, #1
 800dc66:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc68:	e001      	b.n	800dc6e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	f383 8811 	msr	BASEPRI, r3
}
 800dc78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3738      	adds	r7, #56	@ 0x38
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10b      	bne.n	800dcae <vQueueDelete+0x2a>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	60bb      	str	r3, [r7, #8]
}
 800dca8:	bf00      	nop
 800dcaa:	bf00      	nop
 800dcac:	e7fd      	b.n	800dcaa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f000 f95e 	bl	800df70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d102      	bne.n	800dcc4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f002 f912 	bl	800fee8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dcc4:	bf00      	nop
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d006      	beq.n	800dcea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dce6:	60fb      	str	r3, [r7, #12]
 800dce8:	e001      	b.n	800dcee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dcea:	2300      	movs	r3, #0
 800dcec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dcee:	68fb      	ldr	r3, [r7, #12]
	}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10d      	bne.n	800dd36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d14d      	bne.n	800ddbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	4618      	mov	r0, r3
 800dd28:	f001 f84a 	bl	800edc0 <xTaskPriorityDisinherit>
 800dd2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	609a      	str	r2, [r3, #8]
 800dd34:	e043      	b.n	800ddbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d119      	bne.n	800dd70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6858      	ldr	r0, [r3, #4]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd44:	461a      	mov	r2, r3
 800dd46:	68b9      	ldr	r1, [r7, #8]
 800dd48:	f003 f93d 	bl	8010fc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd54:	441a      	add	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d32b      	bcc.n	800ddbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	605a      	str	r2, [r3, #4]
 800dd6e:	e026      	b.n	800ddbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	68d8      	ldr	r0, [r3, #12]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd78:	461a      	mov	r2, r3
 800dd7a:	68b9      	ldr	r1, [r7, #8]
 800dd7c:	f003 f923 	bl	8010fc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	68da      	ldr	r2, [r3, #12]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd88:	425b      	negs	r3, r3
 800dd8a:	441a      	add	r2, r3
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	68da      	ldr	r2, [r3, #12]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d207      	bcs.n	800ddac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	689a      	ldr	r2, [r3, #8]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda4:	425b      	negs	r3, r3
 800dda6:	441a      	add	r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d105      	bne.n	800ddbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ddc6:	697b      	ldr	r3, [r7, #20]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d018      	beq.n	800de14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddea:	441a      	add	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68da      	ldr	r2, [r3, #12]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d303      	bcc.n	800de04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68d9      	ldr	r1, [r3, #12]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0c:	461a      	mov	r2, r3
 800de0e:	6838      	ldr	r0, [r7, #0]
 800de10:	f003 f8d9 	bl	8010fc6 <memcpy>
	}
}
 800de14:	bf00      	nop
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de24:	f001 fe70 	bl	800fb08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de30:	e011      	b.n	800de56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de36:	2b00      	cmp	r3, #0
 800de38:	d012      	beq.n	800de60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3324      	adds	r3, #36	@ 0x24
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 fd66 	bl	800e910 <xTaskRemoveFromEventList>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de4a:	f000 fe3f 	bl	800eacc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	3b01      	subs	r3, #1
 800de52:	b2db      	uxtb	r3, r3
 800de54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dce9      	bgt.n	800de32 <prvUnlockQueue+0x16>
 800de5e:	e000      	b.n	800de62 <prvUnlockQueue+0x46>
					break;
 800de60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	22ff      	movs	r2, #255	@ 0xff
 800de66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800de6a:	f001 fe7f 	bl	800fb6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de6e:	f001 fe4b 	bl	800fb08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de7a:	e011      	b.n	800dea0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d012      	beq.n	800deaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	3310      	adds	r3, #16
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 fd41 	bl	800e910 <xTaskRemoveFromEventList>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d001      	beq.n	800de98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de94:	f000 fe1a 	bl	800eacc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	dce9      	bgt.n	800de7c <prvUnlockQueue+0x60>
 800dea8:	e000      	b.n	800deac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800deaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	22ff      	movs	r2, #255	@ 0xff
 800deb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800deb4:	f001 fe5a 	bl	800fb6c <vPortExitCritical>
}
 800deb8:	bf00      	nop
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dec8:	f001 fe1e 	bl	800fb08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d102      	bne.n	800deda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ded4:	2301      	movs	r3, #1
 800ded6:	60fb      	str	r3, [r7, #12]
 800ded8:	e001      	b.n	800dede <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dede:	f001 fe45 	bl	800fb6c <vPortExitCritical>

	return xReturn;
 800dee2:	68fb      	ldr	r3, [r7, #12]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800def4:	f001 fe08 	bl	800fb08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df00:	429a      	cmp	r2, r3
 800df02:	d102      	bne.n	800df0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df04:	2301      	movs	r3, #1
 800df06:	60fb      	str	r3, [r7, #12]
 800df08:	e001      	b.n	800df0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df0a:	2300      	movs	r3, #0
 800df0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df0e:	f001 fe2d 	bl	800fb6c <vPortExitCritical>

	return xReturn;
 800df12:	68fb      	ldr	r3, [r7, #12]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df26:	2300      	movs	r3, #0
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	e014      	b.n	800df56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df2c:	4a0f      	ldr	r2, [pc, #60]	@ (800df6c <vQueueAddToRegistry+0x50>)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10b      	bne.n	800df50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df38:	490c      	ldr	r1, [pc, #48]	@ (800df6c <vQueueAddToRegistry+0x50>)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df42:	4a0a      	ldr	r2, [pc, #40]	@ (800df6c <vQueueAddToRegistry+0x50>)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	4413      	add	r3, r2
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df4e:	e006      	b.n	800df5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3301      	adds	r3, #1
 800df54:	60fb      	str	r3, [r7, #12]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b07      	cmp	r3, #7
 800df5a:	d9e7      	bls.n	800df2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20013680 	.word	0x20013680

0800df70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	e016      	b.n	800dfac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800df7e:	4a10      	ldr	r2, [pc, #64]	@ (800dfc0 <vQueueUnregisterQueue+0x50>)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	4413      	add	r3, r2
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d10b      	bne.n	800dfa6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800df8e:	4a0c      	ldr	r2, [pc, #48]	@ (800dfc0 <vQueueUnregisterQueue+0x50>)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2100      	movs	r1, #0
 800df94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800df98:	4a09      	ldr	r2, [pc, #36]	@ (800dfc0 <vQueueUnregisterQueue+0x50>)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	4413      	add	r3, r2
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	605a      	str	r2, [r3, #4]
				break;
 800dfa4:	e006      	b.n	800dfb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	60fb      	str	r3, [r7, #12]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b07      	cmp	r3, #7
 800dfb0:	d9e5      	bls.n	800df7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20013680 	.word	0x20013680

0800dfc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dfd4:	f001 fd98 	bl	800fb08 <vPortEnterCritical>
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dfde:	b25b      	sxtb	r3, r3
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe4:	d103      	bne.n	800dfee <vQueueWaitForMessageRestricted+0x2a>
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dff4:	b25b      	sxtb	r3, r3
 800dff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffa:	d103      	bne.n	800e004 <vQueueWaitForMessageRestricted+0x40>
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e004:	f001 fdb2 	bl	800fb6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d106      	bne.n	800e01e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	3324      	adds	r3, #36	@ 0x24
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	68b9      	ldr	r1, [r7, #8]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fc4d 	bl	800e8b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	f7ff fefc 	bl	800de1c <prvUnlockQueue>
	}
 800e024:	bf00      	nop
 800e026:	3718      	adds	r7, #24
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08e      	sub	sp, #56	@ 0x38
 800e030:	af04      	add	r7, sp, #16
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
 800e038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10b      	bne.n	800e058 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	623b      	str	r3, [r7, #32]
}
 800e052:	bf00      	nop
 800e054:	bf00      	nop
 800e056:	e7fd      	b.n	800e054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10b      	bne.n	800e076 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	61fb      	str	r3, [r7, #28]
}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	e7fd      	b.n	800e072 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e076:	235c      	movs	r3, #92	@ 0x5c
 800e078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e07e:	d00b      	beq.n	800e098 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	61bb      	str	r3, [r7, #24]
}
 800e092:	bf00      	nop
 800e094:	bf00      	nop
 800e096:	e7fd      	b.n	800e094 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e098:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d01e      	beq.n	800e0de <xTaskCreateStatic+0xb2>
 800e0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d01b      	beq.n	800e0de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9303      	str	r3, [sp, #12]
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0be:	9302      	str	r3, [sp, #8]
 800e0c0:	f107 0314 	add.w	r3, r7, #20
 800e0c4:	9301      	str	r3, [sp, #4]
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	68b9      	ldr	r1, [r7, #8]
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 f850 	bl	800e176 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0d8:	f000 f8de 	bl	800e298 <prvAddNewTaskToReadyList>
 800e0dc:	e001      	b.n	800e0e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0e2:	697b      	ldr	r3, [r7, #20]
	}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3728      	adds	r7, #40	@ 0x28
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08c      	sub	sp, #48	@ 0x30
 800e0f0:	af04      	add	r7, sp, #16
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e0fc:	88fb      	ldrh	r3, [r7, #6]
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4618      	mov	r0, r3
 800e102:	f001 fe23 	bl	800fd4c <pvPortMalloc>
 800e106:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00e      	beq.n	800e12c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e10e:	205c      	movs	r0, #92	@ 0x5c
 800e110:	f001 fe1c 	bl	800fd4c <pvPortMalloc>
 800e114:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	631a      	str	r2, [r3, #48]	@ 0x30
 800e122:	e005      	b.n	800e130 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e124:	6978      	ldr	r0, [r7, #20]
 800e126:	f001 fedf 	bl	800fee8 <vPortFree>
 800e12a:	e001      	b.n	800e130 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e12c:	2300      	movs	r3, #0
 800e12e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d017      	beq.n	800e166 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e13e:	88fa      	ldrh	r2, [r7, #6]
 800e140:	2300      	movs	r3, #0
 800e142:	9303      	str	r3, [sp, #12]
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	9302      	str	r3, [sp, #8]
 800e148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	68b9      	ldr	r1, [r7, #8]
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f80e 	bl	800e176 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e15a:	69f8      	ldr	r0, [r7, #28]
 800e15c:	f000 f89c 	bl	800e298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e160:	2301      	movs	r3, #1
 800e162:	61bb      	str	r3, [r7, #24]
 800e164:	e002      	b.n	800e16c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e166:	f04f 33ff 	mov.w	r3, #4294967295
 800e16a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e16c:	69bb      	ldr	r3, [r7, #24]
	}
 800e16e:	4618      	mov	r0, r3
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b088      	sub	sp, #32
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
 800e182:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e186:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	461a      	mov	r2, r3
 800e18e:	21a5      	movs	r1, #165	@ 0xa5
 800e190:	f002 fe9e 	bl	8010ed0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	f023 0307 	bic.w	r3, r3, #7
 800e1ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	f003 0307 	and.w	r3, r3, #7
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00b      	beq.n	800e1d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1bc:	f383 8811 	msr	BASEPRI, r3
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	617b      	str	r3, [r7, #20]
}
 800e1ca:	bf00      	nop
 800e1cc:	bf00      	nop
 800e1ce:	e7fd      	b.n	800e1cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d01f      	beq.n	800e216 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e012      	b.n	800e202 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	7819      	ldrb	r1, [r3, #0]
 800e1e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	3334      	adds	r3, #52	@ 0x34
 800e1ec:	460a      	mov	r2, r1
 800e1ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	3301      	adds	r3, #1
 800e200:	61fb      	str	r3, [r7, #28]
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	2b0f      	cmp	r3, #15
 800e206:	d9e9      	bls.n	800e1dc <prvInitialiseNewTask+0x66>
 800e208:	e000      	b.n	800e20c <prvInitialiseNewTask+0x96>
			{
				break;
 800e20a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20e:	2200      	movs	r2, #0
 800e210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e214:	e003      	b.n	800e21e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e220:	2b37      	cmp	r3, #55	@ 0x37
 800e222:	d901      	bls.n	800e228 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e224:	2337      	movs	r3, #55	@ 0x37
 800e226:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e22c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e232:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e236:	2200      	movs	r2, #0
 800e238:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23c:	3304      	adds	r3, #4
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fe fd7b 	bl	800cd3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e246:	3318      	adds	r3, #24
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fe fd76 	bl	800cd3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e252:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e256:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e262:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e266:	2200      	movs	r2, #0
 800e268:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	68f9      	ldr	r1, [r7, #12]
 800e276:	69b8      	ldr	r0, [r7, #24]
 800e278:	f001 fb18 	bl	800f8ac <pxPortInitialiseStack>
 800e27c:	4602      	mov	r2, r0
 800e27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e280:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e28c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e28e:	bf00      	nop
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
	...

0800e298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2a0:	f001 fc32 	bl	800fb08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2a4:	4b2d      	ldr	r3, [pc, #180]	@ (800e35c <prvAddNewTaskToReadyList+0xc4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	4a2c      	ldr	r2, [pc, #176]	@ (800e35c <prvAddNewTaskToReadyList+0xc4>)
 800e2ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e360 <prvAddNewTaskToReadyList+0xc8>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d109      	bne.n	800e2ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2b6:	4a2a      	ldr	r2, [pc, #168]	@ (800e360 <prvAddNewTaskToReadyList+0xc8>)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2bc:	4b27      	ldr	r3, [pc, #156]	@ (800e35c <prvAddNewTaskToReadyList+0xc4>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d110      	bne.n	800e2e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2c4:	f000 fc28 	bl	800eb18 <prvInitialiseTaskLists>
 800e2c8:	e00d      	b.n	800e2e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2ca:	4b26      	ldr	r3, [pc, #152]	@ (800e364 <prvAddNewTaskToReadyList+0xcc>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d109      	bne.n	800e2e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2d2:	4b23      	ldr	r3, [pc, #140]	@ (800e360 <prvAddNewTaskToReadyList+0xc8>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d802      	bhi.n	800e2e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e360 <prvAddNewTaskToReadyList+0xc8>)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2e6:	4b20      	ldr	r3, [pc, #128]	@ (800e368 <prvAddNewTaskToReadyList+0xd0>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	4a1e      	ldr	r2, [pc, #120]	@ (800e368 <prvAddNewTaskToReadyList+0xd0>)
 800e2ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e2f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e368 <prvAddNewTaskToReadyList+0xd0>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fc:	4b1b      	ldr	r3, [pc, #108]	@ (800e36c <prvAddNewTaskToReadyList+0xd4>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	429a      	cmp	r2, r3
 800e302:	d903      	bls.n	800e30c <prvAddNewTaskToReadyList+0x74>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e308:	4a18      	ldr	r2, [pc, #96]	@ (800e36c <prvAddNewTaskToReadyList+0xd4>)
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e310:	4613      	mov	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4a15      	ldr	r2, [pc, #84]	@ (800e370 <prvAddNewTaskToReadyList+0xd8>)
 800e31a:	441a      	add	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3304      	adds	r3, #4
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7fe fd16 	bl	800cd54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e328:	f001 fc20 	bl	800fb6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e32c:	4b0d      	ldr	r3, [pc, #52]	@ (800e364 <prvAddNewTaskToReadyList+0xcc>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00e      	beq.n	800e352 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e334:	4b0a      	ldr	r3, [pc, #40]	@ (800e360 <prvAddNewTaskToReadyList+0xc8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e33e:	429a      	cmp	r2, r3
 800e340:	d207      	bcs.n	800e352 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e342:	4b0c      	ldr	r3, [pc, #48]	@ (800e374 <prvAddNewTaskToReadyList+0xdc>)
 800e344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e352:	bf00      	nop
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20013b94 	.word	0x20013b94
 800e360:	200136c0 	.word	0x200136c0
 800e364:	20013ba0 	.word	0x20013ba0
 800e368:	20013bb0 	.word	0x20013bb0
 800e36c:	20013b9c 	.word	0x20013b9c
 800e370:	200136c4 	.word	0x200136c4
 800e374:	e000ed04 	.word	0xe000ed04

0800e378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d018      	beq.n	800e3bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e38a:	4b14      	ldr	r3, [pc, #80]	@ (800e3dc <vTaskDelay+0x64>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00b      	beq.n	800e3aa <vTaskDelay+0x32>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	60bb      	str	r3, [r7, #8]
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	e7fd      	b.n	800e3a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e3aa:	f000 f883 	bl	800e4b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fe0d 	bl	800efd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e3b6:	f000 f88b 	bl	800e4d0 <xTaskResumeAll>
 800e3ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d107      	bne.n	800e3d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e3c2:	4b07      	ldr	r3, [pc, #28]	@ (800e3e0 <vTaskDelay+0x68>)
 800e3c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	20013bbc 	.word	0x20013bbc
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08a      	sub	sp, #40	@ 0x28
 800e3e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3f2:	463a      	mov	r2, r7
 800e3f4:	1d39      	adds	r1, r7, #4
 800e3f6:	f107 0308 	add.w	r3, r7, #8
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe fbf6 	bl	800cbec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	9202      	str	r2, [sp, #8]
 800e408:	9301      	str	r3, [sp, #4]
 800e40a:	2300      	movs	r3, #0
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	2300      	movs	r3, #0
 800e410:	460a      	mov	r2, r1
 800e412:	4922      	ldr	r1, [pc, #136]	@ (800e49c <vTaskStartScheduler+0xb8>)
 800e414:	4822      	ldr	r0, [pc, #136]	@ (800e4a0 <vTaskStartScheduler+0xbc>)
 800e416:	f7ff fe09 	bl	800e02c <xTaskCreateStatic>
 800e41a:	4603      	mov	r3, r0
 800e41c:	4a21      	ldr	r2, [pc, #132]	@ (800e4a4 <vTaskStartScheduler+0xc0>)
 800e41e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e420:	4b20      	ldr	r3, [pc, #128]	@ (800e4a4 <vTaskStartScheduler+0xc0>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d002      	beq.n	800e42e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e428:	2301      	movs	r3, #1
 800e42a:	617b      	str	r3, [r7, #20]
 800e42c:	e001      	b.n	800e432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e42e:	2300      	movs	r3, #0
 800e430:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d102      	bne.n	800e43e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e438:	f000 fe1e 	bl	800f078 <xTimerCreateTimerTask>
 800e43c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d116      	bne.n	800e472 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	613b      	str	r3, [r7, #16]
}
 800e456:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e458:	4b13      	ldr	r3, [pc, #76]	@ (800e4a8 <vTaskStartScheduler+0xc4>)
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295
 800e45e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e460:	4b12      	ldr	r3, [pc, #72]	@ (800e4ac <vTaskStartScheduler+0xc8>)
 800e462:	2201      	movs	r2, #1
 800e464:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e466:	4b12      	ldr	r3, [pc, #72]	@ (800e4b0 <vTaskStartScheduler+0xcc>)
 800e468:	2200      	movs	r2, #0
 800e46a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e46c:	f001 faa8 	bl	800f9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e470:	e00f      	b.n	800e492 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e478:	d10b      	bne.n	800e492 <vTaskStartScheduler+0xae>
	__asm volatile
 800e47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	60fb      	str	r3, [r7, #12]
}
 800e48c:	bf00      	nop
 800e48e:	bf00      	nop
 800e490:	e7fd      	b.n	800e48e <vTaskStartScheduler+0xaa>
}
 800e492:	bf00      	nop
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	08012750 	.word	0x08012750
 800e4a0:	0800eae5 	.word	0x0800eae5
 800e4a4:	20013bb8 	.word	0x20013bb8
 800e4a8:	20013bb4 	.word	0x20013bb4
 800e4ac:	20013ba0 	.word	0x20013ba0
 800e4b0:	20013b98 	.word	0x20013b98

0800e4b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e4b8:	4b04      	ldr	r3, [pc, #16]	@ (800e4cc <vTaskSuspendAll+0x18>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	4a03      	ldr	r2, [pc, #12]	@ (800e4cc <vTaskSuspendAll+0x18>)
 800e4c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e4c2:	bf00      	nop
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	20013bbc 	.word	0x20013bbc

0800e4d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4de:	4b42      	ldr	r3, [pc, #264]	@ (800e5e8 <xTaskResumeAll+0x118>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10b      	bne.n	800e4fe <xTaskResumeAll+0x2e>
	__asm volatile
 800e4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ea:	f383 8811 	msr	BASEPRI, r3
 800e4ee:	f3bf 8f6f 	isb	sy
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	603b      	str	r3, [r7, #0]
}
 800e4f8:	bf00      	nop
 800e4fa:	bf00      	nop
 800e4fc:	e7fd      	b.n	800e4fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4fe:	f001 fb03 	bl	800fb08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e502:	4b39      	ldr	r3, [pc, #228]	@ (800e5e8 <xTaskResumeAll+0x118>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3b01      	subs	r3, #1
 800e508:	4a37      	ldr	r2, [pc, #220]	@ (800e5e8 <xTaskResumeAll+0x118>)
 800e50a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e50c:	4b36      	ldr	r3, [pc, #216]	@ (800e5e8 <xTaskResumeAll+0x118>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d162      	bne.n	800e5da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e514:	4b35      	ldr	r3, [pc, #212]	@ (800e5ec <xTaskResumeAll+0x11c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d05e      	beq.n	800e5da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e51c:	e02f      	b.n	800e57e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e51e:	4b34      	ldr	r3, [pc, #208]	@ (800e5f0 <xTaskResumeAll+0x120>)
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3318      	adds	r3, #24
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fc6f 	bl	800ce0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	3304      	adds	r3, #4
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe fc6a 	bl	800ce0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e53e:	4b2d      	ldr	r3, [pc, #180]	@ (800e5f4 <xTaskResumeAll+0x124>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d903      	bls.n	800e54e <xTaskResumeAll+0x7e>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54a:	4a2a      	ldr	r2, [pc, #168]	@ (800e5f4 <xTaskResumeAll+0x124>)
 800e54c:	6013      	str	r3, [r2, #0]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e552:	4613      	mov	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4413      	add	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4a27      	ldr	r2, [pc, #156]	@ (800e5f8 <xTaskResumeAll+0x128>)
 800e55c:	441a      	add	r2, r3
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	3304      	adds	r3, #4
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7fe fbf5 	bl	800cd54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e56e:	4b23      	ldr	r3, [pc, #140]	@ (800e5fc <xTaskResumeAll+0x12c>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e574:	429a      	cmp	r2, r3
 800e576:	d302      	bcc.n	800e57e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e578:	4b21      	ldr	r3, [pc, #132]	@ (800e600 <xTaskResumeAll+0x130>)
 800e57a:	2201      	movs	r2, #1
 800e57c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e57e:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f0 <xTaskResumeAll+0x120>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1cb      	bne.n	800e51e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e58c:	f000 fb62 	bl	800ec54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e590:	4b1c      	ldr	r3, [pc, #112]	@ (800e604 <xTaskResumeAll+0x134>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d010      	beq.n	800e5be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e59c:	f000 f846 	bl	800e62c <xTaskIncrementTick>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d002      	beq.n	800e5ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e5a6:	4b16      	ldr	r3, [pc, #88]	@ (800e600 <xTaskResumeAll+0x130>)
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1f1      	bne.n	800e59c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e5b8:	4b12      	ldr	r3, [pc, #72]	@ (800e604 <xTaskResumeAll+0x134>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e5be:	4b10      	ldr	r3, [pc, #64]	@ (800e600 <xTaskResumeAll+0x130>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d009      	beq.n	800e5da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800e608 <xTaskResumeAll+0x138>)
 800e5cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5da:	f001 fac7 	bl	800fb6c <vPortExitCritical>

	return xAlreadyYielded;
 800e5de:	68bb      	ldr	r3, [r7, #8]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	20013bbc 	.word	0x20013bbc
 800e5ec:	20013b94 	.word	0x20013b94
 800e5f0:	20013b54 	.word	0x20013b54
 800e5f4:	20013b9c 	.word	0x20013b9c
 800e5f8:	200136c4 	.word	0x200136c4
 800e5fc:	200136c0 	.word	0x200136c0
 800e600:	20013ba8 	.word	0x20013ba8
 800e604:	20013ba4 	.word	0x20013ba4
 800e608:	e000ed04 	.word	0xe000ed04

0800e60c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e612:	4b05      	ldr	r3, [pc, #20]	@ (800e628 <xTaskGetTickCount+0x1c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e618:	687b      	ldr	r3, [r7, #4]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	20013b98 	.word	0x20013b98

0800e62c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e632:	2300      	movs	r3, #0
 800e634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e636:	4b53      	ldr	r3, [pc, #332]	@ (800e784 <xTaskIncrementTick+0x158>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f040 8096 	bne.w	800e76c <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e640:	4b51      	ldr	r3, [pc, #324]	@ (800e788 <xTaskIncrementTick+0x15c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e648:	4a4f      	ldr	r2, [pc, #316]	@ (800e788 <xTaskIncrementTick+0x15c>)
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d121      	bne.n	800e698 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e654:	4b4d      	ldr	r3, [pc, #308]	@ (800e78c <xTaskIncrementTick+0x160>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00b      	beq.n	800e676 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	603b      	str	r3, [r7, #0]
}
 800e670:	bf00      	nop
 800e672:	bf00      	nop
 800e674:	e7fd      	b.n	800e672 <xTaskIncrementTick+0x46>
 800e676:	4b45      	ldr	r3, [pc, #276]	@ (800e78c <xTaskIncrementTick+0x160>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	4b44      	ldr	r3, [pc, #272]	@ (800e790 <xTaskIncrementTick+0x164>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a42      	ldr	r2, [pc, #264]	@ (800e78c <xTaskIncrementTick+0x160>)
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	4a42      	ldr	r2, [pc, #264]	@ (800e790 <xTaskIncrementTick+0x164>)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	4b42      	ldr	r3, [pc, #264]	@ (800e794 <xTaskIncrementTick+0x168>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3301      	adds	r3, #1
 800e690:	4a40      	ldr	r2, [pc, #256]	@ (800e794 <xTaskIncrementTick+0x168>)
 800e692:	6013      	str	r3, [r2, #0]
 800e694:	f000 fade 	bl	800ec54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e698:	4b3f      	ldr	r3, [pc, #252]	@ (800e798 <xTaskIncrementTick+0x16c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	693a      	ldr	r2, [r7, #16]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d349      	bcc.n	800e736 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6a2:	4b3a      	ldr	r3, [pc, #232]	@ (800e78c <xTaskIncrementTick+0x160>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d104      	bne.n	800e6b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ac:	4b3a      	ldr	r3, [pc, #232]	@ (800e798 <xTaskIncrementTick+0x16c>)
 800e6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e6b2:	601a      	str	r2, [r3, #0]
					break;
 800e6b4:	e03f      	b.n	800e736 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b6:	4b35      	ldr	r3, [pc, #212]	@ (800e78c <xTaskIncrementTick+0x160>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	68db      	ldr	r3, [r3, #12]
 800e6be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6c6:	693a      	ldr	r2, [r7, #16]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d203      	bcs.n	800e6d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6ce:	4a32      	ldr	r2, [pc, #200]	@ (800e798 <xTaskIncrementTick+0x16c>)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6d4:	e02f      	b.n	800e736 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	3304      	adds	r3, #4
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe fb97 	bl	800ce0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d004      	beq.n	800e6f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	3318      	adds	r3, #24
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fe fb8e 	bl	800ce0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f6:	4b29      	ldr	r3, [pc, #164]	@ (800e79c <xTaskIncrementTick+0x170>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d903      	bls.n	800e706 <xTaskIncrementTick+0xda>
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e702:	4a26      	ldr	r2, [pc, #152]	@ (800e79c <xTaskIncrementTick+0x170>)
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70a:	4613      	mov	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4a23      	ldr	r2, [pc, #140]	@ (800e7a0 <xTaskIncrementTick+0x174>)
 800e714:	441a      	add	r2, r3
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	3304      	adds	r3, #4
 800e71a:	4619      	mov	r1, r3
 800e71c:	4610      	mov	r0, r2
 800e71e:	f7fe fb19 	bl	800cd54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e726:	4b1f      	ldr	r3, [pc, #124]	@ (800e7a4 <xTaskIncrementTick+0x178>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d3b8      	bcc.n	800e6a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e730:	2301      	movs	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e734:	e7b5      	b.n	800e6a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e736:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a4 <xTaskIncrementTick+0x178>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e73c:	4918      	ldr	r1, [pc, #96]	@ (800e7a0 <xTaskIncrementTick+0x174>)
 800e73e:	4613      	mov	r3, r2
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4413      	add	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	440b      	add	r3, r1
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d901      	bls.n	800e752 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e74e:	2301      	movs	r3, #1
 800e750:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e752:	4b15      	ldr	r3, [pc, #84]	@ (800e7a8 <xTaskIncrementTick+0x17c>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d101      	bne.n	800e75e <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 800e75a:	f7f2 fcf0 	bl	800113e <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e75e:	4b13      	ldr	r3, [pc, #76]	@ (800e7ac <xTaskIncrementTick+0x180>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d009      	beq.n	800e77a <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 800e766:	2301      	movs	r3, #1
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	e006      	b.n	800e77a <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e76c:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a8 <xTaskIncrementTick+0x17c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3301      	adds	r3, #1
 800e772:	4a0d      	ldr	r2, [pc, #52]	@ (800e7a8 <xTaskIncrementTick+0x17c>)
 800e774:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e776:	f7f2 fce2 	bl	800113e <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e77a:	697b      	ldr	r3, [r7, #20]
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3718      	adds	r7, #24
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	20013bbc 	.word	0x20013bbc
 800e788:	20013b98 	.word	0x20013b98
 800e78c:	20013b4c 	.word	0x20013b4c
 800e790:	20013b50 	.word	0x20013b50
 800e794:	20013bac 	.word	0x20013bac
 800e798:	20013bb4 	.word	0x20013bb4
 800e79c:	20013b9c 	.word	0x20013b9c
 800e7a0:	200136c4 	.word	0x200136c4
 800e7a4:	200136c0 	.word	0x200136c0
 800e7a8:	20013ba4 	.word	0x20013ba4
 800e7ac:	20013ba8 	.word	0x20013ba8

0800e7b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7b6:	4b28      	ldr	r3, [pc, #160]	@ (800e858 <vTaskSwitchContext+0xa8>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d003      	beq.n	800e7c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7be:	4b27      	ldr	r3, [pc, #156]	@ (800e85c <vTaskSwitchContext+0xac>)
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e7c4:	e042      	b.n	800e84c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e7c6:	4b25      	ldr	r3, [pc, #148]	@ (800e85c <vTaskSwitchContext+0xac>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7cc:	4b24      	ldr	r3, [pc, #144]	@ (800e860 <vTaskSwitchContext+0xb0>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	60fb      	str	r3, [r7, #12]
 800e7d2:	e011      	b.n	800e7f8 <vTaskSwitchContext+0x48>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10b      	bne.n	800e7f2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	607b      	str	r3, [r7, #4]
}
 800e7ec:	bf00      	nop
 800e7ee:	bf00      	nop
 800e7f0:	e7fd      	b.n	800e7ee <vTaskSwitchContext+0x3e>
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	491a      	ldr	r1, [pc, #104]	@ (800e864 <vTaskSwitchContext+0xb4>)
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	440b      	add	r3, r1
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0e3      	beq.n	800e7d4 <vTaskSwitchContext+0x24>
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	4613      	mov	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	4a13      	ldr	r2, [pc, #76]	@ (800e864 <vTaskSwitchContext+0xb4>)
 800e818:	4413      	add	r3, r2
 800e81a:	60bb      	str	r3, [r7, #8]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	685a      	ldr	r2, [r3, #4]
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	605a      	str	r2, [r3, #4]
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	3308      	adds	r3, #8
 800e82e:	429a      	cmp	r2, r3
 800e830:	d104      	bne.n	800e83c <vTaskSwitchContext+0x8c>
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	685a      	ldr	r2, [r3, #4]
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	605a      	str	r2, [r3, #4]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	4a09      	ldr	r2, [pc, #36]	@ (800e868 <vTaskSwitchContext+0xb8>)
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	4a06      	ldr	r2, [pc, #24]	@ (800e860 <vTaskSwitchContext+0xb0>)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6013      	str	r3, [r2, #0]
}
 800e84c:	bf00      	nop
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	20013bbc 	.word	0x20013bbc
 800e85c:	20013ba8 	.word	0x20013ba8
 800e860:	20013b9c 	.word	0x20013b9c
 800e864:	200136c4 	.word	0x200136c4
 800e868:	200136c0 	.word	0x200136c0

0800e86c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d10b      	bne.n	800e894 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	60fb      	str	r3, [r7, #12]
}
 800e88e:	bf00      	nop
 800e890:	bf00      	nop
 800e892:	e7fd      	b.n	800e890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e894:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <vTaskPlaceOnEventList+0x48>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3318      	adds	r3, #24
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7fe fa7d 	bl	800cd9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	6838      	ldr	r0, [r7, #0]
 800e8a6:	f000 fb93 	bl	800efd0 <prvAddCurrentTaskToDelayedList>
}
 800e8aa:	bf00      	nop
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	200136c0 	.word	0x200136c0

0800e8b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10b      	bne.n	800e8e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	617b      	str	r3, [r7, #20]
}
 800e8dc:	bf00      	nop
 800e8de:	bf00      	nop
 800e8e0:	e7fd      	b.n	800e8de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e90c <vTaskPlaceOnEventListRestricted+0x54>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3318      	adds	r3, #24
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f7fe fa32 	bl	800cd54 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d002      	beq.n	800e8fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	68b8      	ldr	r0, [r7, #8]
 800e900:	f000 fb66 	bl	800efd0 <prvAddCurrentTaskToDelayedList>
	}
 800e904:	bf00      	nop
 800e906:	3718      	adds	r7, #24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	200136c0 	.word	0x200136c0

0800e910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b086      	sub	sp, #24
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d10b      	bne.n	800e93e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	60fb      	str	r3, [r7, #12]
}
 800e938:	bf00      	nop
 800e93a:	bf00      	nop
 800e93c:	e7fd      	b.n	800e93a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	3318      	adds	r3, #24
 800e942:	4618      	mov	r0, r3
 800e944:	f7fe fa63 	bl	800ce0e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e948:	4b1d      	ldr	r3, [pc, #116]	@ (800e9c0 <xTaskRemoveFromEventList+0xb0>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d11d      	bne.n	800e98c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	3304      	adds	r3, #4
 800e954:	4618      	mov	r0, r3
 800e956:	f7fe fa5a 	bl	800ce0e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e95e:	4b19      	ldr	r3, [pc, #100]	@ (800e9c4 <xTaskRemoveFromEventList+0xb4>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	429a      	cmp	r2, r3
 800e964:	d903      	bls.n	800e96e <xTaskRemoveFromEventList+0x5e>
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e96a:	4a16      	ldr	r2, [pc, #88]	@ (800e9c4 <xTaskRemoveFromEventList+0xb4>)
 800e96c:	6013      	str	r3, [r2, #0]
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e972:	4613      	mov	r3, r2
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4413      	add	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	4a13      	ldr	r2, [pc, #76]	@ (800e9c8 <xTaskRemoveFromEventList+0xb8>)
 800e97c:	441a      	add	r2, r3
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	3304      	adds	r3, #4
 800e982:	4619      	mov	r1, r3
 800e984:	4610      	mov	r0, r2
 800e986:	f7fe f9e5 	bl	800cd54 <vListInsertEnd>
 800e98a:	e005      	b.n	800e998 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	3318      	adds	r3, #24
 800e990:	4619      	mov	r1, r3
 800e992:	480e      	ldr	r0, [pc, #56]	@ (800e9cc <xTaskRemoveFromEventList+0xbc>)
 800e994:	f7fe f9de 	bl	800cd54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e99c:	4b0c      	ldr	r3, [pc, #48]	@ (800e9d0 <xTaskRemoveFromEventList+0xc0>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d905      	bls.n	800e9b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d4 <xTaskRemoveFromEventList+0xc4>)
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	e001      	b.n	800e9b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e9b6:	697b      	ldr	r3, [r7, #20]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20013bbc 	.word	0x20013bbc
 800e9c4:	20013b9c 	.word	0x20013b9c
 800e9c8:	200136c4 	.word	0x200136c4
 800e9cc:	20013b54 	.word	0x20013b54
 800e9d0:	200136c0 	.word	0x200136c0
 800e9d4:	20013ba8 	.word	0x20013ba8

0800e9d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9e0:	4b06      	ldr	r3, [pc, #24]	@ (800e9fc <vTaskInternalSetTimeOutState+0x24>)
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ea00 <vTaskInternalSetTimeOutState+0x28>)
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	605a      	str	r2, [r3, #4]
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	20013bac 	.word	0x20013bac
 800ea00:	20013b98 	.word	0x20013b98

0800ea04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b088      	sub	sp, #32
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10b      	bne.n	800ea2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	613b      	str	r3, [r7, #16]
}
 800ea26:	bf00      	nop
 800ea28:	bf00      	nop
 800ea2a:	e7fd      	b.n	800ea28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10b      	bne.n	800ea4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea36:	f383 8811 	msr	BASEPRI, r3
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	60fb      	str	r3, [r7, #12]
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop
 800ea48:	e7fd      	b.n	800ea46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ea4a:	f001 f85d 	bl	800fb08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea4e:	4b1d      	ldr	r3, [pc, #116]	@ (800eac4 <xTaskCheckForTimeOut+0xc0>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	69ba      	ldr	r2, [r7, #24]
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea66:	d102      	bne.n	800ea6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	61fb      	str	r3, [r7, #28]
 800ea6c:	e023      	b.n	800eab6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	4b15      	ldr	r3, [pc, #84]	@ (800eac8 <xTaskCheckForTimeOut+0xc4>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d007      	beq.n	800ea8a <xTaskCheckForTimeOut+0x86>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	69ba      	ldr	r2, [r7, #24]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d302      	bcc.n	800ea8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea84:	2301      	movs	r3, #1
 800ea86:	61fb      	str	r3, [r7, #28]
 800ea88:	e015      	b.n	800eab6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	697a      	ldr	r2, [r7, #20]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d20b      	bcs.n	800eaac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	1ad2      	subs	r2, r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7ff ff99 	bl	800e9d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	61fb      	str	r3, [r7, #28]
 800eaaa:	e004      	b.n	800eab6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2200      	movs	r2, #0
 800eab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eab2:	2301      	movs	r3, #1
 800eab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eab6:	f001 f859 	bl	800fb6c <vPortExitCritical>

	return xReturn;
 800eaba:	69fb      	ldr	r3, [r7, #28]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3720      	adds	r7, #32
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	20013b98 	.word	0x20013b98
 800eac8:	20013bac 	.word	0x20013bac

0800eacc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eacc:	b480      	push	{r7}
 800eace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ead0:	4b03      	ldr	r3, [pc, #12]	@ (800eae0 <vTaskMissedYield+0x14>)
 800ead2:	2201      	movs	r2, #1
 800ead4:	601a      	str	r2, [r3, #0]
}
 800ead6:	bf00      	nop
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	20013ba8 	.word	0x20013ba8

0800eae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eaec:	f000 f854 	bl	800eb98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eaf0:	4b07      	ldr	r3, [pc, #28]	@ (800eb10 <prvIdleTask+0x2c>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d907      	bls.n	800eb08 <prvIdleTask+0x24>
			{
				taskYIELD();
 800eaf8:	4b06      	ldr	r3, [pc, #24]	@ (800eb14 <prvIdleTask+0x30>)
 800eafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800eb08:	f7f2 fb12 	bl	8001130 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800eb0c:	e7ee      	b.n	800eaec <prvIdleTask+0x8>
 800eb0e:	bf00      	nop
 800eb10:	200136c4 	.word	0x200136c4
 800eb14:	e000ed04 	.word	0xe000ed04

0800eb18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb1e:	2300      	movs	r3, #0
 800eb20:	607b      	str	r3, [r7, #4]
 800eb22:	e00c      	b.n	800eb3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	4613      	mov	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4a12      	ldr	r2, [pc, #72]	@ (800eb78 <prvInitialiseTaskLists+0x60>)
 800eb30:	4413      	add	r3, r2
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fe f8e1 	bl	800ccfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	607b      	str	r3, [r7, #4]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b37      	cmp	r3, #55	@ 0x37
 800eb42:	d9ef      	bls.n	800eb24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb44:	480d      	ldr	r0, [pc, #52]	@ (800eb7c <prvInitialiseTaskLists+0x64>)
 800eb46:	f7fe f8d8 	bl	800ccfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb4a:	480d      	ldr	r0, [pc, #52]	@ (800eb80 <prvInitialiseTaskLists+0x68>)
 800eb4c:	f7fe f8d5 	bl	800ccfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb50:	480c      	ldr	r0, [pc, #48]	@ (800eb84 <prvInitialiseTaskLists+0x6c>)
 800eb52:	f7fe f8d2 	bl	800ccfa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb56:	480c      	ldr	r0, [pc, #48]	@ (800eb88 <prvInitialiseTaskLists+0x70>)
 800eb58:	f7fe f8cf 	bl	800ccfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb5c:	480b      	ldr	r0, [pc, #44]	@ (800eb8c <prvInitialiseTaskLists+0x74>)
 800eb5e:	f7fe f8cc 	bl	800ccfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb62:	4b0b      	ldr	r3, [pc, #44]	@ (800eb90 <prvInitialiseTaskLists+0x78>)
 800eb64:	4a05      	ldr	r2, [pc, #20]	@ (800eb7c <prvInitialiseTaskLists+0x64>)
 800eb66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb68:	4b0a      	ldr	r3, [pc, #40]	@ (800eb94 <prvInitialiseTaskLists+0x7c>)
 800eb6a:	4a05      	ldr	r2, [pc, #20]	@ (800eb80 <prvInitialiseTaskLists+0x68>)
 800eb6c:	601a      	str	r2, [r3, #0]
}
 800eb6e:	bf00      	nop
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	200136c4 	.word	0x200136c4
 800eb7c:	20013b24 	.word	0x20013b24
 800eb80:	20013b38 	.word	0x20013b38
 800eb84:	20013b54 	.word	0x20013b54
 800eb88:	20013b68 	.word	0x20013b68
 800eb8c:	20013b80 	.word	0x20013b80
 800eb90:	20013b4c 	.word	0x20013b4c
 800eb94:	20013b50 	.word	0x20013b50

0800eb98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb9e:	e019      	b.n	800ebd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eba0:	f000 ffb2 	bl	800fb08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eba4:	4b10      	ldr	r3, [pc, #64]	@ (800ebe8 <prvCheckTasksWaitingTermination+0x50>)
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3304      	adds	r3, #4
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe f92c 	bl	800ce0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebec <prvCheckTasksWaitingTermination+0x54>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	4a0b      	ldr	r2, [pc, #44]	@ (800ebec <prvCheckTasksWaitingTermination+0x54>)
 800ebbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebc0:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf0 <prvCheckTasksWaitingTermination+0x58>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	4a0a      	ldr	r2, [pc, #40]	@ (800ebf0 <prvCheckTasksWaitingTermination+0x58>)
 800ebc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebca:	f000 ffcf 	bl	800fb6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f810 	bl	800ebf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebd4:	4b06      	ldr	r3, [pc, #24]	@ (800ebf0 <prvCheckTasksWaitingTermination+0x58>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d1e1      	bne.n	800eba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebdc:	bf00      	nop
 800ebde:	bf00      	nop
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	20013b68 	.word	0x20013b68
 800ebec:	20013b94 	.word	0x20013b94
 800ebf0:	20013b7c 	.word	0x20013b7c

0800ebf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d108      	bne.n	800ec18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f001 f96c 	bl	800fee8 <vPortFree>
				vPortFree( pxTCB );
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f001 f969 	bl	800fee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec16:	e019      	b.n	800ec4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d103      	bne.n	800ec2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f001 f960 	bl	800fee8 <vPortFree>
	}
 800ec28:	e010      	b.n	800ec4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ec30:	2b02      	cmp	r3, #2
 800ec32:	d00b      	beq.n	800ec4c <prvDeleteTCB+0x58>
	__asm volatile
 800ec34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec38:	f383 8811 	msr	BASEPRI, r3
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	60fb      	str	r3, [r7, #12]
}
 800ec46:	bf00      	nop
 800ec48:	bf00      	nop
 800ec4a:	e7fd      	b.n	800ec48 <prvDeleteTCB+0x54>
	}
 800ec4c:	bf00      	nop
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec8c <prvResetNextTaskUnblockTime+0x38>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d104      	bne.n	800ec6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec64:	4b0a      	ldr	r3, [pc, #40]	@ (800ec90 <prvResetNextTaskUnblockTime+0x3c>)
 800ec66:	f04f 32ff 	mov.w	r2, #4294967295
 800ec6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec6c:	e008      	b.n	800ec80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec6e:	4b07      	ldr	r3, [pc, #28]	@ (800ec8c <prvResetNextTaskUnblockTime+0x38>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	4a04      	ldr	r2, [pc, #16]	@ (800ec90 <prvResetNextTaskUnblockTime+0x3c>)
 800ec7e:	6013      	str	r3, [r2, #0]
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	20013b4c 	.word	0x20013b4c
 800ec90:	20013bb4 	.word	0x20013bb4

0800ec94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ec9a:	4b05      	ldr	r3, [pc, #20]	@ (800ecb0 <xTaskGetCurrentTaskHandle+0x1c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eca0:	687b      	ldr	r3, [r7, #4]
	}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	200136c0 	.word	0x200136c0

0800ecb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecba:	4b0b      	ldr	r3, [pc, #44]	@ (800ece8 <xTaskGetSchedulerState+0x34>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d102      	bne.n	800ecc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	e008      	b.n	800ecda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc8:	4b08      	ldr	r3, [pc, #32]	@ (800ecec <xTaskGetSchedulerState+0x38>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d102      	bne.n	800ecd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	607b      	str	r3, [r7, #4]
 800ecd4:	e001      	b.n	800ecda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecda:	687b      	ldr	r3, [r7, #4]
	}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	20013ba0 	.word	0x20013ba0
 800ecec:	20013bbc 	.word	0x20013bbc

0800ecf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d051      	beq.n	800edaa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed0a:	4b2a      	ldr	r3, [pc, #168]	@ (800edb4 <xTaskPriorityInherit+0xc4>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d241      	bcs.n	800ed98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	db06      	blt.n	800ed2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed1c:	4b25      	ldr	r3, [pc, #148]	@ (800edb4 <xTaskPriorityInherit+0xc4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6959      	ldr	r1, [r3, #20]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed32:	4613      	mov	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4a1f      	ldr	r2, [pc, #124]	@ (800edb8 <xTaskPriorityInherit+0xc8>)
 800ed3c:	4413      	add	r3, r2
 800ed3e:	4299      	cmp	r1, r3
 800ed40:	d122      	bne.n	800ed88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	3304      	adds	r3, #4
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fe f861 	bl	800ce0e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed4c:	4b19      	ldr	r3, [pc, #100]	@ (800edb4 <xTaskPriorityInherit+0xc4>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed5a:	4b18      	ldr	r3, [pc, #96]	@ (800edbc <xTaskPriorityInherit+0xcc>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d903      	bls.n	800ed6a <xTaskPriorityInherit+0x7a>
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed66:	4a15      	ldr	r2, [pc, #84]	@ (800edbc <xTaskPriorityInherit+0xcc>)
 800ed68:	6013      	str	r3, [r2, #0]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed6e:	4613      	mov	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	4a10      	ldr	r2, [pc, #64]	@ (800edb8 <xTaskPriorityInherit+0xc8>)
 800ed78:	441a      	add	r2, r3
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	4619      	mov	r1, r3
 800ed80:	4610      	mov	r0, r2
 800ed82:	f7fd ffe7 	bl	800cd54 <vListInsertEnd>
 800ed86:	e004      	b.n	800ed92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed88:	4b0a      	ldr	r3, [pc, #40]	@ (800edb4 <xTaskPriorityInherit+0xc4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed92:	2301      	movs	r3, #1
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	e008      	b.n	800edaa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed9c:	4b05      	ldr	r3, [pc, #20]	@ (800edb4 <xTaskPriorityInherit+0xc4>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d201      	bcs.n	800edaa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eda6:	2301      	movs	r3, #1
 800eda8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edaa:	68fb      	ldr	r3, [r7, #12]
	}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	200136c0 	.word	0x200136c0
 800edb8:	200136c4 	.word	0x200136c4
 800edbc:	20013b9c 	.word	0x20013b9c

0800edc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edcc:	2300      	movs	r3, #0
 800edce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d058      	beq.n	800ee88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edd6:	4b2f      	ldr	r3, [pc, #188]	@ (800ee94 <xTaskPriorityDisinherit+0xd4>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d00b      	beq.n	800edf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	60fb      	str	r3, [r7, #12]
}
 800edf2:	bf00      	nop
 800edf4:	bf00      	nop
 800edf6:	e7fd      	b.n	800edf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10b      	bne.n	800ee18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	60bb      	str	r3, [r7, #8]
}
 800ee12:	bf00      	nop
 800ee14:	bf00      	nop
 800ee16:	e7fd      	b.n	800ee14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee1c:	1e5a      	subs	r2, r3, #1
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d02c      	beq.n	800ee88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d128      	bne.n	800ee88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fd ffe7 	bl	800ce0e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee58:	4b0f      	ldr	r3, [pc, #60]	@ (800ee98 <xTaskPriorityDisinherit+0xd8>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d903      	bls.n	800ee68 <xTaskPriorityDisinherit+0xa8>
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee64:	4a0c      	ldr	r2, [pc, #48]	@ (800ee98 <xTaskPriorityDisinherit+0xd8>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4a09      	ldr	r2, [pc, #36]	@ (800ee9c <xTaskPriorityDisinherit+0xdc>)
 800ee76:	441a      	add	r2, r3
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fd ff68 	bl	800cd54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee84:	2301      	movs	r3, #1
 800ee86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee88:	697b      	ldr	r3, [r7, #20]
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	200136c0 	.word	0x200136c0
 800ee98:	20013b9c 	.word	0x20013b9c
 800ee9c:	200136c4 	.word	0x200136c4

0800eea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b088      	sub	sp, #32
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d06c      	beq.n	800ef92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d10b      	bne.n	800eed8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	60fb      	str	r3, [r7, #12]
}
 800eed2:	bf00      	nop
 800eed4:	bf00      	nop
 800eed6:	e7fd      	b.n	800eed4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d902      	bls.n	800eee8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	61fb      	str	r3, [r7, #28]
 800eee6:	e002      	b.n	800eeee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eef2:	69fa      	ldr	r2, [r7, #28]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d04c      	beq.n	800ef92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eefc:	697a      	ldr	r2, [r7, #20]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d147      	bne.n	800ef92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef02:	4b26      	ldr	r3, [pc, #152]	@ (800ef9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	69ba      	ldr	r2, [r7, #24]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d10b      	bne.n	800ef24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	60bb      	str	r3, [r7, #8]
}
 800ef1e:	bf00      	nop
 800ef20:	bf00      	nop
 800ef22:	e7fd      	b.n	800ef20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	69fa      	ldr	r2, [r7, #28]
 800ef2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	699b      	ldr	r3, [r3, #24]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	db04      	blt.n	800ef42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	6959      	ldr	r1, [r3, #20]
 800ef46:	693a      	ldr	r2, [r7, #16]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4a13      	ldr	r2, [pc, #76]	@ (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef52:	4413      	add	r3, r2
 800ef54:	4299      	cmp	r1, r3
 800ef56:	d11c      	bne.n	800ef92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fd ff56 	bl	800ce0e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef66:	4b0f      	ldr	r3, [pc, #60]	@ (800efa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d903      	bls.n	800ef76 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef72:	4a0c      	ldr	r2, [pc, #48]	@ (800efa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef74:	6013      	str	r3, [r2, #0]
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4413      	add	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	4a07      	ldr	r2, [pc, #28]	@ (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef84:	441a      	add	r2, r3
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	3304      	adds	r3, #4
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	4610      	mov	r0, r2
 800ef8e:	f7fd fee1 	bl	800cd54 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef92:	bf00      	nop
 800ef94:	3720      	adds	r7, #32
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	200136c0 	.word	0x200136c0
 800efa0:	200136c4 	.word	0x200136c4
 800efa4:	20013b9c 	.word	0x20013b9c

0800efa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efa8:	b480      	push	{r7}
 800efaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efac:	4b07      	ldr	r3, [pc, #28]	@ (800efcc <pvTaskIncrementMutexHeldCount+0x24>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d004      	beq.n	800efbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efb4:	4b05      	ldr	r3, [pc, #20]	@ (800efcc <pvTaskIncrementMutexHeldCount+0x24>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efba:	3201      	adds	r2, #1
 800efbc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800efbe:	4b03      	ldr	r3, [pc, #12]	@ (800efcc <pvTaskIncrementMutexHeldCount+0x24>)
 800efc0:	681b      	ldr	r3, [r3, #0]
	}
 800efc2:	4618      	mov	r0, r3
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr
 800efcc:	200136c0 	.word	0x200136c0

0800efd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efda:	4b21      	ldr	r3, [pc, #132]	@ (800f060 <prvAddCurrentTaskToDelayedList+0x90>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efe0:	4b20      	ldr	r3, [pc, #128]	@ (800f064 <prvAddCurrentTaskToDelayedList+0x94>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	3304      	adds	r3, #4
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fd ff11 	bl	800ce0e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff2:	d10a      	bne.n	800f00a <prvAddCurrentTaskToDelayedList+0x3a>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d007      	beq.n	800f00a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800effa:	4b1a      	ldr	r3, [pc, #104]	@ (800f064 <prvAddCurrentTaskToDelayedList+0x94>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3304      	adds	r3, #4
 800f000:	4619      	mov	r1, r3
 800f002:	4819      	ldr	r0, [pc, #100]	@ (800f068 <prvAddCurrentTaskToDelayedList+0x98>)
 800f004:	f7fd fea6 	bl	800cd54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f008:	e026      	b.n	800f058 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4413      	add	r3, r2
 800f010:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f012:	4b14      	ldr	r3, [pc, #80]	@ (800f064 <prvAddCurrentTaskToDelayedList+0x94>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68ba      	ldr	r2, [r7, #8]
 800f018:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d209      	bcs.n	800f036 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f022:	4b12      	ldr	r3, [pc, #72]	@ (800f06c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	4b0f      	ldr	r3, [pc, #60]	@ (800f064 <prvAddCurrentTaskToDelayedList+0x94>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3304      	adds	r3, #4
 800f02c:	4619      	mov	r1, r3
 800f02e:	4610      	mov	r0, r2
 800f030:	f7fd feb4 	bl	800cd9c <vListInsert>
}
 800f034:	e010      	b.n	800f058 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f036:	4b0e      	ldr	r3, [pc, #56]	@ (800f070 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b0a      	ldr	r3, [pc, #40]	@ (800f064 <prvAddCurrentTaskToDelayedList+0x94>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3304      	adds	r3, #4
 800f040:	4619      	mov	r1, r3
 800f042:	4610      	mov	r0, r2
 800f044:	f7fd feaa 	bl	800cd9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f048:	4b0a      	ldr	r3, [pc, #40]	@ (800f074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d202      	bcs.n	800f058 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f052:	4a08      	ldr	r2, [pc, #32]	@ (800f074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	6013      	str	r3, [r2, #0]
}
 800f058:	bf00      	nop
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	20013b98 	.word	0x20013b98
 800f064:	200136c0 	.word	0x200136c0
 800f068:	20013b80 	.word	0x20013b80
 800f06c:	20013b50 	.word	0x20013b50
 800f070:	20013b4c 	.word	0x20013b4c
 800f074:	20013bb4 	.word	0x20013bb4

0800f078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08a      	sub	sp, #40	@ 0x28
 800f07c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f07e:	2300      	movs	r3, #0
 800f080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f082:	f000 fbb1 	bl	800f7e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f086:	4b1d      	ldr	r3, [pc, #116]	@ (800f0fc <xTimerCreateTimerTask+0x84>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d021      	beq.n	800f0d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f096:	1d3a      	adds	r2, r7, #4
 800f098:	f107 0108 	add.w	r1, r7, #8
 800f09c:	f107 030c 	add.w	r3, r7, #12
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fd fdbd 	bl	800cc20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	9202      	str	r2, [sp, #8]
 800f0ae:	9301      	str	r3, [sp, #4]
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	460a      	mov	r2, r1
 800f0b8:	4911      	ldr	r1, [pc, #68]	@ (800f100 <xTimerCreateTimerTask+0x88>)
 800f0ba:	4812      	ldr	r0, [pc, #72]	@ (800f104 <xTimerCreateTimerTask+0x8c>)
 800f0bc:	f7fe ffb6 	bl	800e02c <xTaskCreateStatic>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	4a11      	ldr	r2, [pc, #68]	@ (800f108 <xTimerCreateTimerTask+0x90>)
 800f0c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0c6:	4b10      	ldr	r3, [pc, #64]	@ (800f108 <xTimerCreateTimerTask+0x90>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d10b      	bne.n	800f0f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	613b      	str	r3, [r7, #16]
}
 800f0ea:	bf00      	nop
 800f0ec:	bf00      	nop
 800f0ee:	e7fd      	b.n	800f0ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0f0:	697b      	ldr	r3, [r7, #20]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3718      	adds	r7, #24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20013bf0 	.word	0x20013bf0
 800f100:	08012758 	.word	0x08012758
 800f104:	0800f381 	.word	0x0800f381
 800f108:	20013bf4 	.word	0x20013bf4

0800f10c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b088      	sub	sp, #32
 800f110:	af02      	add	r7, sp, #8
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f11a:	202c      	movs	r0, #44	@ 0x2c
 800f11c:	f000 fe16 	bl	800fd4c <pvPortMalloc>
 800f120:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00d      	beq.n	800f144 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	9301      	str	r3, [sp, #4]
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f000 f845 	bl	800f1ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f144:	697b      	ldr	r3, [r7, #20]
	}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b08a      	sub	sp, #40	@ 0x28
 800f152:	af02      	add	r7, sp, #8
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	607a      	str	r2, [r7, #4]
 800f15a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f15c:	232c      	movs	r3, #44	@ 0x2c
 800f15e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	2b2c      	cmp	r3, #44	@ 0x2c
 800f164:	d00b      	beq.n	800f17e <xTimerCreateStatic+0x30>
	__asm volatile
 800f166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f16a:	f383 8811 	msr	BASEPRI, r3
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	f3bf 8f4f 	dsb	sy
 800f176:	61bb      	str	r3, [r7, #24]
}
 800f178:	bf00      	nop
 800f17a:	bf00      	nop
 800f17c:	e7fd      	b.n	800f17a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f17e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10b      	bne.n	800f19e <xTimerCreateStatic+0x50>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f18a:	f383 8811 	msr	BASEPRI, r3
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	617b      	str	r3, [r7, #20]
}
 800f198:	bf00      	nop
 800f19a:	bf00      	nop
 800f19c:	e7fd      	b.n	800f19a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00d      	beq.n	800f1c4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	2202      	movs	r2, #2
 800f1ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	9301      	str	r3, [sp, #4]
 800f1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f000 f805 	bl	800f1ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f1c4:	69fb      	ldr	r3, [r7, #28]
	}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3720      	adds	r7, #32
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b086      	sub	sp, #24
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	60f8      	str	r0, [r7, #12]
 800f1d6:	60b9      	str	r1, [r7, #8]
 800f1d8:	607a      	str	r2, [r7, #4]
 800f1da:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10b      	bne.n	800f1fa <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	617b      	str	r3, [r7, #20]
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop
 800f1f8:	e7fd      	b.n	800f1f6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d01e      	beq.n	800f23e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f200:	f000 faf2 	bl	800f7e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f218:	6a3a      	ldr	r2, [r7, #32]
 800f21a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21e:	3304      	adds	r3, #4
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd fd8a 	bl	800cd3a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d008      	beq.n	800f23e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f232:	f043 0304 	orr.w	r3, r3, #4
 800f236:	b2da      	uxtb	r2, r3
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f23e:	bf00      	nop
 800f240:	3718      	adds	r7, #24
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
	...

0800f248 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b08a      	sub	sp, #40	@ 0x28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
 800f254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f256:	2300      	movs	r3, #0
 800f258:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d10b      	bne.n	800f278 <xTimerGenericCommand+0x30>
	__asm volatile
 800f260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f264:	f383 8811 	msr	BASEPRI, r3
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	623b      	str	r3, [r7, #32]
}
 800f272:	bf00      	nop
 800f274:	bf00      	nop
 800f276:	e7fd      	b.n	800f274 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f278:	4b19      	ldr	r3, [pc, #100]	@ (800f2e0 <xTimerGenericCommand+0x98>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d02a      	beq.n	800f2d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	2b05      	cmp	r3, #5
 800f290:	dc18      	bgt.n	800f2c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f292:	f7ff fd0f 	bl	800ecb4 <xTaskGetSchedulerState>
 800f296:	4603      	mov	r3, r0
 800f298:	2b02      	cmp	r3, #2
 800f29a:	d109      	bne.n	800f2b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f29c:	4b10      	ldr	r3, [pc, #64]	@ (800f2e0 <xTimerGenericCommand+0x98>)
 800f29e:	6818      	ldr	r0, [r3, #0]
 800f2a0:	f107 0110 	add.w	r1, r7, #16
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2a8:	f7fe f848 	bl	800d33c <xQueueGenericSend>
 800f2ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800f2ae:	e012      	b.n	800f2d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e0 <xTimerGenericCommand+0x98>)
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	f107 0110 	add.w	r1, r7, #16
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f7fe f83e 	bl	800d33c <xQueueGenericSend>
 800f2c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f2c2:	e008      	b.n	800f2d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f2c4:	4b06      	ldr	r3, [pc, #24]	@ (800f2e0 <xTimerGenericCommand+0x98>)
 800f2c6:	6818      	ldr	r0, [r3, #0]
 800f2c8:	f107 0110 	add.w	r1, r7, #16
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	f7fe f936 	bl	800d540 <xQueueGenericSendFromISR>
 800f2d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3728      	adds	r7, #40	@ 0x28
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	20013bf0 	.word	0x20013bf0

0800f2e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af02      	add	r7, sp, #8
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2ee:	4b23      	ldr	r3, [pc, #140]	@ (800f37c <prvProcessExpiredTimer+0x98>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	3304      	adds	r3, #4
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fd fd86 	bl	800ce0e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f308:	f003 0304 	and.w	r3, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d023      	beq.n	800f358 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	699a      	ldr	r2, [r3, #24]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	18d1      	adds	r1, r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	683a      	ldr	r2, [r7, #0]
 800f31c:	6978      	ldr	r0, [r7, #20]
 800f31e:	f000 f8d5 	bl	800f4cc <prvInsertTimerInActiveList>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d020      	beq.n	800f36a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f328:	2300      	movs	r3, #0
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	2300      	movs	r3, #0
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	2100      	movs	r1, #0
 800f332:	6978      	ldr	r0, [r7, #20]
 800f334:	f7ff ff88 	bl	800f248 <xTimerGenericCommand>
 800f338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d114      	bne.n	800f36a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	60fb      	str	r3, [r7, #12]
}
 800f352:	bf00      	nop
 800f354:	bf00      	nop
 800f356:	e7fd      	b.n	800f354 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f35e:	f023 0301 	bic.w	r3, r3, #1
 800f362:	b2da      	uxtb	r2, r3
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	6a1b      	ldr	r3, [r3, #32]
 800f36e:	6978      	ldr	r0, [r7, #20]
 800f370:	4798      	blx	r3
}
 800f372:	bf00      	nop
 800f374:	3718      	adds	r7, #24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	20013be8 	.word	0x20013be8

0800f380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f388:	f107 0308 	add.w	r3, r7, #8
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 f859 	bl	800f444 <prvGetNextExpireTime>
 800f392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	4619      	mov	r1, r3
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f805 	bl	800f3a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f39e:	f000 f8d7 	bl	800f550 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f3a2:	bf00      	nop
 800f3a4:	e7f0      	b.n	800f388 <prvTimerTask+0x8>
	...

0800f3a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f3b2:	f7ff f87f 	bl	800e4b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3b6:	f107 0308 	add.w	r3, r7, #8
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f000 f866 	bl	800f48c <prvSampleTimeNow>
 800f3c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d130      	bne.n	800f42a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10a      	bne.n	800f3e4 <prvProcessTimerOrBlockTask+0x3c>
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d806      	bhi.n	800f3e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f3d6:	f7ff f87b 	bl	800e4d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f3da:	68f9      	ldr	r1, [r7, #12]
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff ff81 	bl	800f2e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f3e2:	e024      	b.n	800f42e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d008      	beq.n	800f3fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f3ea:	4b13      	ldr	r3, [pc, #76]	@ (800f438 <prvProcessTimerOrBlockTask+0x90>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d101      	bne.n	800f3f8 <prvProcessTimerOrBlockTask+0x50>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e000      	b.n	800f3fa <prvProcessTimerOrBlockTask+0x52>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f43c <prvProcessTimerOrBlockTask+0x94>)
 800f3fe:	6818      	ldr	r0, [r3, #0]
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	683a      	ldr	r2, [r7, #0]
 800f408:	4619      	mov	r1, r3
 800f40a:	f7fe fddb 	bl	800dfc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f40e:	f7ff f85f 	bl	800e4d0 <xTaskResumeAll>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d10a      	bne.n	800f42e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f418:	4b09      	ldr	r3, [pc, #36]	@ (800f440 <prvProcessTimerOrBlockTask+0x98>)
 800f41a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f41e:	601a      	str	r2, [r3, #0]
 800f420:	f3bf 8f4f 	dsb	sy
 800f424:	f3bf 8f6f 	isb	sy
}
 800f428:	e001      	b.n	800f42e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f42a:	f7ff f851 	bl	800e4d0 <xTaskResumeAll>
}
 800f42e:	bf00      	nop
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	20013bec 	.word	0x20013bec
 800f43c:	20013bf0 	.word	0x20013bf0
 800f440:	e000ed04 	.word	0xe000ed04

0800f444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f44c:	4b0e      	ldr	r3, [pc, #56]	@ (800f488 <prvGetNextExpireTime+0x44>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d101      	bne.n	800f45a <prvGetNextExpireTime+0x16>
 800f456:	2201      	movs	r2, #1
 800f458:	e000      	b.n	800f45c <prvGetNextExpireTime+0x18>
 800f45a:	2200      	movs	r2, #0
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d105      	bne.n	800f474 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f468:	4b07      	ldr	r3, [pc, #28]	@ (800f488 <prvGetNextExpireTime+0x44>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	60fb      	str	r3, [r7, #12]
 800f472:	e001      	b.n	800f478 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f474:	2300      	movs	r3, #0
 800f476:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f478:	68fb      	ldr	r3, [r7, #12]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	20013be8 	.word	0x20013be8

0800f48c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f494:	f7ff f8ba 	bl	800e60c <xTaskGetTickCount>
 800f498:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f49a:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c8 <prvSampleTimeNow+0x3c>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d205      	bcs.n	800f4b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f4a4:	f000 f93a 	bl	800f71c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	e002      	b.n	800f4b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f4b6:	4a04      	ldr	r2, [pc, #16]	@ (800f4c8 <prvSampleTimeNow+0x3c>)
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20013bf8 	.word	0x20013bf8

0800f4cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b086      	sub	sp, #24
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f4ea:	68ba      	ldr	r2, [r7, #8]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d812      	bhi.n	800f518 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	1ad2      	subs	r2, r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	699b      	ldr	r3, [r3, #24]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d302      	bcc.n	800f506 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f500:	2301      	movs	r3, #1
 800f502:	617b      	str	r3, [r7, #20]
 800f504:	e01b      	b.n	800f53e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f506:	4b10      	ldr	r3, [pc, #64]	@ (800f548 <prvInsertTimerInActiveList+0x7c>)
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	3304      	adds	r3, #4
 800f50e:	4619      	mov	r1, r3
 800f510:	4610      	mov	r0, r2
 800f512:	f7fd fc43 	bl	800cd9c <vListInsert>
 800f516:	e012      	b.n	800f53e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d206      	bcs.n	800f52e <prvInsertTimerInActiveList+0x62>
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	429a      	cmp	r2, r3
 800f526:	d302      	bcc.n	800f52e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
 800f52c:	e007      	b.n	800f53e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f52e:	4b07      	ldr	r3, [pc, #28]	@ (800f54c <prvInsertTimerInActiveList+0x80>)
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	3304      	adds	r3, #4
 800f536:	4619      	mov	r1, r3
 800f538:	4610      	mov	r0, r2
 800f53a:	f7fd fc2f 	bl	800cd9c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f53e:	697b      	ldr	r3, [r7, #20]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	20013bec 	.word	0x20013bec
 800f54c:	20013be8 	.word	0x20013be8

0800f550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08e      	sub	sp, #56	@ 0x38
 800f554:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f556:	e0ce      	b.n	800f6f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	da19      	bge.n	800f592 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f55e:	1d3b      	adds	r3, r7, #4
 800f560:	3304      	adds	r3, #4
 800f562:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10b      	bne.n	800f582 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f56e:	f383 8811 	msr	BASEPRI, r3
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	61fb      	str	r3, [r7, #28]
}
 800f57c:	bf00      	nop
 800f57e:	bf00      	nop
 800f580:	e7fd      	b.n	800f57e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f588:	6850      	ldr	r0, [r2, #4]
 800f58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f58c:	6892      	ldr	r2, [r2, #8]
 800f58e:	4611      	mov	r1, r2
 800f590:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	f2c0 80ae 	blt.w	800f6f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d004      	beq.n	800f5b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fd fc2f 	bl	800ce0e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5b0:	463b      	mov	r3, r7
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7ff ff6a 	bl	800f48c <prvSampleTimeNow>
 800f5b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2b09      	cmp	r3, #9
 800f5be:	f200 8097 	bhi.w	800f6f0 <prvProcessReceivedCommands+0x1a0>
 800f5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c8 <prvProcessReceivedCommands+0x78>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5f1 	.word	0x0800f5f1
 800f5cc:	0800f5f1 	.word	0x0800f5f1
 800f5d0:	0800f5f1 	.word	0x0800f5f1
 800f5d4:	0800f667 	.word	0x0800f667
 800f5d8:	0800f67b 	.word	0x0800f67b
 800f5dc:	0800f6c7 	.word	0x0800f6c7
 800f5e0:	0800f5f1 	.word	0x0800f5f1
 800f5e4:	0800f5f1 	.word	0x0800f5f1
 800f5e8:	0800f667 	.word	0x0800f667
 800f5ec:	0800f67b 	.word	0x0800f67b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5f6:	f043 0301 	orr.w	r3, r3, #1
 800f5fa:	b2da      	uxtb	r2, r3
 800f5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	18d1      	adds	r1, r2, r3
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f60e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f610:	f7ff ff5c 	bl	800f4cc <prvInsertTimerInActiveList>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d06c      	beq.n	800f6f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f620:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f628:	f003 0304 	and.w	r3, r3, #4
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d061      	beq.n	800f6f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f634:	699b      	ldr	r3, [r3, #24]
 800f636:	441a      	add	r2, r3
 800f638:	2300      	movs	r3, #0
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	2300      	movs	r3, #0
 800f63e:	2100      	movs	r1, #0
 800f640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f642:	f7ff fe01 	bl	800f248 <xTimerGenericCommand>
 800f646:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f648:	6a3b      	ldr	r3, [r7, #32]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d152      	bne.n	800f6f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	61bb      	str	r3, [r7, #24]
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	e7fd      	b.n	800f662 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f66c:	f023 0301 	bic.w	r3, r3, #1
 800f670:	b2da      	uxtb	r2, r3
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f678:	e03d      	b.n	800f6f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f680:	f043 0301 	orr.w	r3, r3, #1
 800f684:	b2da      	uxtb	r2, r3
 800f686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f690:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f694:	699b      	ldr	r3, [r3, #24]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d10b      	bne.n	800f6b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	617b      	str	r3, [r7, #20]
}
 800f6ac:	bf00      	nop
 800f6ae:	bf00      	nop
 800f6b0:	e7fd      	b.n	800f6ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b4:	699a      	ldr	r2, [r3, #24]
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b8:	18d1      	adds	r1, r2, r3
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6c0:	f7ff ff04 	bl	800f4cc <prvInsertTimerInActiveList>
					break;
 800f6c4:	e017      	b.n	800f6f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6cc:	f003 0302 	and.w	r3, r3, #2
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d103      	bne.n	800f6dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6d6:	f000 fc07 	bl	800fee8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f6da:	e00c      	b.n	800f6f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6e2:	f023 0301 	bic.w	r3, r3, #1
 800f6e6:	b2da      	uxtb	r2, r3
 800f6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f6ee:	e002      	b.n	800f6f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f6f0:	bf00      	nop
 800f6f2:	e000      	b.n	800f6f6 <prvProcessReceivedCommands+0x1a6>
					break;
 800f6f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6f6:	4b08      	ldr	r3, [pc, #32]	@ (800f718 <prvProcessReceivedCommands+0x1c8>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	1d39      	adds	r1, r7, #4
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe f84c 	bl	800d79c <xQueueReceive>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	f47f af26 	bne.w	800f558 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f70c:	bf00      	nop
 800f70e:	bf00      	nop
 800f710:	3730      	adds	r7, #48	@ 0x30
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	20013bf0 	.word	0x20013bf0

0800f71c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b088      	sub	sp, #32
 800f720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f722:	e049      	b.n	800f7b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f724:	4b2e      	ldr	r3, [pc, #184]	@ (800f7e0 <prvSwitchTimerLists+0xc4>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f72e:	4b2c      	ldr	r3, [pc, #176]	@ (800f7e0 <prvSwitchTimerLists+0xc4>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3304      	adds	r3, #4
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fd fb66 	bl	800ce0e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f750:	f003 0304 	and.w	r3, r3, #4
 800f754:	2b00      	cmp	r3, #0
 800f756:	d02f      	beq.n	800f7b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	693a      	ldr	r2, [r7, #16]
 800f75e:	4413      	add	r3, r2
 800f760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	429a      	cmp	r2, r3
 800f768:	d90e      	bls.n	800f788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f776:	4b1a      	ldr	r3, [pc, #104]	@ (800f7e0 <prvSwitchTimerLists+0xc4>)
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	3304      	adds	r3, #4
 800f77e:	4619      	mov	r1, r3
 800f780:	4610      	mov	r0, r2
 800f782:	f7fd fb0b 	bl	800cd9c <vListInsert>
 800f786:	e017      	b.n	800f7b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f788:	2300      	movs	r3, #0
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	2300      	movs	r3, #0
 800f78e:	693a      	ldr	r2, [r7, #16]
 800f790:	2100      	movs	r1, #0
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7ff fd58 	bl	800f248 <xTimerGenericCommand>
 800f798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10b      	bne.n	800f7b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	603b      	str	r3, [r7, #0]
}
 800f7b2:	bf00      	nop
 800f7b4:	bf00      	nop
 800f7b6:	e7fd      	b.n	800f7b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f7b8:	4b09      	ldr	r3, [pc, #36]	@ (800f7e0 <prvSwitchTimerLists+0xc4>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1b0      	bne.n	800f724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f7c2:	4b07      	ldr	r3, [pc, #28]	@ (800f7e0 <prvSwitchTimerLists+0xc4>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f7c8:	4b06      	ldr	r3, [pc, #24]	@ (800f7e4 <prvSwitchTimerLists+0xc8>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a04      	ldr	r2, [pc, #16]	@ (800f7e0 <prvSwitchTimerLists+0xc4>)
 800f7ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f7d0:	4a04      	ldr	r2, [pc, #16]	@ (800f7e4 <prvSwitchTimerLists+0xc8>)
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6013      	str	r3, [r2, #0]
}
 800f7d6:	bf00      	nop
 800f7d8:	3718      	adds	r7, #24
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20013be8 	.word	0x20013be8
 800f7e4:	20013bec 	.word	0x20013bec

0800f7e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f7ee:	f000 f98b 	bl	800fb08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f7f2:	4b15      	ldr	r3, [pc, #84]	@ (800f848 <prvCheckForValidListAndQueue+0x60>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d120      	bne.n	800f83c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f7fa:	4814      	ldr	r0, [pc, #80]	@ (800f84c <prvCheckForValidListAndQueue+0x64>)
 800f7fc:	f7fd fa7d 	bl	800ccfa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f800:	4813      	ldr	r0, [pc, #76]	@ (800f850 <prvCheckForValidListAndQueue+0x68>)
 800f802:	f7fd fa7a 	bl	800ccfa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f806:	4b13      	ldr	r3, [pc, #76]	@ (800f854 <prvCheckForValidListAndQueue+0x6c>)
 800f808:	4a10      	ldr	r2, [pc, #64]	@ (800f84c <prvCheckForValidListAndQueue+0x64>)
 800f80a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f80c:	4b12      	ldr	r3, [pc, #72]	@ (800f858 <prvCheckForValidListAndQueue+0x70>)
 800f80e:	4a10      	ldr	r2, [pc, #64]	@ (800f850 <prvCheckForValidListAndQueue+0x68>)
 800f810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f812:	2300      	movs	r3, #0
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	4b11      	ldr	r3, [pc, #68]	@ (800f85c <prvCheckForValidListAndQueue+0x74>)
 800f818:	4a11      	ldr	r2, [pc, #68]	@ (800f860 <prvCheckForValidListAndQueue+0x78>)
 800f81a:	2110      	movs	r1, #16
 800f81c:	200a      	movs	r0, #10
 800f81e:	f7fd fb8b 	bl	800cf38 <xQueueGenericCreateStatic>
 800f822:	4603      	mov	r3, r0
 800f824:	4a08      	ldr	r2, [pc, #32]	@ (800f848 <prvCheckForValidListAndQueue+0x60>)
 800f826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f828:	4b07      	ldr	r3, [pc, #28]	@ (800f848 <prvCheckForValidListAndQueue+0x60>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d005      	beq.n	800f83c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f830:	4b05      	ldr	r3, [pc, #20]	@ (800f848 <prvCheckForValidListAndQueue+0x60>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	490b      	ldr	r1, [pc, #44]	@ (800f864 <prvCheckForValidListAndQueue+0x7c>)
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fb70 	bl	800df1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f83c:	f000 f996 	bl	800fb6c <vPortExitCritical>
}
 800f840:	bf00      	nop
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	20013bf0 	.word	0x20013bf0
 800f84c:	20013bc0 	.word	0x20013bc0
 800f850:	20013bd4 	.word	0x20013bd4
 800f854:	20013be8 	.word	0x20013be8
 800f858:	20013bec 	.word	0x20013bec
 800f85c:	20013c9c 	.word	0x20013c9c
 800f860:	20013bfc 	.word	0x20013bfc
 800f864:	08012760 	.word	0x08012760

0800f868 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10b      	bne.n	800f892 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	60fb      	str	r3, [r7, #12]
}
 800f88c:	bf00      	nop
 800f88e:	bf00      	nop
 800f890:	e7fd      	b.n	800f88e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f892:	f000 f939 	bl	800fb08 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	69db      	ldr	r3, [r3, #28]
 800f89a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f89c:	f000 f966 	bl	800fb6c <vPortExitCritical>

	return pvReturn;
 800f8a0:	693b      	ldr	r3, [r7, #16]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3718      	adds	r7, #24
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3b04      	subs	r3, #4
 800f8bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f8c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3b04      	subs	r3, #4
 800f8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	f023 0201 	bic.w	r2, r3, #1
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	3b04      	subs	r3, #4
 800f8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8dc:	4a0c      	ldr	r2, [pc, #48]	@ (800f910 <pxPortInitialiseStack+0x64>)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	3b14      	subs	r3, #20
 800f8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	3b04      	subs	r3, #4
 800f8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f06f 0202 	mvn.w	r2, #2
 800f8fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	3b20      	subs	r3, #32
 800f900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f902:	68fb      	ldr	r3, [r7, #12]
}
 800f904:	4618      	mov	r0, r3
 800f906:	3714      	adds	r7, #20
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	0800f915 	.word	0x0800f915

0800f914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f91e:	4b13      	ldr	r3, [pc, #76]	@ (800f96c <prvTaskExitError+0x58>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f926:	d00b      	beq.n	800f940 <prvTaskExitError+0x2c>
	__asm volatile
 800f928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f92c:	f383 8811 	msr	BASEPRI, r3
 800f930:	f3bf 8f6f 	isb	sy
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	60fb      	str	r3, [r7, #12]
}
 800f93a:	bf00      	nop
 800f93c:	bf00      	nop
 800f93e:	e7fd      	b.n	800f93c <prvTaskExitError+0x28>
	__asm volatile
 800f940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f944:	f383 8811 	msr	BASEPRI, r3
 800f948:	f3bf 8f6f 	isb	sy
 800f94c:	f3bf 8f4f 	dsb	sy
 800f950:	60bb      	str	r3, [r7, #8]
}
 800f952:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f954:	bf00      	nop
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d0fc      	beq.n	800f956 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f95c:	bf00      	nop
 800f95e:	bf00      	nop
 800f960:	3714      	adds	r7, #20
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	2000002c 	.word	0x2000002c

0800f970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f970:	4b07      	ldr	r3, [pc, #28]	@ (800f990 <pxCurrentTCBConst2>)
 800f972:	6819      	ldr	r1, [r3, #0]
 800f974:	6808      	ldr	r0, [r1, #0]
 800f976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97a:	f380 8809 	msr	PSP, r0
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f04f 0000 	mov.w	r0, #0
 800f986:	f380 8811 	msr	BASEPRI, r0
 800f98a:	4770      	bx	lr
 800f98c:	f3af 8000 	nop.w

0800f990 <pxCurrentTCBConst2>:
 800f990:	200136c0 	.word	0x200136c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f994:	bf00      	nop
 800f996:	bf00      	nop

0800f998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f998:	4808      	ldr	r0, [pc, #32]	@ (800f9bc <prvPortStartFirstTask+0x24>)
 800f99a:	6800      	ldr	r0, [r0, #0]
 800f99c:	6800      	ldr	r0, [r0, #0]
 800f99e:	f380 8808 	msr	MSP, r0
 800f9a2:	f04f 0000 	mov.w	r0, #0
 800f9a6:	f380 8814 	msr	CONTROL, r0
 800f9aa:	b662      	cpsie	i
 800f9ac:	b661      	cpsie	f
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	f3bf 8f6f 	isb	sy
 800f9b6:	df00      	svc	0
 800f9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f9ba:	bf00      	nop
 800f9bc:	e000ed08 	.word	0xe000ed08

0800f9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b086      	sub	sp, #24
 800f9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f9c6:	4b47      	ldr	r3, [pc, #284]	@ (800fae4 <xPortStartScheduler+0x124>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a47      	ldr	r2, [pc, #284]	@ (800fae8 <xPortStartScheduler+0x128>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d10b      	bne.n	800f9e8 <xPortStartScheduler+0x28>
	__asm volatile
 800f9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d4:	f383 8811 	msr	BASEPRI, r3
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	f3bf 8f4f 	dsb	sy
 800f9e0:	60fb      	str	r3, [r7, #12]
}
 800f9e2:	bf00      	nop
 800f9e4:	bf00      	nop
 800f9e6:	e7fd      	b.n	800f9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9e8:	4b3e      	ldr	r3, [pc, #248]	@ (800fae4 <xPortStartScheduler+0x124>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a3f      	ldr	r2, [pc, #252]	@ (800faec <xPortStartScheduler+0x12c>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d10b      	bne.n	800fa0a <xPortStartScheduler+0x4a>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	613b      	str	r3, [r7, #16]
}
 800fa04:	bf00      	nop
 800fa06:	bf00      	nop
 800fa08:	e7fd      	b.n	800fa06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa0a:	4b39      	ldr	r3, [pc, #228]	@ (800faf0 <xPortStartScheduler+0x130>)
 800fa0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	22ff      	movs	r2, #255	@ 0xff
 800fa1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa24:	78fb      	ldrb	r3, [r7, #3]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	4b31      	ldr	r3, [pc, #196]	@ (800faf4 <xPortStartScheduler+0x134>)
 800fa30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa32:	4b31      	ldr	r3, [pc, #196]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa34:	2207      	movs	r2, #7
 800fa36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa38:	e009      	b.n	800fa4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fa3a:	4b2f      	ldr	r3, [pc, #188]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	4a2d      	ldr	r2, [pc, #180]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa44:	78fb      	ldrb	r3, [r7, #3]
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa4e:	78fb      	ldrb	r3, [r7, #3]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa56:	2b80      	cmp	r3, #128	@ 0x80
 800fa58:	d0ef      	beq.n	800fa3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa5a:	4b27      	ldr	r3, [pc, #156]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f1c3 0307 	rsb	r3, r3, #7
 800fa62:	2b04      	cmp	r3, #4
 800fa64:	d00b      	beq.n	800fa7e <xPortStartScheduler+0xbe>
	__asm volatile
 800fa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa6a:	f383 8811 	msr	BASEPRI, r3
 800fa6e:	f3bf 8f6f 	isb	sy
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	60bb      	str	r3, [r7, #8]
}
 800fa78:	bf00      	nop
 800fa7a:	bf00      	nop
 800fa7c:	e7fd      	b.n	800fa7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa7e:	4b1e      	ldr	r3, [pc, #120]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	021b      	lsls	r3, r3, #8
 800fa84:	4a1c      	ldr	r2, [pc, #112]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa88:	4b1b      	ldr	r3, [pc, #108]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fa90:	4a19      	ldr	r2, [pc, #100]	@ (800faf8 <xPortStartScheduler+0x138>)
 800fa92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	b2da      	uxtb	r2, r3
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa9c:	4b17      	ldr	r3, [pc, #92]	@ (800fafc <xPortStartScheduler+0x13c>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a16      	ldr	r2, [pc, #88]	@ (800fafc <xPortStartScheduler+0x13c>)
 800faa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800faa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800faa8:	4b14      	ldr	r3, [pc, #80]	@ (800fafc <xPortStartScheduler+0x13c>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a13      	ldr	r2, [pc, #76]	@ (800fafc <xPortStartScheduler+0x13c>)
 800faae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fab4:	f000 f8da 	bl	800fc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fab8:	4b11      	ldr	r3, [pc, #68]	@ (800fb00 <xPortStartScheduler+0x140>)
 800faba:	2200      	movs	r2, #0
 800fabc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fabe:	f000 f8f9 	bl	800fcb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fac2:	4b10      	ldr	r3, [pc, #64]	@ (800fb04 <xPortStartScheduler+0x144>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a0f      	ldr	r2, [pc, #60]	@ (800fb04 <xPortStartScheduler+0x144>)
 800fac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800facc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800face:	f7ff ff63 	bl	800f998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fad2:	f7fe fe6d 	bl	800e7b0 <vTaskSwitchContext>
	prvTaskExitError();
 800fad6:	f7ff ff1d 	bl	800f914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3718      	adds	r7, #24
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	e000ed00 	.word	0xe000ed00
 800fae8:	410fc271 	.word	0x410fc271
 800faec:	410fc270 	.word	0x410fc270
 800faf0:	e000e400 	.word	0xe000e400
 800faf4:	20013cec 	.word	0x20013cec
 800faf8:	20013cf0 	.word	0x20013cf0
 800fafc:	e000ed20 	.word	0xe000ed20
 800fb00:	2000002c 	.word	0x2000002c
 800fb04:	e000ef34 	.word	0xe000ef34

0800fb08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb12:	f383 8811 	msr	BASEPRI, r3
 800fb16:	f3bf 8f6f 	isb	sy
 800fb1a:	f3bf 8f4f 	dsb	sy
 800fb1e:	607b      	str	r3, [r7, #4]
}
 800fb20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb22:	4b10      	ldr	r3, [pc, #64]	@ (800fb64 <vPortEnterCritical+0x5c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3301      	adds	r3, #1
 800fb28:	4a0e      	ldr	r2, [pc, #56]	@ (800fb64 <vPortEnterCritical+0x5c>)
 800fb2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fb64 <vPortEnterCritical+0x5c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d110      	bne.n	800fb56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb34:	4b0c      	ldr	r3, [pc, #48]	@ (800fb68 <vPortEnterCritical+0x60>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00b      	beq.n	800fb56 <vPortEnterCritical+0x4e>
	__asm volatile
 800fb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	603b      	str	r3, [r7, #0]
}
 800fb50:	bf00      	nop
 800fb52:	bf00      	nop
 800fb54:	e7fd      	b.n	800fb52 <vPortEnterCritical+0x4a>
	}
}
 800fb56:	bf00      	nop
 800fb58:	370c      	adds	r7, #12
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	2000002c 	.word	0x2000002c
 800fb68:	e000ed04 	.word	0xe000ed04

0800fb6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb72:	4b12      	ldr	r3, [pc, #72]	@ (800fbbc <vPortExitCritical+0x50>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10b      	bne.n	800fb92 <vPortExitCritical+0x26>
	__asm volatile
 800fb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	607b      	str	r3, [r7, #4]
}
 800fb8c:	bf00      	nop
 800fb8e:	bf00      	nop
 800fb90:	e7fd      	b.n	800fb8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb92:	4b0a      	ldr	r3, [pc, #40]	@ (800fbbc <vPortExitCritical+0x50>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	3b01      	subs	r3, #1
 800fb98:	4a08      	ldr	r2, [pc, #32]	@ (800fbbc <vPortExitCritical+0x50>)
 800fb9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb9c:	4b07      	ldr	r3, [pc, #28]	@ (800fbbc <vPortExitCritical+0x50>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d105      	bne.n	800fbb0 <vPortExitCritical+0x44>
 800fba4:	2300      	movs	r3, #0
 800fba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	f383 8811 	msr	BASEPRI, r3
}
 800fbae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fbb0:	bf00      	nop
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr
 800fbbc:	2000002c 	.word	0x2000002c

0800fbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fbc0:	f3ef 8009 	mrs	r0, PSP
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	4b15      	ldr	r3, [pc, #84]	@ (800fc20 <pxCurrentTCBConst>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	f01e 0f10 	tst.w	lr, #16
 800fbd0:	bf08      	it	eq
 800fbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbda:	6010      	str	r0, [r2, #0]
 800fbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fbe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fbe4:	f380 8811 	msr	BASEPRI, r0
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f7fe fdde 	bl	800e7b0 <vTaskSwitchContext>
 800fbf4:	f04f 0000 	mov.w	r0, #0
 800fbf8:	f380 8811 	msr	BASEPRI, r0
 800fbfc:	bc09      	pop	{r0, r3}
 800fbfe:	6819      	ldr	r1, [r3, #0]
 800fc00:	6808      	ldr	r0, [r1, #0]
 800fc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc06:	f01e 0f10 	tst.w	lr, #16
 800fc0a:	bf08      	it	eq
 800fc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc10:	f380 8809 	msr	PSP, r0
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	f3af 8000 	nop.w

0800fc20 <pxCurrentTCBConst>:
 800fc20:	200136c0 	.word	0x200136c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop

0800fc28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc32:	f383 8811 	msr	BASEPRI, r3
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	607b      	str	r3, [r7, #4]
}
 800fc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc42:	f7fe fcf3 	bl	800e62c <xTaskIncrementTick>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d003      	beq.n	800fc54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc4c:	4b06      	ldr	r3, [pc, #24]	@ (800fc68 <xPortSysTickHandler+0x40>)
 800fc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	2300      	movs	r3, #0
 800fc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	f383 8811 	msr	BASEPRI, r3
}
 800fc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc60:	bf00      	nop
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	e000ed04 	.word	0xe000ed04

0800fc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc70:	4b0b      	ldr	r3, [pc, #44]	@ (800fca0 <vPortSetupTimerInterrupt+0x34>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc76:	4b0b      	ldr	r3, [pc, #44]	@ (800fca4 <vPortSetupTimerInterrupt+0x38>)
 800fc78:	2200      	movs	r2, #0
 800fc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fca8 <vPortSetupTimerInterrupt+0x3c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a0a      	ldr	r2, [pc, #40]	@ (800fcac <vPortSetupTimerInterrupt+0x40>)
 800fc82:	fba2 2303 	umull	r2, r3, r2, r3
 800fc86:	099b      	lsrs	r3, r3, #6
 800fc88:	4a09      	ldr	r2, [pc, #36]	@ (800fcb0 <vPortSetupTimerInterrupt+0x44>)
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc8e:	4b04      	ldr	r3, [pc, #16]	@ (800fca0 <vPortSetupTimerInterrupt+0x34>)
 800fc90:	2207      	movs	r2, #7
 800fc92:	601a      	str	r2, [r3, #0]
}
 800fc94:	bf00      	nop
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	e000e010 	.word	0xe000e010
 800fca4:	e000e018 	.word	0xe000e018
 800fca8:	20000000 	.word	0x20000000
 800fcac:	10624dd3 	.word	0x10624dd3
 800fcb0:	e000e014 	.word	0xe000e014

0800fcb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fcb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fcc4 <vPortEnableVFP+0x10>
 800fcb8:	6801      	ldr	r1, [r0, #0]
 800fcba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fcbe:	6001      	str	r1, [r0, #0]
 800fcc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fcc2:	bf00      	nop
 800fcc4:	e000ed88 	.word	0xe000ed88

0800fcc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fcc8:	b480      	push	{r7}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fcce:	f3ef 8305 	mrs	r3, IPSR
 800fcd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b0f      	cmp	r3, #15
 800fcd8:	d915      	bls.n	800fd06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fcda:	4a18      	ldr	r2, [pc, #96]	@ (800fd3c <vPortValidateInterruptPriority+0x74>)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	4413      	add	r3, r2
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fce4:	4b16      	ldr	r3, [pc, #88]	@ (800fd40 <vPortValidateInterruptPriority+0x78>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	7afa      	ldrb	r2, [r7, #11]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d20b      	bcs.n	800fd06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	607b      	str	r3, [r7, #4]
}
 800fd00:	bf00      	nop
 800fd02:	bf00      	nop
 800fd04:	e7fd      	b.n	800fd02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd06:	4b0f      	ldr	r3, [pc, #60]	@ (800fd44 <vPortValidateInterruptPriority+0x7c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fd0e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd48 <vPortValidateInterruptPriority+0x80>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d90b      	bls.n	800fd2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	603b      	str	r3, [r7, #0]
}
 800fd28:	bf00      	nop
 800fd2a:	bf00      	nop
 800fd2c:	e7fd      	b.n	800fd2a <vPortValidateInterruptPriority+0x62>
	}
 800fd2e:	bf00      	nop
 800fd30:	3714      	adds	r7, #20
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr
 800fd3a:	bf00      	nop
 800fd3c:	e000e3f0 	.word	0xe000e3f0
 800fd40:	20013cec 	.word	0x20013cec
 800fd44:	e000ed0c 	.word	0xe000ed0c
 800fd48:	20013cf0 	.word	0x20013cf0

0800fd4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b08a      	sub	sp, #40	@ 0x28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd54:	2300      	movs	r3, #0
 800fd56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd58:	f7fe fbac 	bl	800e4b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd5c:	4b5c      	ldr	r3, [pc, #368]	@ (800fed0 <pvPortMalloc+0x184>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d101      	bne.n	800fd68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd64:	f000 f924 	bl	800ffb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd68:	4b5a      	ldr	r3, [pc, #360]	@ (800fed4 <pvPortMalloc+0x188>)
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4013      	ands	r3, r2
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f040 8095 	bne.w	800fea0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d01e      	beq.n	800fdba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fd7c:	2208      	movs	r2, #8
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4413      	add	r3, r2
 800fd82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f003 0307 	and.w	r3, r3, #7
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d015      	beq.n	800fdba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f023 0307 	bic.w	r3, r3, #7
 800fd94:	3308      	adds	r3, #8
 800fd96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f003 0307 	and.w	r3, r3, #7
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00b      	beq.n	800fdba <pvPortMalloc+0x6e>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	617b      	str	r3, [r7, #20]
}
 800fdb4:	bf00      	nop
 800fdb6:	bf00      	nop
 800fdb8:	e7fd      	b.n	800fdb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d06f      	beq.n	800fea0 <pvPortMalloc+0x154>
 800fdc0:	4b45      	ldr	r3, [pc, #276]	@ (800fed8 <pvPortMalloc+0x18c>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d86a      	bhi.n	800fea0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fdca:	4b44      	ldr	r3, [pc, #272]	@ (800fedc <pvPortMalloc+0x190>)
 800fdcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fdce:	4b43      	ldr	r3, [pc, #268]	@ (800fedc <pvPortMalloc+0x190>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdd4:	e004      	b.n	800fde0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d903      	bls.n	800fdf2 <pvPortMalloc+0xa6>
 800fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1f1      	bne.n	800fdd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fdf2:	4b37      	ldr	r3, [pc, #220]	@ (800fed0 <pvPortMalloc+0x184>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d051      	beq.n	800fea0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdfc:	6a3b      	ldr	r3, [r7, #32]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2208      	movs	r2, #8
 800fe02:	4413      	add	r3, r2
 800fe04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	6a3b      	ldr	r3, [r7, #32]
 800fe0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe10:	685a      	ldr	r2, [r3, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	1ad2      	subs	r2, r2, r3
 800fe16:	2308      	movs	r3, #8
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d920      	bls.n	800fe60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4413      	add	r3, r2
 800fe24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	f003 0307 	and.w	r3, r3, #7
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00b      	beq.n	800fe48 <pvPortMalloc+0xfc>
	__asm volatile
 800fe30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	613b      	str	r3, [r7, #16]
}
 800fe42:	bf00      	nop
 800fe44:	bf00      	nop
 800fe46:	e7fd      	b.n	800fe44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe4a:	685a      	ldr	r2, [r3, #4]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	1ad2      	subs	r2, r2, r3
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe5a:	69b8      	ldr	r0, [r7, #24]
 800fe5c:	f000 f90a 	bl	8010074 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe60:	4b1d      	ldr	r3, [pc, #116]	@ (800fed8 <pvPortMalloc+0x18c>)
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	4a1b      	ldr	r2, [pc, #108]	@ (800fed8 <pvPortMalloc+0x18c>)
 800fe6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe6e:	4b1a      	ldr	r3, [pc, #104]	@ (800fed8 <pvPortMalloc+0x18c>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	4b1b      	ldr	r3, [pc, #108]	@ (800fee0 <pvPortMalloc+0x194>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d203      	bcs.n	800fe82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe7a:	4b17      	ldr	r3, [pc, #92]	@ (800fed8 <pvPortMalloc+0x18c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4a18      	ldr	r2, [pc, #96]	@ (800fee0 <pvPortMalloc+0x194>)
 800fe80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	4b13      	ldr	r3, [pc, #76]	@ (800fed4 <pvPortMalloc+0x188>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	431a      	orrs	r2, r3
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fe96:	4b13      	ldr	r3, [pc, #76]	@ (800fee4 <pvPortMalloc+0x198>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	4a11      	ldr	r2, [pc, #68]	@ (800fee4 <pvPortMalloc+0x198>)
 800fe9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fea0:	f7fe fb16 	bl	800e4d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	f003 0307 	and.w	r3, r3, #7
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00b      	beq.n	800fec6 <pvPortMalloc+0x17a>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	60fb      	str	r3, [r7, #12]
}
 800fec0:	bf00      	nop
 800fec2:	bf00      	nop
 800fec4:	e7fd      	b.n	800fec2 <pvPortMalloc+0x176>
	return pvReturn;
 800fec6:	69fb      	ldr	r3, [r7, #28]
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3728      	adds	r7, #40	@ 0x28
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	20016cfc 	.word	0x20016cfc
 800fed4:	20016d10 	.word	0x20016d10
 800fed8:	20016d00 	.word	0x20016d00
 800fedc:	20016cf4 	.word	0x20016cf4
 800fee0:	20016d04 	.word	0x20016d04
 800fee4:	20016d08 	.word	0x20016d08

0800fee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d04f      	beq.n	800ff9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fefa:	2308      	movs	r3, #8
 800fefc:	425b      	negs	r3, r3
 800fefe:	697a      	ldr	r2, [r7, #20]
 800ff00:	4413      	add	r3, r2
 800ff02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	4b25      	ldr	r3, [pc, #148]	@ (800ffa4 <vPortFree+0xbc>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4013      	ands	r3, r2
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10b      	bne.n	800ff2e <vPortFree+0x46>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	60fb      	str	r3, [r7, #12]
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	e7fd      	b.n	800ff2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00b      	beq.n	800ff4e <vPortFree+0x66>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	60bb      	str	r3, [r7, #8]
}
 800ff48:	bf00      	nop
 800ff4a:	bf00      	nop
 800ff4c:	e7fd      	b.n	800ff4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	685a      	ldr	r2, [r3, #4]
 800ff52:	4b14      	ldr	r3, [pc, #80]	@ (800ffa4 <vPortFree+0xbc>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4013      	ands	r3, r2
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d01e      	beq.n	800ff9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d11a      	bne.n	800ff9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	685a      	ldr	r2, [r3, #4]
 800ff68:	4b0e      	ldr	r3, [pc, #56]	@ (800ffa4 <vPortFree+0xbc>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	43db      	mvns	r3, r3
 800ff6e:	401a      	ands	r2, r3
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff74:	f7fe fa9e 	bl	800e4b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	685a      	ldr	r2, [r3, #4]
 800ff7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ffa8 <vPortFree+0xc0>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4413      	add	r3, r2
 800ff82:	4a09      	ldr	r2, [pc, #36]	@ (800ffa8 <vPortFree+0xc0>)
 800ff84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff86:	6938      	ldr	r0, [r7, #16]
 800ff88:	f000 f874 	bl	8010074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ff8c:	4b07      	ldr	r3, [pc, #28]	@ (800ffac <vPortFree+0xc4>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3301      	adds	r3, #1
 800ff92:	4a06      	ldr	r2, [pc, #24]	@ (800ffac <vPortFree+0xc4>)
 800ff94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ff96:	f7fe fa9b 	bl	800e4d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff9a:	bf00      	nop
 800ff9c:	3718      	adds	r7, #24
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20016d10 	.word	0x20016d10
 800ffa8:	20016d00 	.word	0x20016d00
 800ffac:	20016d0c 	.word	0x20016d0c

0800ffb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ffb6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800ffba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ffbc:	4b27      	ldr	r3, [pc, #156]	@ (801005c <prvHeapInit+0xac>)
 800ffbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f003 0307 	and.w	r3, r3, #7
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00c      	beq.n	800ffe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	3307      	adds	r3, #7
 800ffce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f023 0307 	bic.w	r3, r3, #7
 800ffd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	4a1f      	ldr	r2, [pc, #124]	@ (801005c <prvHeapInit+0xac>)
 800ffe0:	4413      	add	r3, r2
 800ffe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ffe8:	4a1d      	ldr	r2, [pc, #116]	@ (8010060 <prvHeapInit+0xb0>)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffee:	4b1c      	ldr	r3, [pc, #112]	@ (8010060 <prvHeapInit+0xb0>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	4413      	add	r3, r2
 800fffa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fffc:	2208      	movs	r2, #8
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	1a9b      	subs	r3, r3, r2
 8010002:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f023 0307 	bic.w	r3, r3, #7
 801000a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4a15      	ldr	r2, [pc, #84]	@ (8010064 <prvHeapInit+0xb4>)
 8010010:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010012:	4b14      	ldr	r3, [pc, #80]	@ (8010064 <prvHeapInit+0xb4>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2200      	movs	r2, #0
 8010018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801001a:	4b12      	ldr	r3, [pc, #72]	@ (8010064 <prvHeapInit+0xb4>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2200      	movs	r2, #0
 8010020:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	1ad2      	subs	r2, r2, r3
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010030:	4b0c      	ldr	r3, [pc, #48]	@ (8010064 <prvHeapInit+0xb4>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	4a0a      	ldr	r2, [pc, #40]	@ (8010068 <prvHeapInit+0xb8>)
 801003e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	4a09      	ldr	r2, [pc, #36]	@ (801006c <prvHeapInit+0xbc>)
 8010046:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010048:	4b09      	ldr	r3, [pc, #36]	@ (8010070 <prvHeapInit+0xc0>)
 801004a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801004e:	601a      	str	r2, [r3, #0]
}
 8010050:	bf00      	nop
 8010052:	3714      	adds	r7, #20
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	20013cf4 	.word	0x20013cf4
 8010060:	20016cf4 	.word	0x20016cf4
 8010064:	20016cfc 	.word	0x20016cfc
 8010068:	20016d04 	.word	0x20016d04
 801006c:	20016d00 	.word	0x20016d00
 8010070:	20016d10 	.word	0x20016d10

08010074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801007c:	4b28      	ldr	r3, [pc, #160]	@ (8010120 <prvInsertBlockIntoFreeList+0xac>)
 801007e:	60fb      	str	r3, [r7, #12]
 8010080:	e002      	b.n	8010088 <prvInsertBlockIntoFreeList+0x14>
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	429a      	cmp	r2, r3
 8010090:	d8f7      	bhi.n	8010082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	4413      	add	r3, r2
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d108      	bne.n	80100b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	441a      	add	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	68ba      	ldr	r2, [r7, #8]
 80100c0:	441a      	add	r2, r3
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d118      	bne.n	80100fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	4b15      	ldr	r3, [pc, #84]	@ (8010124 <prvInsertBlockIntoFreeList+0xb0>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d00d      	beq.n	80100f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	441a      	add	r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	601a      	str	r2, [r3, #0]
 80100f0:	e008      	b.n	8010104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80100f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010124 <prvInsertBlockIntoFreeList+0xb0>)
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	e003      	b.n	8010104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	429a      	cmp	r2, r3
 801010a:	d002      	beq.n	8010112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010112:	bf00      	nop
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	20016cf4 	.word	0x20016cf4
 8010124:	20016cfc 	.word	0x20016cfc

08010128 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 8010130:	4b07      	ldr	r3, [pc, #28]	@ (8010150 <lv_tick_inc+0x28>)
 8010132:	2200      	movs	r2, #0
 8010134:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8010136:	4b07      	ldr	r3, [pc, #28]	@ (8010154 <lv_tick_inc+0x2c>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4413      	add	r3, r2
 801013e:	4a05      	ldr	r2, [pc, #20]	@ (8010154 <lv_tick_inc+0x2c>)
 8010140:	6013      	str	r3, [r2, #0]
}
 8010142:	bf00      	nop
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	20016d18 	.word	0x20016d18
 8010154:	20016d14 	.word	0x20016d14

08010158 <prv_get_region_addr_size>:
 * \param[out]      msa: Memory start address output variable
 * \param[out]      ms: Memory size output variable
 * \return          `1` if region valid, `0` otherwise
 */
static uint8_t
prv_get_region_addr_size(const lwmem_region_t* region, uint8_t** msa, size_t* ms) {
 8010158:	b480      	push	{r7}
 801015a:	b087      	sub	sp, #28
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]
    size_t mem_size;
    uint8_t* mem_start_addr;

    if (region == NULL || msa == NULL || ms == NULL) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d005      	beq.n	8010176 <prv_get_region_addr_size+0x1e>
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d002      	beq.n	8010176 <prv_get_region_addr_size+0x1e>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d101      	bne.n	801017a <prv_get_region_addr_size+0x22>
        return 0;
 8010176:	2300      	movs	r3, #0
 8010178:	e033      	b.n	80101e2 <prv_get_region_addr_size+0x8a>
    }
    *msa = NULL;
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	2200      	movs	r2, #0
 801017e:	601a      	str	r2, [r3, #0]
    *ms = 0;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2200      	movs	r2, #0
 8010184:	601a      	str	r2, [r3, #0]

    /* Check region size and align it to config bits */
    mem_size = region->size & ~LWMEM_ALIGN_BITS; /* Size does not include lower bits */
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	f023 0307 	bic.w	r3, r3, #7
 801018e:	617b      	str	r3, [r7, #20]
    if (mem_size < (2 * LWMEM_BLOCK_MIN_SIZE)) {
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	2b0f      	cmp	r3, #15
 8010194:	d801      	bhi.n	801019a <prv_get_region_addr_size+0x42>
        return 0;
 8010196:	2300      	movs	r3, #0
 8010198:	e023      	b.n	80101e2 <prv_get_region_addr_size+0x8a>

    /*
     * Start address must be aligned to configuration
     * Increase start address and decrease effective region size
     */
    mem_start_addr = region->start_addr;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	613b      	str	r3, [r7, #16]
    if (((size_t)mem_start_addr) & LWMEM_ALIGN_BITS) { /* Check alignment boundary */
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00f      	beq.n	80101ca <prv_get_region_addr_size+0x72>
        mem_start_addr += ((size_t)LWMEM_CFG_ALIGN_NUM) - ((size_t)mem_start_addr & LWMEM_ALIGN_BITS);
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	f003 0307 	and.w	r3, r3, #7
 80101b0:	f1c3 0308 	rsb	r3, r3, #8
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	4413      	add	r3, r2
 80101b8:	613b      	str	r3, [r7, #16]
        mem_size -= (size_t)(mem_start_addr - LWMEM_TO_BYTE_PTR(region->start_addr));
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	693a      	ldr	r2, [r7, #16]
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	461a      	mov	r2, r3
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	1a9b      	subs	r3, r3, r2
 80101c8:	617b      	str	r3, [r7, #20]
    }

    /* Check final memory size */
    if (mem_size >= (2 * LWMEM_BLOCK_MIN_SIZE)) {
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	2b0f      	cmp	r3, #15
 80101ce:	d907      	bls.n	80101e0 <prv_get_region_addr_size+0x88>
        *msa = mem_start_addr;
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	693a      	ldr	r2, [r7, #16]
 80101d4:	601a      	str	r2, [r3, #0]
        *ms = mem_size;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	697a      	ldr	r2, [r7, #20]
 80101da:	601a      	str	r2, [r3, #0]

        return 1;
 80101dc:	2301      	movs	r3, #1
 80101de:	e000      	b.n	80101e2 <prv_get_region_addr_size+0x8a>
    }
    return 0;
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	371c      	adds	r7, #28
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr

080101ee <prv_insert_free_block>:
 * \brief           Insert free block to linked list of free blocks
 * \param[in]       lwobj: LwMEM instance. Set to `NULL` to use default instance
 * \param[in]       nb: New free block to insert into linked list
 */
static void
prv_insert_free_block(lwmem_t* const lwobj, lwmem_block_t* nb) {
 80101ee:	b480      	push	{r7}
 80101f0:	b085      	sub	sp, #20
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
 80101f6:	6039      	str	r1, [r7, #0]
    lwmem_block_t* prev;

    /* Check valid inputs */
    if (nb == NULL) {
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d056      	beq.n	80102ac <prv_insert_free_block+0xbe>

    /*
     * Try to find position to put new block in-between
     * Search until all free block addresses are lower than entry block
     */
    for (prev = &(lwobj->start_block); prev != NULL && prev->next < nb; prev = prev->next) {}
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	60fb      	str	r3, [r7, #12]
 8010202:	e002      	b.n	801020a <prv_insert_free_block+0x1c>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	60fb      	str	r3, [r7, #12]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d004      	beq.n	801021a <prv_insert_free_block+0x2c>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	683a      	ldr	r2, [r7, #0]
 8010216:	429a      	cmp	r2, r3
 8010218:	d8f4      	bhi.n	8010204 <prv_insert_free_block+0x16>

    /* This is hard error with wrong memory usage */
    if (prev == NULL) {
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d047      	beq.n	80102b0 <prv_insert_free_block+0xc2>

    /*
     * Check if previous block and input block together create one big contiguous block
     * If this is the case, merge blocks together and increase previous block by input block size
     */
    if ((LWMEM_TO_BYTE_PTR(prev) + prev->size) == LWMEM_TO_BYTE_PTR(nb)) {
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	68fa      	ldr	r2, [r7, #12]
 8010226:	4413      	add	r3, r2
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	d108      	bne.n	8010240 <prv_insert_free_block+0x52>
        prev->size += nb->size; /* Increase current block by size of new block */
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	441a      	add	r2, r3
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	605a      	str	r2, [r3, #4]
        nb = prev;              /* New block and current are now the same thing */
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	603b      	str	r3, [r7, #0]

    /*
     * Check if new block and next of previous create big contiguous block
     * Do not merge with "end of region" indication (commented part of if statement)
     */
    if (prev->next != NULL && prev->next->size > 0 /* Do not remove "end of region" indicator in each region */
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d025      	beq.n	8010294 <prv_insert_free_block+0xa6>
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d020      	beq.n	8010294 <prv_insert_free_block+0xa6>
        && (LWMEM_TO_BYTE_PTR(nb) + nb->size) == LWMEM_TO_BYTE_PTR(prev->next)) {
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	441a      	add	r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	429a      	cmp	r2, r3
 8010260:	d118      	bne.n	8010294 <prv_insert_free_block+0xa6>
        if (prev->next == lwobj->end_block) { /* Does it points to the end? */
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	429a      	cmp	r2, r3
 801026c:	d104      	bne.n	8010278 <prv_insert_free_block+0x8a>
            nb->next = lwobj->end_block;      /* Set end block pointer */
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	689a      	ldr	r2, [r3, #8]
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	601a      	str	r2, [r3, #0]
        if (prev->next == lwobj->end_block) { /* Does it points to the end? */
 8010276:	e011      	b.n	801029c <prv_insert_free_block+0xae>
        } else {
            nb->size +=
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	685a      	ldr	r2, [r3, #4]
                prev->next
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
                    ->size; /* Expand of current block for size of next free block which is right behind new block */
 8010280:	685b      	ldr	r3, [r3, #4]
            nb->size +=
 8010282:	441a      	add	r2, r3
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	605a      	str	r2, [r3, #4]
            nb->next = prev->next->next; /* Next free is pointed to the next one of previous next */
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	601a      	str	r2, [r3, #0]
        if (prev->next == lwobj->end_block) { /* Does it points to the end? */
 8010292:	e003      	b.n	801029c <prv_insert_free_block+0xae>
        }
    } else {
        nb->next = prev->next; /* Set next of input block as next of current one */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	601a      	str	r2, [r3, #0]

    /*
     * If new block has not been set as current (and expanded),
     * then link them together, otherwise ignore as it would point to itself
     */
    if (prev != nb) {
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d006      	beq.n	80102b2 <prv_insert_free_block+0xc4>
        prev->next = nb;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	e002      	b.n	80102b2 <prv_insert_free_block+0xc4>
        return;
 80102ac:	bf00      	nop
 80102ae:	e000      	b.n	80102b2 <prv_insert_free_block+0xc4>
        return;
 80102b0:	bf00      	nop
    }
}
 80102b2:	3714      	adds	r7, #20
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr

080102bc <prv_split_too_big_block>:
 * \param[in]       block: Pointer to block with size already set
 * \param[in]       new_block_size: New block size to be set
 * \return          `1` if block splitted, `0` otherwise
 */
static uint8_t
prv_split_too_big_block(lwmem_t* const lwobj, lwmem_block_t* block, size_t new_block_size) {
 80102bc:	b580      	push	{r7, lr}
 80102be:	b088      	sub	sp, #32
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
    lwmem_block_t* next;
    size_t block_size, is_alloc_bit;
    uint8_t success = 0;
 80102c8:	2300      	movs	r3, #0
 80102ca:	77fb      	strb	r3, [r7, #31]

    is_alloc_bit = block->size & LWMEM_ALLOC_BIT; /* Check if allocation bit is set */
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80102d4:	61bb      	str	r3, [r7, #24]
    block_size = block->size & ~LWMEM_ALLOC_BIT;  /* Use size without allocated bit */
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102de:	617b      	str	r3, [r7, #20]
    /*
     * If current block size is greater than requested size,
     * it is possible to create empty block at the end of existing one
     * and add it back to list of empty blocks
     */
    if ((block_size - new_block_size) >= LWMEM_BLOCK_MIN_SIZE) {
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	1ad3      	subs	r3, r2, r3
 80102e6:	2b07      	cmp	r3, #7
 80102e8:	d918      	bls.n	801031c <prv_split_too_big_block+0x60>
        next = (void*)(LWMEM_TO_BYTE_PTR(block) + new_block_size); /* Put next block after size of current allocation */
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4413      	add	r3, r2
 80102f0:	613b      	str	r3, [r7, #16]
        next->size = block_size - new_block_size;                  /* Modify block data */
 80102f2:	697a      	ldr	r2, [r7, #20]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	1ad2      	subs	r2, r2, r3
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	605a      	str	r2, [r3, #4]
        block->size = new_block_size;                              /* Current size is now smaller */
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	605a      	str	r2, [r3, #4]

        lwobj->mem_available_bytes += next->size; /* Increase available bytes by new block size */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	68da      	ldr	r2, [r3, #12]
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	441a      	add	r2, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	60da      	str	r2, [r3, #12]
        prv_insert_free_block(lwobj, next);       /* Add new block to the free list */
 8010310:	6939      	ldr	r1, [r7, #16]
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f7ff ff6b 	bl	80101ee <prv_insert_free_block>

        success = 1;
 8010318:	2301      	movs	r3, #1
 801031a:	77fb      	strb	r3, [r7, #31]
        /* This can only happen during reallocation process when allocated block is reallocated to previous one */
        /* Very rare case, but may happen! */
    }

    /* If allocation bit was set before, set it now again */
    if (is_alloc_bit) {
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00b      	beq.n	801033a <prv_split_too_big_block+0x7e>
        LWMEM_BLOCK_SET_ALLOC(block);
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d008      	beq.n	801033a <prv_split_too_big_block+0x7e>
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	605a      	str	r2, [r3, #4]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	4a03      	ldr	r2, [pc, #12]	@ (8010344 <prv_split_too_big_block+0x88>)
 8010338:	601a      	str	r2, [r3, #0]
    }
    return success;
 801033a:	7ffb      	ldrb	r3, [r7, #31]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3720      	adds	r7, #32
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	deadbeef 	.word	0xdeadbeef

08010348 <prv_alloc>:
 *                      Set to `NULL` for any region
 * \param[in]       size: Application wanted size, excluding size of meta header
 * \return          Pointer to allocated memory, `NULL` otherwise
 */
static void*
prv_alloc(lwmem_t* const lwobj, const lwmem_region_t* region, const size_t size) {
 8010348:	b580      	push	{r7, lr}
 801034a:	b08a      	sub	sp, #40	@ 0x28
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
    lwmem_block_t *prev, *curr;
    void* retval = NULL;
 8010354:	2300      	movs	r3, #0
 8010356:	61fb      	str	r3, [r7, #28]

    /* Calculate final size including meta data size */
    const size_t final_size = LWMEM_ALIGN(size) + LWMEM_BLOCK_META_SIZE;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	3307      	adds	r3, #7
 801035c:	f023 0307 	bic.w	r3, r3, #7
 8010360:	3308      	adds	r3, #8
 8010362:	61bb      	str	r3, [r7, #24]

    /* Check if initialized and if size is in the limits */
    if (lwobj->end_block == NULL) {
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d101      	bne.n	8010370 <prv_alloc+0x28>
        return NULL;
 801036c:	2300      	movs	r3, #0
 801036e:	e089      	b.n	8010484 <prv_alloc+0x13c>
    }
    if( final_size == LWMEM_BLOCK_META_SIZE){ 
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	2b08      	cmp	r3, #8
 8010374:	d101      	bne.n	801037a <prv_alloc+0x32>
        return NULL;
 8010376:	2300      	movs	r3, #0
 8010378:	e084      	b.n	8010484 <prv_alloc+0x13c>
        }
    if ((final_size & LWMEM_ALLOC_BIT) > 0) {
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	2b00      	cmp	r3, #0
 801037e:	da01      	bge.n	8010384 <prv_alloc+0x3c>
        return NULL;
 8010380:	2300      	movs	r3, #0
 8010382:	e07f      	b.n	8010484 <prv_alloc+0x13c>
        }

    /* Set default values */
    prev = &(lwobj->start_block); /* Use pointer from custom lwmem block */
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	627b      	str	r3, [r7, #36]	@ 0x24
    curr = prev->next;         /* Curr represents first actual free block */
 8010388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	623b      	str	r3, [r7, #32]
     * request for memory allocation came from specific region:
     *
     * - Start at the beginning like normal (from very first region)
     * - Loop until free block is between region start addr and its size
     */
    if (region != NULL) {
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d043      	beq.n	801041c <prv_alloc+0xd4>
        uint8_t* region_start_addr;
        size_t region_size;

        /* Get data about region */
        if (!prv_get_region_addr_size(region, &region_start_addr, &region_size)) {
 8010394:	f107 0210 	add.w	r2, r7, #16
 8010398:	f107 0314 	add.w	r3, r7, #20
 801039c:	4619      	mov	r1, r3
 801039e:	68b8      	ldr	r0, [r7, #8]
 80103a0:	f7ff feda 	bl	8010158 <prv_get_region_addr_size>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d124      	bne.n	80103f4 <prv_alloc+0xac>
            return NULL;
 80103aa:	2300      	movs	r3, #0
 80103ac:	e06a      	b.n	8010484 <prv_alloc+0x13c>
         * Scan all regions from lwmem and find first available block
         * which is within address of region and is big enough
         */
        for (; curr != NULL; prev = curr, curr = curr->next) {
            /* Check bounds */
            if (curr->next == NULL || curr == lwobj->end_block) {
 80103ae:	6a3b      	ldr	r3, [r7, #32]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d004      	beq.n	80103c0 <prv_alloc+0x78>
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	6a3a      	ldr	r2, [r7, #32]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d101      	bne.n	80103c4 <prv_alloc+0x7c>
                return NULL;
 80103c0:	2300      	movs	r3, #0
 80103c2:	e05f      	b.n	8010484 <prv_alloc+0x13c>
            }
            if ((uint8_t*)curr < (uint8_t*)region_start_addr) { /* Check if we reached region */
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	6a3a      	ldr	r2, [r7, #32]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d30d      	bcc.n	80103e8 <prv_alloc+0xa0>
                continue;
            }
            if ((uint8_t*)curr >= (uint8_t*)(region_start_addr + region_size)) { /* Check if we are out already */
 80103cc:	697a      	ldr	r2, [r7, #20]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	4413      	add	r3, r2
 80103d2:	6a3a      	ldr	r2, [r7, #32]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d301      	bcc.n	80103dc <prv_alloc+0x94>
                return NULL;
 80103d8:	2300      	movs	r3, #0
 80103da:	e053      	b.n	8010484 <prv_alloc+0x13c>
            }
            if (curr->size >= final_size) {
 80103dc:	6a3b      	ldr	r3, [r7, #32]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	69ba      	ldr	r2, [r7, #24]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d923      	bls.n	801042e <prv_alloc+0xe6>
 80103e6:	e000      	b.n	80103ea <prv_alloc+0xa2>
                continue;
 80103e8:	bf00      	nop
        for (; curr != NULL; prev = curr, curr = curr->next) {
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	623b      	str	r3, [r7, #32]
 80103f4:	6a3b      	ldr	r3, [r7, #32]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1d9      	bne.n	80103ae <prv_alloc+0x66>
 80103fa:	e019      	b.n	8010430 <prv_alloc+0xe8>
        /*
         * Try to find first block with at least `size` bytes of available memory
         * Loop until size of current block is smaller than requested final size
         */
        for (; curr != NULL && curr->size < final_size; prev = curr, curr = curr->next) {
            if (curr->next == NULL || curr == lwobj->end_block) { /* If no more blocks available */
 80103fc:	6a3b      	ldr	r3, [r7, #32]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d004      	beq.n	801040e <prv_alloc+0xc6>
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	6a3a      	ldr	r2, [r7, #32]
 801040a:	429a      	cmp	r2, r3
 801040c:	d101      	bne.n	8010412 <prv_alloc+0xca>
                return NULL; /* No sufficient memory available to allocate block of memory */
 801040e:	2300      	movs	r3, #0
 8010410:	e038      	b.n	8010484 <prv_alloc+0x13c>
        for (; curr != NULL && curr->size < final_size; prev = curr, curr = curr->next) {
 8010412:	6a3b      	ldr	r3, [r7, #32]
 8010414:	627b      	str	r3, [r7, #36]	@ 0x24
 8010416:	6a3b      	ldr	r3, [r7, #32]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	623b      	str	r3, [r7, #32]
 801041c:	6a3b      	ldr	r3, [r7, #32]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d006      	beq.n	8010430 <prv_alloc+0xe8>
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	69ba      	ldr	r2, [r7, #24]
 8010428:	429a      	cmp	r2, r3
 801042a:	d8e7      	bhi.n	80103fc <prv_alloc+0xb4>
 801042c:	e000      	b.n	8010430 <prv_alloc+0xe8>
                break; /* Free block identified */
 801042e:	bf00      	nop
            }
        }
    }

    /* Check curr pointer. During normal use, this should be always false */
    if (curr == NULL) {
 8010430:	6a3b      	ldr	r3, [r7, #32]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <prv_alloc+0xf2>
        return NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	e024      	b.n	8010484 <prv_alloc+0x13c>
    }

    /* There is a valid block available */
    retval = LWMEM_GET_PTR_FROM_BLOCK(curr); /* Return pointer does not include meta part */
 801043a:	6a3b      	ldr	r3, [r7, #32]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d002      	beq.n	8010446 <prv_alloc+0xfe>
 8010440:	6a3b      	ldr	r3, [r7, #32]
 8010442:	3308      	adds	r3, #8
 8010444:	e000      	b.n	8010448 <prv_alloc+0x100>
 8010446:	2300      	movs	r3, #0
 8010448:	61fb      	str	r3, [r7, #28]
    prev->next = curr->next; /* Remove this block from linked list by setting next of previous to next of current */
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010450:	601a      	str	r2, [r3, #0]

    /* curr block is now removed from linked list */

    lwobj->mem_available_bytes -= curr->size;         /* Decrease available bytes by allocated block size */
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	68da      	ldr	r2, [r3, #12]
 8010456:	6a3b      	ldr	r3, [r7, #32]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	1ad2      	subs	r2, r2, r3
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	60da      	str	r2, [r3, #12]
    prv_split_too_big_block(lwobj, curr, final_size); /* Split block if it is too big */
 8010460:	69ba      	ldr	r2, [r7, #24]
 8010462:	6a39      	ldr	r1, [r7, #32]
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f7ff ff29 	bl	80102bc <prv_split_too_big_block>
    LWMEM_BLOCK_SET_ALLOC(curr);                   /* Set block as allocated */
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d008      	beq.n	8010482 <prv_alloc+0x13a>
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010478:	6a3b      	ldr	r3, [r7, #32]
 801047a:	605a      	str	r2, [r3, #4]
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	4a03      	ldr	r2, [pc, #12]	@ (801048c <prv_alloc+0x144>)
 8010480:	601a      	str	r2, [r3, #0]

    LWMEM_UPDATE_MIN_FREE(lwobj);
    LWMEM_INC_STATS(lwobj->stats.nr_alloc);

    return retval;
 8010482:	69fb      	ldr	r3, [r7, #28]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3728      	adds	r7, #40	@ 0x28
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	deadbeef 	.word	0xdeadbeef

08010490 <prv_free>:
 * \brief           Free input pointer
 * \param[in]       lwobj: LwMEM instance. Set to `NULL` to use default instance
 * \param[in]       ptr: Input pointer to free
 */
static void
prv_free(lwmem_t* const lwobj, void* const ptr) {
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
    lwmem_block_t* const block = LWMEM_GET_BLOCK_FROM_PTR(ptr);
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <prv_free+0x16>
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	3b08      	subs	r3, #8
 80104a4:	e000      	b.n	80104a8 <prv_free+0x18>
 80104a6:	2300      	movs	r3, #0
 80104a8:	60fb      	str	r3, [r7, #12]
    if (LWMEM_BLOCK_IS_ALLOC(block)) {   /* Check if block is valid */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d019      	beq.n	80104e4 <prv_free+0x54>
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	da15      	bge.n	80104e4 <prv_free+0x54>
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a0b      	ldr	r2, [pc, #44]	@ (80104ec <prv_free+0x5c>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d110      	bne.n	80104e4 <prv_free+0x54>
        block->size &= ~LWMEM_ALLOC_BIT; /* Clear allocated bit indication */
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	605a      	str	r2, [r3, #4]

        lwobj->mem_available_bytes += block->size; /* Increase available bytes */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	68da      	ldr	r2, [r3, #12]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	441a      	add	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	60da      	str	r2, [r3, #12]
        prv_insert_free_block(lwobj, block);       /* Put block back to list of free block */
 80104dc:	68f9      	ldr	r1, [r7, #12]
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff fe85 	bl	80101ee <prv_insert_free_block>

        LWMEM_INC_STATS(lwobj->stats.nr_free);
    }
}
 80104e4:	bf00      	nop
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	deadbeef 	.word	0xdeadbeef

080104f0 <lwmem_assignmem_ex>:
 * \return          `0` on failure, number of final regions used for memory manager on success
 * \note            This function is not thread safe when used with operating system.
 *                      It must be called only once to setup memory regions
 */
size_t
lwmem_assignmem_ex(lwmem_t* lwobj, const lwmem_region_t* regions) {
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b08a      	sub	sp, #40	@ 0x28
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
    uint8_t* mem_start_addr;
    size_t mem_size, len = 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	61fb      	str	r3, [r7, #28]
    lwmem_block_t *first_block, *prev_end_block;

    lwobj = LWMEM_GET_LWOBJ(lwobj);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <lwmem_assignmem_ex+0x18>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	e000      	b.n	801050a <lwmem_assignmem_ex+0x1a>
 8010508:	4b59      	ldr	r3, [pc, #356]	@ (8010670 <lwmem_assignmem_ex+0x180>)
 801050a:	607b      	str	r3, [r7, #4]
    /* Check first things first */
    if (regions == NULL || lwobj->end_block != NULL /* Init function may only be called once per lwmem instance */
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d003      	beq.n	801051a <lwmem_assignmem_ex+0x2a>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	689b      	ldr	r3, [r3, #8]
        || (((size_t)LWMEM_CFG_ALIGN_NUM) & (((size_t)LWMEM_CFG_ALIGN_NUM) - 1)) > 0) { /* Must be power of 2 */
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <lwmem_assignmem_ex+0x2e>
        return 0;
 801051a:	2300      	movs	r3, #0
 801051c:	e0a3      	b.n	8010666 <lwmem_assignmem_ex+0x176>
    }

    /* Check values entered by application */
    mem_start_addr = (void*)0;
 801051e:	2300      	movs	r3, #0
 8010520:	613b      	str	r3, [r7, #16]
    mem_size = 0;
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0;; ++i) {
 8010526:	2300      	movs	r3, #0
 8010528:	627b      	str	r3, [r7, #36]	@ 0x24
        /*
         * Check for valid entry or end of array descriptor
         *
         * Invalid entry is considered as "end-of-region" indicator
         */
        if (regions[i].size == 0 && regions[i].start_addr == NULL) {
 801052a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052c:	00db      	lsls	r3, r3, #3
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	4413      	add	r3, r2
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d10d      	bne.n	8010554 <lwmem_assignmem_ex+0x64>
 8010538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053a:	00db      	lsls	r3, r3, #3
 801053c:	683a      	ldr	r2, [r7, #0]
 801053e:	4413      	add	r3, r2
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d106      	bne.n	8010554 <lwmem_assignmem_ex+0x64>
            len = i;
 8010546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010548:	61fb      	str	r3, [r7, #28]
            if (len == 0) {
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d11d      	bne.n	801058c <lwmem_assignmem_ex+0x9c>
                return 0;
 8010550:	2300      	movs	r3, #0
 8010552:	e088      	b.n	8010666 <lwmem_assignmem_ex+0x176>
            }
            break;
        }

        /* New region(s) must be higher (in address space) than previous one */
        if ((mem_start_addr + mem_size) > LWMEM_TO_BYTE_PTR(regions[i].start_addr)) {
 8010554:	693a      	ldr	r2, [r7, #16]
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	441a      	add	r2, r3
 801055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055c:	00db      	lsls	r3, r3, #3
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	440b      	add	r3, r1
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	429a      	cmp	r2, r3
 8010566:	d901      	bls.n	801056c <lwmem_assignmem_ex+0x7c>
            return 0;
 8010568:	2300      	movs	r3, #0
 801056a:	e07c      	b.n	8010666 <lwmem_assignmem_ex+0x176>
        }

        /* Save new values for next round */
        mem_start_addr = regions[i].start_addr;
 801056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056e:	00db      	lsls	r3, r3, #3
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	4413      	add	r3, r2
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	613b      	str	r3, [r7, #16]
        mem_size = regions[i].size;
 8010578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057a:	00db      	lsls	r3, r3, #3
 801057c:	683a      	ldr	r2, [r7, #0]
 801057e:	4413      	add	r3, r2
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0;; ++i) {
 8010584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010586:	3301      	adds	r3, #1
 8010588:	627b      	str	r3, [r7, #36]	@ 0x24
        if (regions[i].size == 0 && regions[i].start_addr == NULL) {
 801058a:	e7ce      	b.n	801052a <lwmem_assignmem_ex+0x3a>
            break;
 801058c:	bf00      	nop
    }

    /* Process further checks of valid inputs */
    if (regions == NULL || len == 0
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d012      	beq.n	80105ba <lwmem_assignmem_ex+0xca>
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d00f      	beq.n	80105ba <lwmem_assignmem_ex+0xca>
#if LWMEM_CFG_OS
        || lwmem_sys_mutex_isvalid(&(lwobj->mutex)) /* Check if mutex valid already = must not be */
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	3314      	adds	r3, #20
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 f8ce 	bl	8010740 <lwmem_sys_mutex_isvalid>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d107      	bne.n	80105ba <lwmem_assignmem_ex+0xca>
        || !lwmem_sys_mutex_create(&(lwobj->mutex)) /* Final step = try to create mutex for new instance */
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	3314      	adds	r3, #20
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 f8a4 	bl	80106fc <lwmem_sys_mutex_create>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d101      	bne.n	80105be <lwmem_assignmem_ex+0xce>
#endif                                           /* LWMEM_CFG_OS */
    ) {
        return 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	e053      	b.n	8010666 <lwmem_assignmem_ex+0x176>
    }

    for (size_t i = 0; i < len; ++i, ++regions) {
 80105be:	2300      	movs	r3, #0
 80105c0:	623b      	str	r3, [r7, #32]
 80105c2:	e04a      	b.n	801065a <lwmem_assignmem_ex+0x16a>
        /* Get region start address and size */
        if (!prv_get_region_addr_size(regions, &mem_start_addr, &mem_size)) {
 80105c4:	f107 020c 	add.w	r2, r7, #12
 80105c8:	f107 0310 	add.w	r3, r7, #16
 80105cc:	4619      	mov	r1, r3
 80105ce:	6838      	ldr	r0, [r7, #0]
 80105d0:	f7ff fdc2 	bl	8010158 <prv_get_region_addr_size>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d038      	beq.n	801064c <lwmem_assignmem_ex+0x15c>
        /*
         * If end_block == NULL, this indicates first iteration.
         * In first indication application shall set start_block and never again
         * end_block value holds
         */
        if (lwobj->end_block == NULL) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d105      	bne.n	80105ee <lwmem_assignmem_ex+0xfe>
            /*
             * Next entry of start block is first region
             * It points to beginning of region data
             * In the later step(s) first block is manually set on top of memory region
             */
            lwobj->start_block.next = (void*)mem_start_addr;
 80105e2:	693a      	ldr	r2, [r7, #16]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	601a      	str	r2, [r3, #0]
            lwobj->start_block.size = 0; /* Size of dummy start block is zero */
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	605a      	str	r2, [r3, #4]
        }

        /* Save current end block status as it is used later for linked list insertion */
        prev_end_block = lwobj->end_block;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	61bb      	str	r3, [r7, #24]

        /* Put end block to the end of the region with size = 0 */
        lwobj->end_block = (void*)(mem_start_addr + mem_size - LWMEM_BLOCK_META_SIZE);
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3b08      	subs	r3, #8
 80105fa:	441a      	add	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	609a      	str	r2, [r3, #8]
        lwobj->end_block->next = NULL; /* End block in region does not have next entry */
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	2200      	movs	r2, #0
 8010606:	601a      	str	r2, [r3, #0]
        lwobj->end_block->size = 0;    /* Size of end block is zero */
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	689b      	ldr	r3, [r3, #8]
 801060c:	2200      	movs	r2, #0
 801060e:	605a      	str	r2, [r3, #4]
         * First block meta size includes size of metadata too
         * Subtract MEM_BLOCK_META_SIZE as there is one more block (end_block) at the end of region
         *
         * Actual maximal available size for application in the region is mem_size - 2 * MEM_BLOCK_META_SIZE
         */
        first_block = (void*)mem_start_addr;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	617b      	str	r3, [r7, #20]
        first_block->next = lwobj->end_block; /* Next block of first is last block */
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	689a      	ldr	r2, [r3, #8]
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	601a      	str	r2, [r3, #0]
        first_block->size = mem_size - LWMEM_BLOCK_META_SIZE;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f1a3 0208 	sub.w	r2, r3, #8
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	605a      	str	r2, [r3, #4]

        /* Check if previous regions exist by checking previous end block state */
        if (prev_end_block != NULL) {
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <lwmem_assignmem_ex+0x142>
            prev_end_block->next = first_block; /* End block of previous region now points to start of current region */
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	601a      	str	r2, [r3, #0]
        }

        lwobj->mem_available_bytes += first_block->size; /* Increase number of available bytes */
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	68da      	ldr	r2, [r3, #12]
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	441a      	add	r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	60da      	str	r2, [r3, #12]
        ++lwobj->mem_regions_count;                      /* Increase number of used regions */
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	611a      	str	r2, [r3, #16]
 801064a:	e000      	b.n	801064e <lwmem_assignmem_ex+0x15e>
            continue;
 801064c:	bf00      	nop
    for (size_t i = 0; i < len; ++i, ++regions) {
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	3301      	adds	r3, #1
 8010652:	623b      	str	r3, [r7, #32]
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	603b      	str	r3, [r7, #0]
 801065a:	6a3a      	ldr	r2, [r7, #32]
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	429a      	cmp	r2, r3
 8010660:	d3b0      	bcc.n	80105c4 <lwmem_assignmem_ex+0xd4>
#if LWMEM_CFG_ENABLE_STATS
    lwobj->stats.mem_size_bytes = lwobj->mem_available_bytes;
    lwobj->stats.minimum_ever_mem_available_bytes = lwobj->mem_available_bytes;
#endif

    return lwobj->mem_regions_count; /* Return number of regions used by manager */
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3728      	adds	r7, #40	@ 0x28
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20016d1c 	.word	0x20016d1c

08010674 <lwmem_malloc_ex>:
 * \param[in]       size: Number of bytes to allocate
 * \return          Pointer to allocated memory on success, `NULL` otherwise
 * \note            This function is thread safe when \ref LWMEM_CFG_OS is enabled
 */
void*
lwmem_malloc_ex(lwmem_t* lwobj, const lwmem_region_t* region, const size_t size) {
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
    void* ptr;
    lwobj = LWMEM_GET_LWOBJ(lwobj);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d001      	beq.n	801068a <lwmem_malloc_ex+0x16>
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	e000      	b.n	801068c <lwmem_malloc_ex+0x18>
 801068a:	4b0b      	ldr	r3, [pc, #44]	@ (80106b8 <lwmem_malloc_ex+0x44>)
 801068c:	60fb      	str	r3, [r7, #12]
    LWMEM_PROTECT(lwobj);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	3314      	adds	r3, #20
 8010692:	4618      	mov	r0, r3
 8010694:	f000 f865 	bl	8010762 <lwmem_sys_mutex_wait>
    ptr = prv_alloc(lwobj, region, size);
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	68b9      	ldr	r1, [r7, #8]
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff fe53 	bl	8010348 <prv_alloc>
 80106a2:	6178      	str	r0, [r7, #20]
    LWMEM_UNPROTECT(lwobj);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	3314      	adds	r3, #20
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 f86f 	bl	801078c <lwmem_sys_mutex_release>
    return ptr;
 80106ae:	697b      	ldr	r3, [r7, #20]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3718      	adds	r7, #24
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	20016d1c 	.word	0x20016d1c

080106bc <lwmem_free_ex>:
 * \note            This is an extended free version function declaration to support advanced features
 * \param[in]       ptr: Memory to free. `NULL` pointer is valid input
 * \note            This function is thread safe when \ref LWMEM_CFG_OS is enabled
 */
void
lwmem_free_ex(lwmem_t* lwobj, void* const ptr) {
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
    lwobj = LWMEM_GET_LWOBJ(lwobj);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d001      	beq.n	80106d0 <lwmem_free_ex+0x14>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	e000      	b.n	80106d2 <lwmem_free_ex+0x16>
 80106d0:	4b09      	ldr	r3, [pc, #36]	@ (80106f8 <lwmem_free_ex+0x3c>)
 80106d2:	607b      	str	r3, [r7, #4]
    LWMEM_PROTECT(lwobj);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	3314      	adds	r3, #20
 80106d8:	4618      	mov	r0, r3
 80106da:	f000 f842 	bl	8010762 <lwmem_sys_mutex_wait>
    prv_free(lwobj, ptr);
 80106de:	6839      	ldr	r1, [r7, #0]
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff fed5 	bl	8010490 <prv_free>
    LWMEM_UNPROTECT(lwobj);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	3314      	adds	r3, #20
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 f84e 	bl	801078c <lwmem_sys_mutex_release>
}
 80106f0:	bf00      	nop
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	20016d1c 	.word	0x20016d1c

080106fc <lwmem_sys_mutex_create>:
#if LWMEM_CFG_OS && !__DOXYGEN__

#include "cmsis_os.h"

uint8_t
lwmem_sys_mutex_create(LWMEM_CFG_OS_MUTEX_HANDLE* m) {
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
    const osMutexAttr_t attr = {
 8010704:	f107 0308 	add.w	r3, r7, #8
 8010708:	2200      	movs	r2, #0
 801070a:	601a      	str	r2, [r3, #0]
 801070c:	605a      	str	r2, [r3, #4]
 801070e:	609a      	str	r2, [r3, #8]
 8010710:	60da      	str	r2, [r3, #12]
 8010712:	4b0a      	ldr	r3, [pc, #40]	@ (801073c <lwmem_sys_mutex_create+0x40>)
 8010714:	60bb      	str	r3, [r7, #8]
        .name = "lwmem_mutex",
    };
    return (*m = osMutexNew(&attr)) != NULL;
 8010716:	f107 0308 	add.w	r3, r7, #8
 801071a:	4618      	mov	r0, r3
 801071c:	f7fb ff07 	bl	800c52e <osMutexNew>
 8010720:	4602      	mov	r2, r0
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	bf14      	ite	ne
 801072e:	2301      	movne	r3, #1
 8010730:	2300      	moveq	r3, #0
 8010732:	b2db      	uxtb	r3, r3
}
 8010734:	4618      	mov	r0, r3
 8010736:	3718      	adds	r7, #24
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	08012768 	.word	0x08012768

08010740 <lwmem_sys_mutex_isvalid>:

uint8_t
lwmem_sys_mutex_isvalid(LWMEM_CFG_OS_MUTEX_HANDLE* m) {
 8010740:	b480      	push	{r7}
 8010742:	b083      	sub	sp, #12
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
    return *m != NULL;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	bf14      	ite	ne
 8010750:	2301      	movne	r3, #1
 8010752:	2300      	moveq	r3, #0
 8010754:	b2db      	uxtb	r3, r3
}
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <lwmem_sys_mutex_wait>:

uint8_t
lwmem_sys_mutex_wait(LWMEM_CFG_OS_MUTEX_HANDLE* m) {
 8010762:	b580      	push	{r7, lr}
 8010764:	b082      	sub	sp, #8
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
    return osMutexAcquire(*m, osWaitForever) == osOK;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f04f 31ff 	mov.w	r1, #4294967295
 8010772:	4618      	mov	r0, r3
 8010774:	f7fb ff61 	bl	800c63a <osMutexAcquire>
 8010778:	4603      	mov	r3, r0
 801077a:	2b00      	cmp	r3, #0
 801077c:	bf0c      	ite	eq
 801077e:	2301      	moveq	r3, #1
 8010780:	2300      	movne	r3, #0
 8010782:	b2db      	uxtb	r3, r3
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <lwmem_sys_mutex_release>:

uint8_t
lwmem_sys_mutex_release(LWMEM_CFG_OS_MUTEX_HANDLE* m) {
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
    return osMutexRelease(*m) == osOK;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4618      	mov	r0, r3
 801079a:	f7fb ff99 	bl	800c6d0 <osMutexRelease>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	bf0c      	ite	eq
 80107a4:	2301      	moveq	r3, #1
 80107a6:	2300      	movne	r3, #0
 80107a8:	b2db      	uxtb	r3, r3
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
	...

080107b4 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d017      	beq.n	80107fa <lwrb_write+0x46>
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4a3a      	ldr	r2, [pc, #232]	@ (80108b8 <lwrb_write+0x104>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d112      	bne.n	80107fa <lwrb_write+0x46>
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	699b      	ldr	r3, [r3, #24]
 80107d8:	4a38      	ldr	r2, [pc, #224]	@ (80108bc <lwrb_write+0x108>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d10d      	bne.n	80107fa <lwrb_write+0x46>
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d009      	beq.n	80107fa <lwrb_write+0x46>
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	689b      	ldr	r3, [r3, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d005      	beq.n	80107fa <lwrb_write+0x46>
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <lwrb_write+0x46>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <lwrb_write+0x4a>
        return 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e057      	b.n	80108ae <lwrb_write+0xfa>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 f8e4 	bl	80109cc <lwrb_get_free>
 8010804:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	4293      	cmp	r3, r2
 801080c:	bf28      	it	cs
 801080e:	4613      	movcs	r3, r2
 8010810:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d101      	bne.n	801081c <lwrb_write+0x68>
        return 0;
 8010818:	2300      	movs	r3, #0
 801081a:	e048      	b.n	80108ae <lwrb_write+0xfa>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = buff->w;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	691b      	ldr	r3, [r3, #16]
 8010820:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	689a      	ldr	r2, [r3, #8]
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	d904      	bls.n	801083a <lwrb_write+0x86>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	689a      	ldr	r2, [r3, #8]
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	e000      	b.n	801083c <lwrb_write+0x88>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	685a      	ldr	r2, [r3, #4]
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	4413      	add	r3, r2
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	69f9      	ldr	r1, [r7, #28]
 801084a:	4618      	mov	r0, r3
 801084c:	f000 fbbb 	bl	8010fc6 <memcpy>
    buff_w_ptr += tocopy;
 8010850:	693a      	ldr	r2, [r7, #16]
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	4413      	add	r3, r2
 8010856:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00a      	beq.n	801087c <lwrb_write+0xc8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6858      	ldr	r0, [r3, #4]
 801086a:	69fa      	ldr	r2, [r7, #28]
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	4413      	add	r3, r2
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	4619      	mov	r1, r3
 8010874:	f000 fba7 	bl	8010fc6 <memcpy>
        buff_w_ptr = btw;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	689a      	ldr	r2, [r3, #8]
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	429a      	cmp	r2, r3
 8010884:	d801      	bhi.n	801088a <lwrb_write+0xd6>
        buff_w_ptr = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    buff->w = buff_w_ptr;
 801088a:	693a      	ldr	r2, [r7, #16]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	611a      	str	r2, [r3, #16]
    
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	695b      	ldr	r3, [r3, #20]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d007      	beq.n	80108a8 <lwrb_write+0xf4>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	695b      	ldr	r3, [r3, #20]
 801089c:	6979      	ldr	r1, [r7, #20]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	440a      	add	r2, r1
 80108a2:	2101      	movs	r1, #1
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	4798      	blx	r3
    return tocopy + btw;
 80108a8:	697a      	ldr	r2, [r7, #20]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4413      	add	r3, r2
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	deadbeef 	.word	0xdeadbeef
 80108bc:	21524110 	.word	0x21524110

080108c0 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d017      	beq.n	8010906 <lwrb_read+0x46>
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a3a      	ldr	r2, [pc, #232]	@ (80109c4 <lwrb_read+0x104>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d112      	bne.n	8010906 <lwrb_read+0x46>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	4a38      	ldr	r2, [pc, #224]	@ (80109c8 <lwrb_read+0x108>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d10d      	bne.n	8010906 <lwrb_read+0x46>
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d009      	beq.n	8010906 <lwrb_read+0x46>
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <lwrb_read+0x46>
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <lwrb_read+0x46>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d101      	bne.n	801090a <lwrb_read+0x4a>
        return 0;
 8010906:	2300      	movs	r3, #0
 8010908:	e057      	b.n	80109ba <lwrb_read+0xfa>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f000 f8a4 	bl	8010a58 <lwrb_get_full>
 8010910:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	4293      	cmp	r3, r2
 8010918:	bf28      	it	cs
 801091a:	4613      	movcs	r3, r2
 801091c:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d101      	bne.n	8010928 <lwrb_read+0x68>
        return 0;
 8010924:	2300      	movs	r3, #0
 8010926:	e048      	b.n	80109ba <lwrb_read+0xfa>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = buff->r;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	689a      	ldr	r2, [r3, #8]
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	429a      	cmp	r2, r3
 801093a:	d904      	bls.n	8010946 <lwrb_read+0x86>
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	689a      	ldr	r2, [r3, #8]
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	e000      	b.n	8010948 <lwrb_read+0x88>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	685a      	ldr	r2, [r3, #4]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	4413      	add	r3, r2
 8010952:	697a      	ldr	r2, [r7, #20]
 8010954:	4619      	mov	r1, r3
 8010956:	69f8      	ldr	r0, [r7, #28]
 8010958:	f000 fb35 	bl	8010fc6 <memcpy>
    buff_r_ptr += tocopy;
 801095c:	693a      	ldr	r2, [r7, #16]
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	4413      	add	r3, r2
 8010962:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00a      	beq.n	8010988 <lwrb_read+0xc8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8010972:	69fa      	ldr	r2, [r7, #28]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	18d0      	adds	r0, r2, r3
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	4619      	mov	r1, r3
 8010980:	f000 fb21 	bl	8010fc6 <memcpy>
        buff_r_ptr = btr;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	689a      	ldr	r2, [r3, #8]
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	429a      	cmp	r2, r3
 8010990:	d801      	bhi.n	8010996 <lwrb_read+0xd6>
        buff_r_ptr = 0;
 8010992:	2300      	movs	r3, #0
 8010994:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    buff->r = buff_r_ptr;
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	60da      	str	r2, [r3, #12]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d007      	beq.n	80109b4 <lwrb_read+0xf4>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	6979      	ldr	r1, [r7, #20]
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	440a      	add	r2, r1
 80109ae:	2100      	movs	r1, #0
 80109b0:	68f8      	ldr	r0, [r7, #12]
 80109b2:	4798      	blx	r3
    return tocopy + btr;
 80109b4:	697a      	ldr	r2, [r7, #20]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4413      	add	r3, r2
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3720      	adds	r7, #32
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	deadbeef 	.word	0xdeadbeef
 80109c8:	21524110 	.word	0x21524110

080109cc <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(lwrb_t* buff) {
 80109cc:	b480      	push	{r7}
 80109ce:	b087      	sub	sp, #28
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d011      	beq.n	80109fe <lwrb_get_free+0x32>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4a1c      	ldr	r2, [pc, #112]	@ (8010a50 <lwrb_get_free+0x84>)
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d10c      	bne.n	80109fe <lwrb_get_free+0x32>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	4a1a      	ldr	r2, [pc, #104]	@ (8010a54 <lwrb_get_free+0x88>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d107      	bne.n	80109fe <lwrb_get_free+0x32>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d003      	beq.n	80109fe <lwrb_get_free+0x32>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	689b      	ldr	r3, [r3, #8]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d101      	bne.n	8010a02 <lwrb_get_free+0x36>
        return 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	e01f      	b.n	8010a42 <lwrb_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d103      	bne.n	8010a1e <lwrb_get_free+0x52>
        size = buff->size;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	689b      	ldr	r3, [r3, #8]
 8010a1a:	617b      	str	r3, [r7, #20]
 8010a1c:	e00f      	b.n	8010a3e <lwrb_get_free+0x72>
    } else if (r > w) {
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d904      	bls.n	8010a30 <lwrb_get_free+0x64>
        size = r - w;
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	1ad3      	subs	r3, r2, r3
 8010a2c:	617b      	str	r3, [r7, #20]
 8010a2e:	e006      	b.n	8010a3e <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	689a      	ldr	r2, [r3, #8]
 8010a34:	68f9      	ldr	r1, [r7, #12]
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	1acb      	subs	r3, r1, r3
 8010a3a:	4413      	add	r3, r2
 8010a3c:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	3b01      	subs	r3, #1
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	371c      	adds	r7, #28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	deadbeef 	.word	0xdeadbeef
 8010a54:	21524110 	.word	0x21524110

08010a58 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(lwrb_t* buff) {
 8010a58:	b480      	push	{r7}
 8010a5a:	b087      	sub	sp, #28
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d011      	beq.n	8010a8a <lwrb_get_full+0x32>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8010ad8 <lwrb_get_full+0x80>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d10c      	bne.n	8010a8a <lwrb_get_full+0x32>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	699b      	ldr	r3, [r3, #24]
 8010a74:	4a19      	ldr	r2, [pc, #100]	@ (8010adc <lwrb_get_full+0x84>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d107      	bne.n	8010a8a <lwrb_get_full+0x32>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d003      	beq.n	8010a8a <lwrb_get_full+0x32>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d101      	bne.n	8010a8e <lwrb_get_full+0x36>
        return 0;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e01d      	b.n	8010aca <lwrb_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8010a9a:	693a      	ldr	r2, [r7, #16]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d102      	bne.n	8010aa8 <lwrb_get_full+0x50>
        size = 0;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	617b      	str	r3, [r7, #20]
 8010aa6:	e00f      	b.n	8010ac8 <lwrb_get_full+0x70>
    } else if (w > r) {
 8010aa8:	693a      	ldr	r2, [r7, #16]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d904      	bls.n	8010aba <lwrb_get_full+0x62>
        size = w - r;
 8010ab0:	693a      	ldr	r2, [r7, #16]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	e006      	b.n	8010ac8 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	689a      	ldr	r2, [r3, #8]
 8010abe:	6939      	ldr	r1, [r7, #16]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	1acb      	subs	r3, r1, r3
 8010ac4:	4413      	add	r3, r2
 8010ac6:	617b      	str	r3, [r7, #20]
    }
    return size;
 8010ac8:	697b      	ldr	r3, [r7, #20]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	371c      	adds	r7, #28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	deadbeef 	.word	0xdeadbeef
 8010adc:	21524110 	.word	0x21524110

08010ae0 <std>:
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	b510      	push	{r4, lr}
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8010aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010aee:	6083      	str	r3, [r0, #8]
 8010af0:	8181      	strh	r1, [r0, #12]
 8010af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8010af4:	81c2      	strh	r2, [r0, #14]
 8010af6:	6183      	str	r3, [r0, #24]
 8010af8:	4619      	mov	r1, r3
 8010afa:	2208      	movs	r2, #8
 8010afc:	305c      	adds	r0, #92	@ 0x5c
 8010afe:	f000 f9e7 	bl	8010ed0 <memset>
 8010b02:	4b0d      	ldr	r3, [pc, #52]	@ (8010b38 <std+0x58>)
 8010b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b06:	4b0d      	ldr	r3, [pc, #52]	@ (8010b3c <std+0x5c>)
 8010b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b40 <std+0x60>)
 8010b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b44 <std+0x64>)
 8010b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b12:	4b0d      	ldr	r3, [pc, #52]	@ (8010b48 <std+0x68>)
 8010b14:	6224      	str	r4, [r4, #32]
 8010b16:	429c      	cmp	r4, r3
 8010b18:	d006      	beq.n	8010b28 <std+0x48>
 8010b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b1e:	4294      	cmp	r4, r2
 8010b20:	d002      	beq.n	8010b28 <std+0x48>
 8010b22:	33d0      	adds	r3, #208	@ 0xd0
 8010b24:	429c      	cmp	r4, r3
 8010b26:	d105      	bne.n	8010b34 <std+0x54>
 8010b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b30:	f000 ba46 	b.w	8010fc0 <__retarget_lock_init_recursive>
 8010b34:	bd10      	pop	{r4, pc}
 8010b36:	bf00      	nop
 8010b38:	08010d21 	.word	0x08010d21
 8010b3c:	08010d43 	.word	0x08010d43
 8010b40:	08010d7b 	.word	0x08010d7b
 8010b44:	08010d9f 	.word	0x08010d9f
 8010b48:	20016d34 	.word	0x20016d34

08010b4c <stdio_exit_handler>:
 8010b4c:	4a02      	ldr	r2, [pc, #8]	@ (8010b58 <stdio_exit_handler+0xc>)
 8010b4e:	4903      	ldr	r1, [pc, #12]	@ (8010b5c <stdio_exit_handler+0x10>)
 8010b50:	4803      	ldr	r0, [pc, #12]	@ (8010b60 <stdio_exit_handler+0x14>)
 8010b52:	f000 b869 	b.w	8010c28 <_fwalk_sglue>
 8010b56:	bf00      	nop
 8010b58:	20000030 	.word	0x20000030
 8010b5c:	080112dd 	.word	0x080112dd
 8010b60:	20000040 	.word	0x20000040

08010b64 <cleanup_stdio>:
 8010b64:	6841      	ldr	r1, [r0, #4]
 8010b66:	4b0c      	ldr	r3, [pc, #48]	@ (8010b98 <cleanup_stdio+0x34>)
 8010b68:	4299      	cmp	r1, r3
 8010b6a:	b510      	push	{r4, lr}
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	d001      	beq.n	8010b74 <cleanup_stdio+0x10>
 8010b70:	f000 fbb4 	bl	80112dc <_fflush_r>
 8010b74:	68a1      	ldr	r1, [r4, #8]
 8010b76:	4b09      	ldr	r3, [pc, #36]	@ (8010b9c <cleanup_stdio+0x38>)
 8010b78:	4299      	cmp	r1, r3
 8010b7a:	d002      	beq.n	8010b82 <cleanup_stdio+0x1e>
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f000 fbad 	bl	80112dc <_fflush_r>
 8010b82:	68e1      	ldr	r1, [r4, #12]
 8010b84:	4b06      	ldr	r3, [pc, #24]	@ (8010ba0 <cleanup_stdio+0x3c>)
 8010b86:	4299      	cmp	r1, r3
 8010b88:	d004      	beq.n	8010b94 <cleanup_stdio+0x30>
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b90:	f000 bba4 	b.w	80112dc <_fflush_r>
 8010b94:	bd10      	pop	{r4, pc}
 8010b96:	bf00      	nop
 8010b98:	20016d34 	.word	0x20016d34
 8010b9c:	20016d9c 	.word	0x20016d9c
 8010ba0:	20016e04 	.word	0x20016e04

08010ba4 <global_stdio_init.part.0>:
 8010ba4:	b510      	push	{r4, lr}
 8010ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8010bd4 <global_stdio_init.part.0+0x30>)
 8010ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8010bd8 <global_stdio_init.part.0+0x34>)
 8010baa:	4a0c      	ldr	r2, [pc, #48]	@ (8010bdc <global_stdio_init.part.0+0x38>)
 8010bac:	601a      	str	r2, [r3, #0]
 8010bae:	4620      	mov	r0, r4
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	2104      	movs	r1, #4
 8010bb4:	f7ff ff94 	bl	8010ae0 <std>
 8010bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010bbc:	2201      	movs	r2, #1
 8010bbe:	2109      	movs	r1, #9
 8010bc0:	f7ff ff8e 	bl	8010ae0 <std>
 8010bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010bc8:	2202      	movs	r2, #2
 8010bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bce:	2112      	movs	r1, #18
 8010bd0:	f7ff bf86 	b.w	8010ae0 <std>
 8010bd4:	20016e6c 	.word	0x20016e6c
 8010bd8:	20016d34 	.word	0x20016d34
 8010bdc:	08010b4d 	.word	0x08010b4d

08010be0 <__sfp_lock_acquire>:
 8010be0:	4801      	ldr	r0, [pc, #4]	@ (8010be8 <__sfp_lock_acquire+0x8>)
 8010be2:	f000 b9ee 	b.w	8010fc2 <__retarget_lock_acquire_recursive>
 8010be6:	bf00      	nop
 8010be8:	20016e75 	.word	0x20016e75

08010bec <__sfp_lock_release>:
 8010bec:	4801      	ldr	r0, [pc, #4]	@ (8010bf4 <__sfp_lock_release+0x8>)
 8010bee:	f000 b9e9 	b.w	8010fc4 <__retarget_lock_release_recursive>
 8010bf2:	bf00      	nop
 8010bf4:	20016e75 	.word	0x20016e75

08010bf8 <__sinit>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	f7ff fff0 	bl	8010be0 <__sfp_lock_acquire>
 8010c00:	6a23      	ldr	r3, [r4, #32]
 8010c02:	b11b      	cbz	r3, 8010c0c <__sinit+0x14>
 8010c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c08:	f7ff bff0 	b.w	8010bec <__sfp_lock_release>
 8010c0c:	4b04      	ldr	r3, [pc, #16]	@ (8010c20 <__sinit+0x28>)
 8010c0e:	6223      	str	r3, [r4, #32]
 8010c10:	4b04      	ldr	r3, [pc, #16]	@ (8010c24 <__sinit+0x2c>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1f5      	bne.n	8010c04 <__sinit+0xc>
 8010c18:	f7ff ffc4 	bl	8010ba4 <global_stdio_init.part.0>
 8010c1c:	e7f2      	b.n	8010c04 <__sinit+0xc>
 8010c1e:	bf00      	nop
 8010c20:	08010b65 	.word	0x08010b65
 8010c24:	20016e6c 	.word	0x20016e6c

08010c28 <_fwalk_sglue>:
 8010c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	4688      	mov	r8, r1
 8010c30:	4614      	mov	r4, r2
 8010c32:	2600      	movs	r6, #0
 8010c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c38:	f1b9 0901 	subs.w	r9, r9, #1
 8010c3c:	d505      	bpl.n	8010c4a <_fwalk_sglue+0x22>
 8010c3e:	6824      	ldr	r4, [r4, #0]
 8010c40:	2c00      	cmp	r4, #0
 8010c42:	d1f7      	bne.n	8010c34 <_fwalk_sglue+0xc>
 8010c44:	4630      	mov	r0, r6
 8010c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c4a:	89ab      	ldrh	r3, [r5, #12]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d907      	bls.n	8010c60 <_fwalk_sglue+0x38>
 8010c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c54:	3301      	adds	r3, #1
 8010c56:	d003      	beq.n	8010c60 <_fwalk_sglue+0x38>
 8010c58:	4629      	mov	r1, r5
 8010c5a:	4638      	mov	r0, r7
 8010c5c:	47c0      	blx	r8
 8010c5e:	4306      	orrs	r6, r0
 8010c60:	3568      	adds	r5, #104	@ 0x68
 8010c62:	e7e9      	b.n	8010c38 <_fwalk_sglue+0x10>

08010c64 <_puts_r>:
 8010c64:	6a03      	ldr	r3, [r0, #32]
 8010c66:	b570      	push	{r4, r5, r6, lr}
 8010c68:	6884      	ldr	r4, [r0, #8]
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	460e      	mov	r6, r1
 8010c6e:	b90b      	cbnz	r3, 8010c74 <_puts_r+0x10>
 8010c70:	f7ff ffc2 	bl	8010bf8 <__sinit>
 8010c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c76:	07db      	lsls	r3, r3, #31
 8010c78:	d405      	bmi.n	8010c86 <_puts_r+0x22>
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	0598      	lsls	r0, r3, #22
 8010c7e:	d402      	bmi.n	8010c86 <_puts_r+0x22>
 8010c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c82:	f000 f99e 	bl	8010fc2 <__retarget_lock_acquire_recursive>
 8010c86:	89a3      	ldrh	r3, [r4, #12]
 8010c88:	0719      	lsls	r1, r3, #28
 8010c8a:	d502      	bpl.n	8010c92 <_puts_r+0x2e>
 8010c8c:	6923      	ldr	r3, [r4, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d135      	bne.n	8010cfe <_puts_r+0x9a>
 8010c92:	4621      	mov	r1, r4
 8010c94:	4628      	mov	r0, r5
 8010c96:	f000 f8c5 	bl	8010e24 <__swsetup_r>
 8010c9a:	b380      	cbz	r0, 8010cfe <_puts_r+0x9a>
 8010c9c:	f04f 35ff 	mov.w	r5, #4294967295
 8010ca0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ca2:	07da      	lsls	r2, r3, #31
 8010ca4:	d405      	bmi.n	8010cb2 <_puts_r+0x4e>
 8010ca6:	89a3      	ldrh	r3, [r4, #12]
 8010ca8:	059b      	lsls	r3, r3, #22
 8010caa:	d402      	bmi.n	8010cb2 <_puts_r+0x4e>
 8010cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cae:	f000 f989 	bl	8010fc4 <__retarget_lock_release_recursive>
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	bd70      	pop	{r4, r5, r6, pc}
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	da04      	bge.n	8010cc4 <_puts_r+0x60>
 8010cba:	69a2      	ldr	r2, [r4, #24]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	dc17      	bgt.n	8010cf0 <_puts_r+0x8c>
 8010cc0:	290a      	cmp	r1, #10
 8010cc2:	d015      	beq.n	8010cf0 <_puts_r+0x8c>
 8010cc4:	6823      	ldr	r3, [r4, #0]
 8010cc6:	1c5a      	adds	r2, r3, #1
 8010cc8:	6022      	str	r2, [r4, #0]
 8010cca:	7019      	strb	r1, [r3, #0]
 8010ccc:	68a3      	ldr	r3, [r4, #8]
 8010cce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	60a3      	str	r3, [r4, #8]
 8010cd6:	2900      	cmp	r1, #0
 8010cd8:	d1ed      	bne.n	8010cb6 <_puts_r+0x52>
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	da11      	bge.n	8010d02 <_puts_r+0x9e>
 8010cde:	4622      	mov	r2, r4
 8010ce0:	210a      	movs	r1, #10
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	f000 f85f 	bl	8010da6 <__swbuf_r>
 8010ce8:	3001      	adds	r0, #1
 8010cea:	d0d7      	beq.n	8010c9c <_puts_r+0x38>
 8010cec:	250a      	movs	r5, #10
 8010cee:	e7d7      	b.n	8010ca0 <_puts_r+0x3c>
 8010cf0:	4622      	mov	r2, r4
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f000 f857 	bl	8010da6 <__swbuf_r>
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	d1e7      	bne.n	8010ccc <_puts_r+0x68>
 8010cfc:	e7ce      	b.n	8010c9c <_puts_r+0x38>
 8010cfe:	3e01      	subs	r6, #1
 8010d00:	e7e4      	b.n	8010ccc <_puts_r+0x68>
 8010d02:	6823      	ldr	r3, [r4, #0]
 8010d04:	1c5a      	adds	r2, r3, #1
 8010d06:	6022      	str	r2, [r4, #0]
 8010d08:	220a      	movs	r2, #10
 8010d0a:	701a      	strb	r2, [r3, #0]
 8010d0c:	e7ee      	b.n	8010cec <_puts_r+0x88>
	...

08010d10 <puts>:
 8010d10:	4b02      	ldr	r3, [pc, #8]	@ (8010d1c <puts+0xc>)
 8010d12:	4601      	mov	r1, r0
 8010d14:	6818      	ldr	r0, [r3, #0]
 8010d16:	f7ff bfa5 	b.w	8010c64 <_puts_r>
 8010d1a:	bf00      	nop
 8010d1c:	2000003c 	.word	0x2000003c

08010d20 <__sread>:
 8010d20:	b510      	push	{r4, lr}
 8010d22:	460c      	mov	r4, r1
 8010d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d28:	f000 f8fc 	bl	8010f24 <_read_r>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	bfab      	itete	ge
 8010d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010d32:	89a3      	ldrhlt	r3, [r4, #12]
 8010d34:	181b      	addge	r3, r3, r0
 8010d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010d3a:	bfac      	ite	ge
 8010d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010d3e:	81a3      	strhlt	r3, [r4, #12]
 8010d40:	bd10      	pop	{r4, pc}

08010d42 <__swrite>:
 8010d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d46:	461f      	mov	r7, r3
 8010d48:	898b      	ldrh	r3, [r1, #12]
 8010d4a:	05db      	lsls	r3, r3, #23
 8010d4c:	4605      	mov	r5, r0
 8010d4e:	460c      	mov	r4, r1
 8010d50:	4616      	mov	r6, r2
 8010d52:	d505      	bpl.n	8010d60 <__swrite+0x1e>
 8010d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d58:	2302      	movs	r3, #2
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f000 f8d0 	bl	8010f00 <_lseek_r>
 8010d60:	89a3      	ldrh	r3, [r4, #12]
 8010d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010d6a:	81a3      	strh	r3, [r4, #12]
 8010d6c:	4632      	mov	r2, r6
 8010d6e:	463b      	mov	r3, r7
 8010d70:	4628      	mov	r0, r5
 8010d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d76:	f000 b8e7 	b.w	8010f48 <_write_r>

08010d7a <__sseek>:
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	460c      	mov	r4, r1
 8010d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d82:	f000 f8bd 	bl	8010f00 <_lseek_r>
 8010d86:	1c43      	adds	r3, r0, #1
 8010d88:	89a3      	ldrh	r3, [r4, #12]
 8010d8a:	bf15      	itete	ne
 8010d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010d96:	81a3      	strheq	r3, [r4, #12]
 8010d98:	bf18      	it	ne
 8010d9a:	81a3      	strhne	r3, [r4, #12]
 8010d9c:	bd10      	pop	{r4, pc}

08010d9e <__sclose>:
 8010d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da2:	f000 b89d 	b.w	8010ee0 <_close_r>

08010da6 <__swbuf_r>:
 8010da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da8:	460e      	mov	r6, r1
 8010daa:	4614      	mov	r4, r2
 8010dac:	4605      	mov	r5, r0
 8010dae:	b118      	cbz	r0, 8010db8 <__swbuf_r+0x12>
 8010db0:	6a03      	ldr	r3, [r0, #32]
 8010db2:	b90b      	cbnz	r3, 8010db8 <__swbuf_r+0x12>
 8010db4:	f7ff ff20 	bl	8010bf8 <__sinit>
 8010db8:	69a3      	ldr	r3, [r4, #24]
 8010dba:	60a3      	str	r3, [r4, #8]
 8010dbc:	89a3      	ldrh	r3, [r4, #12]
 8010dbe:	071a      	lsls	r2, r3, #28
 8010dc0:	d501      	bpl.n	8010dc6 <__swbuf_r+0x20>
 8010dc2:	6923      	ldr	r3, [r4, #16]
 8010dc4:	b943      	cbnz	r3, 8010dd8 <__swbuf_r+0x32>
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f000 f82b 	bl	8010e24 <__swsetup_r>
 8010dce:	b118      	cbz	r0, 8010dd8 <__swbuf_r+0x32>
 8010dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8010dd4:	4638      	mov	r0, r7
 8010dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dd8:	6823      	ldr	r3, [r4, #0]
 8010dda:	6922      	ldr	r2, [r4, #16]
 8010ddc:	1a98      	subs	r0, r3, r2
 8010dde:	6963      	ldr	r3, [r4, #20]
 8010de0:	b2f6      	uxtb	r6, r6
 8010de2:	4283      	cmp	r3, r0
 8010de4:	4637      	mov	r7, r6
 8010de6:	dc05      	bgt.n	8010df4 <__swbuf_r+0x4e>
 8010de8:	4621      	mov	r1, r4
 8010dea:	4628      	mov	r0, r5
 8010dec:	f000 fa76 	bl	80112dc <_fflush_r>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	d1ed      	bne.n	8010dd0 <__swbuf_r+0x2a>
 8010df4:	68a3      	ldr	r3, [r4, #8]
 8010df6:	3b01      	subs	r3, #1
 8010df8:	60a3      	str	r3, [r4, #8]
 8010dfa:	6823      	ldr	r3, [r4, #0]
 8010dfc:	1c5a      	adds	r2, r3, #1
 8010dfe:	6022      	str	r2, [r4, #0]
 8010e00:	701e      	strb	r6, [r3, #0]
 8010e02:	6962      	ldr	r2, [r4, #20]
 8010e04:	1c43      	adds	r3, r0, #1
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d004      	beq.n	8010e14 <__swbuf_r+0x6e>
 8010e0a:	89a3      	ldrh	r3, [r4, #12]
 8010e0c:	07db      	lsls	r3, r3, #31
 8010e0e:	d5e1      	bpl.n	8010dd4 <__swbuf_r+0x2e>
 8010e10:	2e0a      	cmp	r6, #10
 8010e12:	d1df      	bne.n	8010dd4 <__swbuf_r+0x2e>
 8010e14:	4621      	mov	r1, r4
 8010e16:	4628      	mov	r0, r5
 8010e18:	f000 fa60 	bl	80112dc <_fflush_r>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d0d9      	beq.n	8010dd4 <__swbuf_r+0x2e>
 8010e20:	e7d6      	b.n	8010dd0 <__swbuf_r+0x2a>
	...

08010e24 <__swsetup_r>:
 8010e24:	b538      	push	{r3, r4, r5, lr}
 8010e26:	4b29      	ldr	r3, [pc, #164]	@ (8010ecc <__swsetup_r+0xa8>)
 8010e28:	4605      	mov	r5, r0
 8010e2a:	6818      	ldr	r0, [r3, #0]
 8010e2c:	460c      	mov	r4, r1
 8010e2e:	b118      	cbz	r0, 8010e38 <__swsetup_r+0x14>
 8010e30:	6a03      	ldr	r3, [r0, #32]
 8010e32:	b90b      	cbnz	r3, 8010e38 <__swsetup_r+0x14>
 8010e34:	f7ff fee0 	bl	8010bf8 <__sinit>
 8010e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e3c:	0719      	lsls	r1, r3, #28
 8010e3e:	d422      	bmi.n	8010e86 <__swsetup_r+0x62>
 8010e40:	06da      	lsls	r2, r3, #27
 8010e42:	d407      	bmi.n	8010e54 <__swsetup_r+0x30>
 8010e44:	2209      	movs	r2, #9
 8010e46:	602a      	str	r2, [r5, #0]
 8010e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e4c:	81a3      	strh	r3, [r4, #12]
 8010e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e52:	e033      	b.n	8010ebc <__swsetup_r+0x98>
 8010e54:	0758      	lsls	r0, r3, #29
 8010e56:	d512      	bpl.n	8010e7e <__swsetup_r+0x5a>
 8010e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e5a:	b141      	cbz	r1, 8010e6e <__swsetup_r+0x4a>
 8010e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e60:	4299      	cmp	r1, r3
 8010e62:	d002      	beq.n	8010e6a <__swsetup_r+0x46>
 8010e64:	4628      	mov	r0, r5
 8010e66:	f000 f8bd 	bl	8010fe4 <_free_r>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e6e:	89a3      	ldrh	r3, [r4, #12]
 8010e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e74:	81a3      	strh	r3, [r4, #12]
 8010e76:	2300      	movs	r3, #0
 8010e78:	6063      	str	r3, [r4, #4]
 8010e7a:	6923      	ldr	r3, [r4, #16]
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	89a3      	ldrh	r3, [r4, #12]
 8010e80:	f043 0308 	orr.w	r3, r3, #8
 8010e84:	81a3      	strh	r3, [r4, #12]
 8010e86:	6923      	ldr	r3, [r4, #16]
 8010e88:	b94b      	cbnz	r3, 8010e9e <__swsetup_r+0x7a>
 8010e8a:	89a3      	ldrh	r3, [r4, #12]
 8010e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e94:	d003      	beq.n	8010e9e <__swsetup_r+0x7a>
 8010e96:	4621      	mov	r1, r4
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f000 fa6d 	bl	8011378 <__smakebuf_r>
 8010e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea2:	f013 0201 	ands.w	r2, r3, #1
 8010ea6:	d00a      	beq.n	8010ebe <__swsetup_r+0x9a>
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	60a2      	str	r2, [r4, #8]
 8010eac:	6962      	ldr	r2, [r4, #20]
 8010eae:	4252      	negs	r2, r2
 8010eb0:	61a2      	str	r2, [r4, #24]
 8010eb2:	6922      	ldr	r2, [r4, #16]
 8010eb4:	b942      	cbnz	r2, 8010ec8 <__swsetup_r+0xa4>
 8010eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010eba:	d1c5      	bne.n	8010e48 <__swsetup_r+0x24>
 8010ebc:	bd38      	pop	{r3, r4, r5, pc}
 8010ebe:	0799      	lsls	r1, r3, #30
 8010ec0:	bf58      	it	pl
 8010ec2:	6962      	ldrpl	r2, [r4, #20]
 8010ec4:	60a2      	str	r2, [r4, #8]
 8010ec6:	e7f4      	b.n	8010eb2 <__swsetup_r+0x8e>
 8010ec8:	2000      	movs	r0, #0
 8010eca:	e7f7      	b.n	8010ebc <__swsetup_r+0x98>
 8010ecc:	2000003c 	.word	0x2000003c

08010ed0 <memset>:
 8010ed0:	4402      	add	r2, r0
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d100      	bne.n	8010eda <memset+0xa>
 8010ed8:	4770      	bx	lr
 8010eda:	f803 1b01 	strb.w	r1, [r3], #1
 8010ede:	e7f9      	b.n	8010ed4 <memset+0x4>

08010ee0 <_close_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	4d06      	ldr	r5, [pc, #24]	@ (8010efc <_close_r+0x1c>)
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	4608      	mov	r0, r1
 8010eea:	602b      	str	r3, [r5, #0]
 8010eec:	f7f1 fba1 	bl	8002632 <_close>
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	d102      	bne.n	8010efa <_close_r+0x1a>
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	b103      	cbz	r3, 8010efa <_close_r+0x1a>
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	bd38      	pop	{r3, r4, r5, pc}
 8010efc:	20016e70 	.word	0x20016e70

08010f00 <_lseek_r>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	4d07      	ldr	r5, [pc, #28]	@ (8010f20 <_lseek_r+0x20>)
 8010f04:	4604      	mov	r4, r0
 8010f06:	4608      	mov	r0, r1
 8010f08:	4611      	mov	r1, r2
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	602a      	str	r2, [r5, #0]
 8010f0e:	461a      	mov	r2, r3
 8010f10:	f7f1 fbb6 	bl	8002680 <_lseek>
 8010f14:	1c43      	adds	r3, r0, #1
 8010f16:	d102      	bne.n	8010f1e <_lseek_r+0x1e>
 8010f18:	682b      	ldr	r3, [r5, #0]
 8010f1a:	b103      	cbz	r3, 8010f1e <_lseek_r+0x1e>
 8010f1c:	6023      	str	r3, [r4, #0]
 8010f1e:	bd38      	pop	{r3, r4, r5, pc}
 8010f20:	20016e70 	.word	0x20016e70

08010f24 <_read_r>:
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	4d07      	ldr	r5, [pc, #28]	@ (8010f44 <_read_r+0x20>)
 8010f28:	4604      	mov	r4, r0
 8010f2a:	4608      	mov	r0, r1
 8010f2c:	4611      	mov	r1, r2
 8010f2e:	2200      	movs	r2, #0
 8010f30:	602a      	str	r2, [r5, #0]
 8010f32:	461a      	mov	r2, r3
 8010f34:	f7f1 fb44 	bl	80025c0 <_read>
 8010f38:	1c43      	adds	r3, r0, #1
 8010f3a:	d102      	bne.n	8010f42 <_read_r+0x1e>
 8010f3c:	682b      	ldr	r3, [r5, #0]
 8010f3e:	b103      	cbz	r3, 8010f42 <_read_r+0x1e>
 8010f40:	6023      	str	r3, [r4, #0]
 8010f42:	bd38      	pop	{r3, r4, r5, pc}
 8010f44:	20016e70 	.word	0x20016e70

08010f48 <_write_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	4d07      	ldr	r5, [pc, #28]	@ (8010f68 <_write_r+0x20>)
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	4608      	mov	r0, r1
 8010f50:	4611      	mov	r1, r2
 8010f52:	2200      	movs	r2, #0
 8010f54:	602a      	str	r2, [r5, #0]
 8010f56:	461a      	mov	r2, r3
 8010f58:	f7f1 fb4f 	bl	80025fa <_write>
 8010f5c:	1c43      	adds	r3, r0, #1
 8010f5e:	d102      	bne.n	8010f66 <_write_r+0x1e>
 8010f60:	682b      	ldr	r3, [r5, #0]
 8010f62:	b103      	cbz	r3, 8010f66 <_write_r+0x1e>
 8010f64:	6023      	str	r3, [r4, #0]
 8010f66:	bd38      	pop	{r3, r4, r5, pc}
 8010f68:	20016e70 	.word	0x20016e70

08010f6c <__errno>:
 8010f6c:	4b01      	ldr	r3, [pc, #4]	@ (8010f74 <__errno+0x8>)
 8010f6e:	6818      	ldr	r0, [r3, #0]
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	2000003c 	.word	0x2000003c

08010f78 <__libc_init_array>:
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8010fb0 <__libc_init_array+0x38>)
 8010f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8010fb4 <__libc_init_array+0x3c>)
 8010f7e:	1b64      	subs	r4, r4, r5
 8010f80:	10a4      	asrs	r4, r4, #2
 8010f82:	2600      	movs	r6, #0
 8010f84:	42a6      	cmp	r6, r4
 8010f86:	d109      	bne.n	8010f9c <__libc_init_array+0x24>
 8010f88:	4d0b      	ldr	r5, [pc, #44]	@ (8010fb8 <__libc_init_array+0x40>)
 8010f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8010fbc <__libc_init_array+0x44>)
 8010f8c:	f001 fae8 	bl	8012560 <_init>
 8010f90:	1b64      	subs	r4, r4, r5
 8010f92:	10a4      	asrs	r4, r4, #2
 8010f94:	2600      	movs	r6, #0
 8010f96:	42a6      	cmp	r6, r4
 8010f98:	d105      	bne.n	8010fa6 <__libc_init_array+0x2e>
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}
 8010f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fa0:	4798      	blx	r3
 8010fa2:	3601      	adds	r6, #1
 8010fa4:	e7ee      	b.n	8010f84 <__libc_init_array+0xc>
 8010fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010faa:	4798      	blx	r3
 8010fac:	3601      	adds	r6, #1
 8010fae:	e7f2      	b.n	8010f96 <__libc_init_array+0x1e>
 8010fb0:	08012cd8 	.word	0x08012cd8
 8010fb4:	08012cd8 	.word	0x08012cd8
 8010fb8:	08012cd8 	.word	0x08012cd8
 8010fbc:	08012cdc 	.word	0x08012cdc

08010fc0 <__retarget_lock_init_recursive>:
 8010fc0:	4770      	bx	lr

08010fc2 <__retarget_lock_acquire_recursive>:
 8010fc2:	4770      	bx	lr

08010fc4 <__retarget_lock_release_recursive>:
 8010fc4:	4770      	bx	lr

08010fc6 <memcpy>:
 8010fc6:	440a      	add	r2, r1
 8010fc8:	4291      	cmp	r1, r2
 8010fca:	f100 33ff 	add.w	r3, r0, #4294967295
 8010fce:	d100      	bne.n	8010fd2 <memcpy+0xc>
 8010fd0:	4770      	bx	lr
 8010fd2:	b510      	push	{r4, lr}
 8010fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fdc:	4291      	cmp	r1, r2
 8010fde:	d1f9      	bne.n	8010fd4 <memcpy+0xe>
 8010fe0:	bd10      	pop	{r4, pc}
	...

08010fe4 <_free_r>:
 8010fe4:	b538      	push	{r3, r4, r5, lr}
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	2900      	cmp	r1, #0
 8010fea:	d041      	beq.n	8011070 <_free_r+0x8c>
 8010fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ff0:	1f0c      	subs	r4, r1, #4
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	bfb8      	it	lt
 8010ff6:	18e4      	addlt	r4, r4, r3
 8010ff8:	f000 f8e0 	bl	80111bc <__malloc_lock>
 8010ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8011074 <_free_r+0x90>)
 8010ffe:	6813      	ldr	r3, [r2, #0]
 8011000:	b933      	cbnz	r3, 8011010 <_free_r+0x2c>
 8011002:	6063      	str	r3, [r4, #4]
 8011004:	6014      	str	r4, [r2, #0]
 8011006:	4628      	mov	r0, r5
 8011008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801100c:	f000 b8dc 	b.w	80111c8 <__malloc_unlock>
 8011010:	42a3      	cmp	r3, r4
 8011012:	d908      	bls.n	8011026 <_free_r+0x42>
 8011014:	6820      	ldr	r0, [r4, #0]
 8011016:	1821      	adds	r1, r4, r0
 8011018:	428b      	cmp	r3, r1
 801101a:	bf01      	itttt	eq
 801101c:	6819      	ldreq	r1, [r3, #0]
 801101e:	685b      	ldreq	r3, [r3, #4]
 8011020:	1809      	addeq	r1, r1, r0
 8011022:	6021      	streq	r1, [r4, #0]
 8011024:	e7ed      	b.n	8011002 <_free_r+0x1e>
 8011026:	461a      	mov	r2, r3
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	b10b      	cbz	r3, 8011030 <_free_r+0x4c>
 801102c:	42a3      	cmp	r3, r4
 801102e:	d9fa      	bls.n	8011026 <_free_r+0x42>
 8011030:	6811      	ldr	r1, [r2, #0]
 8011032:	1850      	adds	r0, r2, r1
 8011034:	42a0      	cmp	r0, r4
 8011036:	d10b      	bne.n	8011050 <_free_r+0x6c>
 8011038:	6820      	ldr	r0, [r4, #0]
 801103a:	4401      	add	r1, r0
 801103c:	1850      	adds	r0, r2, r1
 801103e:	4283      	cmp	r3, r0
 8011040:	6011      	str	r1, [r2, #0]
 8011042:	d1e0      	bne.n	8011006 <_free_r+0x22>
 8011044:	6818      	ldr	r0, [r3, #0]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	6053      	str	r3, [r2, #4]
 801104a:	4408      	add	r0, r1
 801104c:	6010      	str	r0, [r2, #0]
 801104e:	e7da      	b.n	8011006 <_free_r+0x22>
 8011050:	d902      	bls.n	8011058 <_free_r+0x74>
 8011052:	230c      	movs	r3, #12
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	e7d6      	b.n	8011006 <_free_r+0x22>
 8011058:	6820      	ldr	r0, [r4, #0]
 801105a:	1821      	adds	r1, r4, r0
 801105c:	428b      	cmp	r3, r1
 801105e:	bf04      	itt	eq
 8011060:	6819      	ldreq	r1, [r3, #0]
 8011062:	685b      	ldreq	r3, [r3, #4]
 8011064:	6063      	str	r3, [r4, #4]
 8011066:	bf04      	itt	eq
 8011068:	1809      	addeq	r1, r1, r0
 801106a:	6021      	streq	r1, [r4, #0]
 801106c:	6054      	str	r4, [r2, #4]
 801106e:	e7ca      	b.n	8011006 <_free_r+0x22>
 8011070:	bd38      	pop	{r3, r4, r5, pc}
 8011072:	bf00      	nop
 8011074:	20016e7c 	.word	0x20016e7c

08011078 <sbrk_aligned>:
 8011078:	b570      	push	{r4, r5, r6, lr}
 801107a:	4e0f      	ldr	r6, [pc, #60]	@ (80110b8 <sbrk_aligned+0x40>)
 801107c:	460c      	mov	r4, r1
 801107e:	6831      	ldr	r1, [r6, #0]
 8011080:	4605      	mov	r5, r0
 8011082:	b911      	cbnz	r1, 801108a <sbrk_aligned+0x12>
 8011084:	f000 f9d6 	bl	8011434 <_sbrk_r>
 8011088:	6030      	str	r0, [r6, #0]
 801108a:	4621      	mov	r1, r4
 801108c:	4628      	mov	r0, r5
 801108e:	f000 f9d1 	bl	8011434 <_sbrk_r>
 8011092:	1c43      	adds	r3, r0, #1
 8011094:	d103      	bne.n	801109e <sbrk_aligned+0x26>
 8011096:	f04f 34ff 	mov.w	r4, #4294967295
 801109a:	4620      	mov	r0, r4
 801109c:	bd70      	pop	{r4, r5, r6, pc}
 801109e:	1cc4      	adds	r4, r0, #3
 80110a0:	f024 0403 	bic.w	r4, r4, #3
 80110a4:	42a0      	cmp	r0, r4
 80110a6:	d0f8      	beq.n	801109a <sbrk_aligned+0x22>
 80110a8:	1a21      	subs	r1, r4, r0
 80110aa:	4628      	mov	r0, r5
 80110ac:	f000 f9c2 	bl	8011434 <_sbrk_r>
 80110b0:	3001      	adds	r0, #1
 80110b2:	d1f2      	bne.n	801109a <sbrk_aligned+0x22>
 80110b4:	e7ef      	b.n	8011096 <sbrk_aligned+0x1e>
 80110b6:	bf00      	nop
 80110b8:	20016e78 	.word	0x20016e78

080110bc <_malloc_r>:
 80110bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c0:	1ccd      	adds	r5, r1, #3
 80110c2:	f025 0503 	bic.w	r5, r5, #3
 80110c6:	3508      	adds	r5, #8
 80110c8:	2d0c      	cmp	r5, #12
 80110ca:	bf38      	it	cc
 80110cc:	250c      	movcc	r5, #12
 80110ce:	2d00      	cmp	r5, #0
 80110d0:	4606      	mov	r6, r0
 80110d2:	db01      	blt.n	80110d8 <_malloc_r+0x1c>
 80110d4:	42a9      	cmp	r1, r5
 80110d6:	d904      	bls.n	80110e2 <_malloc_r+0x26>
 80110d8:	230c      	movs	r3, #12
 80110da:	6033      	str	r3, [r6, #0]
 80110dc:	2000      	movs	r0, #0
 80110de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80111b8 <_malloc_r+0xfc>
 80110e6:	f000 f869 	bl	80111bc <__malloc_lock>
 80110ea:	f8d8 3000 	ldr.w	r3, [r8]
 80110ee:	461c      	mov	r4, r3
 80110f0:	bb44      	cbnz	r4, 8011144 <_malloc_r+0x88>
 80110f2:	4629      	mov	r1, r5
 80110f4:	4630      	mov	r0, r6
 80110f6:	f7ff ffbf 	bl	8011078 <sbrk_aligned>
 80110fa:	1c43      	adds	r3, r0, #1
 80110fc:	4604      	mov	r4, r0
 80110fe:	d158      	bne.n	80111b2 <_malloc_r+0xf6>
 8011100:	f8d8 4000 	ldr.w	r4, [r8]
 8011104:	4627      	mov	r7, r4
 8011106:	2f00      	cmp	r7, #0
 8011108:	d143      	bne.n	8011192 <_malloc_r+0xd6>
 801110a:	2c00      	cmp	r4, #0
 801110c:	d04b      	beq.n	80111a6 <_malloc_r+0xea>
 801110e:	6823      	ldr	r3, [r4, #0]
 8011110:	4639      	mov	r1, r7
 8011112:	4630      	mov	r0, r6
 8011114:	eb04 0903 	add.w	r9, r4, r3
 8011118:	f000 f98c 	bl	8011434 <_sbrk_r>
 801111c:	4581      	cmp	r9, r0
 801111e:	d142      	bne.n	80111a6 <_malloc_r+0xea>
 8011120:	6821      	ldr	r1, [r4, #0]
 8011122:	1a6d      	subs	r5, r5, r1
 8011124:	4629      	mov	r1, r5
 8011126:	4630      	mov	r0, r6
 8011128:	f7ff ffa6 	bl	8011078 <sbrk_aligned>
 801112c:	3001      	adds	r0, #1
 801112e:	d03a      	beq.n	80111a6 <_malloc_r+0xea>
 8011130:	6823      	ldr	r3, [r4, #0]
 8011132:	442b      	add	r3, r5
 8011134:	6023      	str	r3, [r4, #0]
 8011136:	f8d8 3000 	ldr.w	r3, [r8]
 801113a:	685a      	ldr	r2, [r3, #4]
 801113c:	bb62      	cbnz	r2, 8011198 <_malloc_r+0xdc>
 801113e:	f8c8 7000 	str.w	r7, [r8]
 8011142:	e00f      	b.n	8011164 <_malloc_r+0xa8>
 8011144:	6822      	ldr	r2, [r4, #0]
 8011146:	1b52      	subs	r2, r2, r5
 8011148:	d420      	bmi.n	801118c <_malloc_r+0xd0>
 801114a:	2a0b      	cmp	r2, #11
 801114c:	d917      	bls.n	801117e <_malloc_r+0xc2>
 801114e:	1961      	adds	r1, r4, r5
 8011150:	42a3      	cmp	r3, r4
 8011152:	6025      	str	r5, [r4, #0]
 8011154:	bf18      	it	ne
 8011156:	6059      	strne	r1, [r3, #4]
 8011158:	6863      	ldr	r3, [r4, #4]
 801115a:	bf08      	it	eq
 801115c:	f8c8 1000 	streq.w	r1, [r8]
 8011160:	5162      	str	r2, [r4, r5]
 8011162:	604b      	str	r3, [r1, #4]
 8011164:	4630      	mov	r0, r6
 8011166:	f000 f82f 	bl	80111c8 <__malloc_unlock>
 801116a:	f104 000b 	add.w	r0, r4, #11
 801116e:	1d23      	adds	r3, r4, #4
 8011170:	f020 0007 	bic.w	r0, r0, #7
 8011174:	1ac2      	subs	r2, r0, r3
 8011176:	bf1c      	itt	ne
 8011178:	1a1b      	subne	r3, r3, r0
 801117a:	50a3      	strne	r3, [r4, r2]
 801117c:	e7af      	b.n	80110de <_malloc_r+0x22>
 801117e:	6862      	ldr	r2, [r4, #4]
 8011180:	42a3      	cmp	r3, r4
 8011182:	bf0c      	ite	eq
 8011184:	f8c8 2000 	streq.w	r2, [r8]
 8011188:	605a      	strne	r2, [r3, #4]
 801118a:	e7eb      	b.n	8011164 <_malloc_r+0xa8>
 801118c:	4623      	mov	r3, r4
 801118e:	6864      	ldr	r4, [r4, #4]
 8011190:	e7ae      	b.n	80110f0 <_malloc_r+0x34>
 8011192:	463c      	mov	r4, r7
 8011194:	687f      	ldr	r7, [r7, #4]
 8011196:	e7b6      	b.n	8011106 <_malloc_r+0x4a>
 8011198:	461a      	mov	r2, r3
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	42a3      	cmp	r3, r4
 801119e:	d1fb      	bne.n	8011198 <_malloc_r+0xdc>
 80111a0:	2300      	movs	r3, #0
 80111a2:	6053      	str	r3, [r2, #4]
 80111a4:	e7de      	b.n	8011164 <_malloc_r+0xa8>
 80111a6:	230c      	movs	r3, #12
 80111a8:	6033      	str	r3, [r6, #0]
 80111aa:	4630      	mov	r0, r6
 80111ac:	f000 f80c 	bl	80111c8 <__malloc_unlock>
 80111b0:	e794      	b.n	80110dc <_malloc_r+0x20>
 80111b2:	6005      	str	r5, [r0, #0]
 80111b4:	e7d6      	b.n	8011164 <_malloc_r+0xa8>
 80111b6:	bf00      	nop
 80111b8:	20016e7c 	.word	0x20016e7c

080111bc <__malloc_lock>:
 80111bc:	4801      	ldr	r0, [pc, #4]	@ (80111c4 <__malloc_lock+0x8>)
 80111be:	f7ff bf00 	b.w	8010fc2 <__retarget_lock_acquire_recursive>
 80111c2:	bf00      	nop
 80111c4:	20016e74 	.word	0x20016e74

080111c8 <__malloc_unlock>:
 80111c8:	4801      	ldr	r0, [pc, #4]	@ (80111d0 <__malloc_unlock+0x8>)
 80111ca:	f7ff befb 	b.w	8010fc4 <__retarget_lock_release_recursive>
 80111ce:	bf00      	nop
 80111d0:	20016e74 	.word	0x20016e74

080111d4 <__sflush_r>:
 80111d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111dc:	0716      	lsls	r6, r2, #28
 80111de:	4605      	mov	r5, r0
 80111e0:	460c      	mov	r4, r1
 80111e2:	d454      	bmi.n	801128e <__sflush_r+0xba>
 80111e4:	684b      	ldr	r3, [r1, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	dc02      	bgt.n	80111f0 <__sflush_r+0x1c>
 80111ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	dd48      	ble.n	8011282 <__sflush_r+0xae>
 80111f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111f2:	2e00      	cmp	r6, #0
 80111f4:	d045      	beq.n	8011282 <__sflush_r+0xae>
 80111f6:	2300      	movs	r3, #0
 80111f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80111fc:	682f      	ldr	r7, [r5, #0]
 80111fe:	6a21      	ldr	r1, [r4, #32]
 8011200:	602b      	str	r3, [r5, #0]
 8011202:	d030      	beq.n	8011266 <__sflush_r+0x92>
 8011204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	0759      	lsls	r1, r3, #29
 801120a:	d505      	bpl.n	8011218 <__sflush_r+0x44>
 801120c:	6863      	ldr	r3, [r4, #4]
 801120e:	1ad2      	subs	r2, r2, r3
 8011210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011212:	b10b      	cbz	r3, 8011218 <__sflush_r+0x44>
 8011214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011216:	1ad2      	subs	r2, r2, r3
 8011218:	2300      	movs	r3, #0
 801121a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801121c:	6a21      	ldr	r1, [r4, #32]
 801121e:	4628      	mov	r0, r5
 8011220:	47b0      	blx	r6
 8011222:	1c43      	adds	r3, r0, #1
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	d106      	bne.n	8011236 <__sflush_r+0x62>
 8011228:	6829      	ldr	r1, [r5, #0]
 801122a:	291d      	cmp	r1, #29
 801122c:	d82b      	bhi.n	8011286 <__sflush_r+0xb2>
 801122e:	4a2a      	ldr	r2, [pc, #168]	@ (80112d8 <__sflush_r+0x104>)
 8011230:	40ca      	lsrs	r2, r1
 8011232:	07d6      	lsls	r6, r2, #31
 8011234:	d527      	bpl.n	8011286 <__sflush_r+0xb2>
 8011236:	2200      	movs	r2, #0
 8011238:	6062      	str	r2, [r4, #4]
 801123a:	04d9      	lsls	r1, r3, #19
 801123c:	6922      	ldr	r2, [r4, #16]
 801123e:	6022      	str	r2, [r4, #0]
 8011240:	d504      	bpl.n	801124c <__sflush_r+0x78>
 8011242:	1c42      	adds	r2, r0, #1
 8011244:	d101      	bne.n	801124a <__sflush_r+0x76>
 8011246:	682b      	ldr	r3, [r5, #0]
 8011248:	b903      	cbnz	r3, 801124c <__sflush_r+0x78>
 801124a:	6560      	str	r0, [r4, #84]	@ 0x54
 801124c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801124e:	602f      	str	r7, [r5, #0]
 8011250:	b1b9      	cbz	r1, 8011282 <__sflush_r+0xae>
 8011252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011256:	4299      	cmp	r1, r3
 8011258:	d002      	beq.n	8011260 <__sflush_r+0x8c>
 801125a:	4628      	mov	r0, r5
 801125c:	f7ff fec2 	bl	8010fe4 <_free_r>
 8011260:	2300      	movs	r3, #0
 8011262:	6363      	str	r3, [r4, #52]	@ 0x34
 8011264:	e00d      	b.n	8011282 <__sflush_r+0xae>
 8011266:	2301      	movs	r3, #1
 8011268:	4628      	mov	r0, r5
 801126a:	47b0      	blx	r6
 801126c:	4602      	mov	r2, r0
 801126e:	1c50      	adds	r0, r2, #1
 8011270:	d1c9      	bne.n	8011206 <__sflush_r+0x32>
 8011272:	682b      	ldr	r3, [r5, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d0c6      	beq.n	8011206 <__sflush_r+0x32>
 8011278:	2b1d      	cmp	r3, #29
 801127a:	d001      	beq.n	8011280 <__sflush_r+0xac>
 801127c:	2b16      	cmp	r3, #22
 801127e:	d11e      	bne.n	80112be <__sflush_r+0xea>
 8011280:	602f      	str	r7, [r5, #0]
 8011282:	2000      	movs	r0, #0
 8011284:	e022      	b.n	80112cc <__sflush_r+0xf8>
 8011286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801128a:	b21b      	sxth	r3, r3
 801128c:	e01b      	b.n	80112c6 <__sflush_r+0xf2>
 801128e:	690f      	ldr	r7, [r1, #16]
 8011290:	2f00      	cmp	r7, #0
 8011292:	d0f6      	beq.n	8011282 <__sflush_r+0xae>
 8011294:	0793      	lsls	r3, r2, #30
 8011296:	680e      	ldr	r6, [r1, #0]
 8011298:	bf08      	it	eq
 801129a:	694b      	ldreq	r3, [r1, #20]
 801129c:	600f      	str	r7, [r1, #0]
 801129e:	bf18      	it	ne
 80112a0:	2300      	movne	r3, #0
 80112a2:	eba6 0807 	sub.w	r8, r6, r7
 80112a6:	608b      	str	r3, [r1, #8]
 80112a8:	f1b8 0f00 	cmp.w	r8, #0
 80112ac:	dde9      	ble.n	8011282 <__sflush_r+0xae>
 80112ae:	6a21      	ldr	r1, [r4, #32]
 80112b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112b2:	4643      	mov	r3, r8
 80112b4:	463a      	mov	r2, r7
 80112b6:	4628      	mov	r0, r5
 80112b8:	47b0      	blx	r6
 80112ba:	2800      	cmp	r0, #0
 80112bc:	dc08      	bgt.n	80112d0 <__sflush_r+0xfc>
 80112be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112c6:	81a3      	strh	r3, [r4, #12]
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d0:	4407      	add	r7, r0
 80112d2:	eba8 0800 	sub.w	r8, r8, r0
 80112d6:	e7e7      	b.n	80112a8 <__sflush_r+0xd4>
 80112d8:	20400001 	.word	0x20400001

080112dc <_fflush_r>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	690b      	ldr	r3, [r1, #16]
 80112e0:	4605      	mov	r5, r0
 80112e2:	460c      	mov	r4, r1
 80112e4:	b913      	cbnz	r3, 80112ec <_fflush_r+0x10>
 80112e6:	2500      	movs	r5, #0
 80112e8:	4628      	mov	r0, r5
 80112ea:	bd38      	pop	{r3, r4, r5, pc}
 80112ec:	b118      	cbz	r0, 80112f6 <_fflush_r+0x1a>
 80112ee:	6a03      	ldr	r3, [r0, #32]
 80112f0:	b90b      	cbnz	r3, 80112f6 <_fflush_r+0x1a>
 80112f2:	f7ff fc81 	bl	8010bf8 <__sinit>
 80112f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0f3      	beq.n	80112e6 <_fflush_r+0xa>
 80112fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011300:	07d0      	lsls	r0, r2, #31
 8011302:	d404      	bmi.n	801130e <_fflush_r+0x32>
 8011304:	0599      	lsls	r1, r3, #22
 8011306:	d402      	bmi.n	801130e <_fflush_r+0x32>
 8011308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801130a:	f7ff fe5a 	bl	8010fc2 <__retarget_lock_acquire_recursive>
 801130e:	4628      	mov	r0, r5
 8011310:	4621      	mov	r1, r4
 8011312:	f7ff ff5f 	bl	80111d4 <__sflush_r>
 8011316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011318:	07da      	lsls	r2, r3, #31
 801131a:	4605      	mov	r5, r0
 801131c:	d4e4      	bmi.n	80112e8 <_fflush_r+0xc>
 801131e:	89a3      	ldrh	r3, [r4, #12]
 8011320:	059b      	lsls	r3, r3, #22
 8011322:	d4e1      	bmi.n	80112e8 <_fflush_r+0xc>
 8011324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011326:	f7ff fe4d 	bl	8010fc4 <__retarget_lock_release_recursive>
 801132a:	e7dd      	b.n	80112e8 <_fflush_r+0xc>

0801132c <__swhatbuf_r>:
 801132c:	b570      	push	{r4, r5, r6, lr}
 801132e:	460c      	mov	r4, r1
 8011330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011334:	2900      	cmp	r1, #0
 8011336:	b096      	sub	sp, #88	@ 0x58
 8011338:	4615      	mov	r5, r2
 801133a:	461e      	mov	r6, r3
 801133c:	da0d      	bge.n	801135a <__swhatbuf_r+0x2e>
 801133e:	89a3      	ldrh	r3, [r4, #12]
 8011340:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011344:	f04f 0100 	mov.w	r1, #0
 8011348:	bf14      	ite	ne
 801134a:	2340      	movne	r3, #64	@ 0x40
 801134c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011350:	2000      	movs	r0, #0
 8011352:	6031      	str	r1, [r6, #0]
 8011354:	602b      	str	r3, [r5, #0]
 8011356:	b016      	add	sp, #88	@ 0x58
 8011358:	bd70      	pop	{r4, r5, r6, pc}
 801135a:	466a      	mov	r2, sp
 801135c:	f000 f848 	bl	80113f0 <_fstat_r>
 8011360:	2800      	cmp	r0, #0
 8011362:	dbec      	blt.n	801133e <__swhatbuf_r+0x12>
 8011364:	9901      	ldr	r1, [sp, #4]
 8011366:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801136a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801136e:	4259      	negs	r1, r3
 8011370:	4159      	adcs	r1, r3
 8011372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011376:	e7eb      	b.n	8011350 <__swhatbuf_r+0x24>

08011378 <__smakebuf_r>:
 8011378:	898b      	ldrh	r3, [r1, #12]
 801137a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801137c:	079d      	lsls	r5, r3, #30
 801137e:	4606      	mov	r6, r0
 8011380:	460c      	mov	r4, r1
 8011382:	d507      	bpl.n	8011394 <__smakebuf_r+0x1c>
 8011384:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	6123      	str	r3, [r4, #16]
 801138c:	2301      	movs	r3, #1
 801138e:	6163      	str	r3, [r4, #20]
 8011390:	b003      	add	sp, #12
 8011392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011394:	ab01      	add	r3, sp, #4
 8011396:	466a      	mov	r2, sp
 8011398:	f7ff ffc8 	bl	801132c <__swhatbuf_r>
 801139c:	9f00      	ldr	r7, [sp, #0]
 801139e:	4605      	mov	r5, r0
 80113a0:	4639      	mov	r1, r7
 80113a2:	4630      	mov	r0, r6
 80113a4:	f7ff fe8a 	bl	80110bc <_malloc_r>
 80113a8:	b948      	cbnz	r0, 80113be <__smakebuf_r+0x46>
 80113aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ae:	059a      	lsls	r2, r3, #22
 80113b0:	d4ee      	bmi.n	8011390 <__smakebuf_r+0x18>
 80113b2:	f023 0303 	bic.w	r3, r3, #3
 80113b6:	f043 0302 	orr.w	r3, r3, #2
 80113ba:	81a3      	strh	r3, [r4, #12]
 80113bc:	e7e2      	b.n	8011384 <__smakebuf_r+0xc>
 80113be:	89a3      	ldrh	r3, [r4, #12]
 80113c0:	6020      	str	r0, [r4, #0]
 80113c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113c6:	81a3      	strh	r3, [r4, #12]
 80113c8:	9b01      	ldr	r3, [sp, #4]
 80113ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80113ce:	b15b      	cbz	r3, 80113e8 <__smakebuf_r+0x70>
 80113d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113d4:	4630      	mov	r0, r6
 80113d6:	f000 f81d 	bl	8011414 <_isatty_r>
 80113da:	b128      	cbz	r0, 80113e8 <__smakebuf_r+0x70>
 80113dc:	89a3      	ldrh	r3, [r4, #12]
 80113de:	f023 0303 	bic.w	r3, r3, #3
 80113e2:	f043 0301 	orr.w	r3, r3, #1
 80113e6:	81a3      	strh	r3, [r4, #12]
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	431d      	orrs	r5, r3
 80113ec:	81a5      	strh	r5, [r4, #12]
 80113ee:	e7cf      	b.n	8011390 <__smakebuf_r+0x18>

080113f0 <_fstat_r>:
 80113f0:	b538      	push	{r3, r4, r5, lr}
 80113f2:	4d07      	ldr	r5, [pc, #28]	@ (8011410 <_fstat_r+0x20>)
 80113f4:	2300      	movs	r3, #0
 80113f6:	4604      	mov	r4, r0
 80113f8:	4608      	mov	r0, r1
 80113fa:	4611      	mov	r1, r2
 80113fc:	602b      	str	r3, [r5, #0]
 80113fe:	f7f1 f924 	bl	800264a <_fstat>
 8011402:	1c43      	adds	r3, r0, #1
 8011404:	d102      	bne.n	801140c <_fstat_r+0x1c>
 8011406:	682b      	ldr	r3, [r5, #0]
 8011408:	b103      	cbz	r3, 801140c <_fstat_r+0x1c>
 801140a:	6023      	str	r3, [r4, #0]
 801140c:	bd38      	pop	{r3, r4, r5, pc}
 801140e:	bf00      	nop
 8011410:	20016e70 	.word	0x20016e70

08011414 <_isatty_r>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	4d06      	ldr	r5, [pc, #24]	@ (8011430 <_isatty_r+0x1c>)
 8011418:	2300      	movs	r3, #0
 801141a:	4604      	mov	r4, r0
 801141c:	4608      	mov	r0, r1
 801141e:	602b      	str	r3, [r5, #0]
 8011420:	f7f1 f923 	bl	800266a <_isatty>
 8011424:	1c43      	adds	r3, r0, #1
 8011426:	d102      	bne.n	801142e <_isatty_r+0x1a>
 8011428:	682b      	ldr	r3, [r5, #0]
 801142a:	b103      	cbz	r3, 801142e <_isatty_r+0x1a>
 801142c:	6023      	str	r3, [r4, #0]
 801142e:	bd38      	pop	{r3, r4, r5, pc}
 8011430:	20016e70 	.word	0x20016e70

08011434 <_sbrk_r>:
 8011434:	b538      	push	{r3, r4, r5, lr}
 8011436:	4d06      	ldr	r5, [pc, #24]	@ (8011450 <_sbrk_r+0x1c>)
 8011438:	2300      	movs	r3, #0
 801143a:	4604      	mov	r4, r0
 801143c:	4608      	mov	r0, r1
 801143e:	602b      	str	r3, [r5, #0]
 8011440:	f7f1 f92c 	bl	800269c <_sbrk>
 8011444:	1c43      	adds	r3, r0, #1
 8011446:	d102      	bne.n	801144e <_sbrk_r+0x1a>
 8011448:	682b      	ldr	r3, [r5, #0]
 801144a:	b103      	cbz	r3, 801144e <_sbrk_r+0x1a>
 801144c:	6023      	str	r3, [r4, #0]
 801144e:	bd38      	pop	{r3, r4, r5, pc}
 8011450:	20016e70 	.word	0x20016e70
 8011454:	00000000 	.word	0x00000000

08011458 <tan>:
 8011458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801145a:	ec53 2b10 	vmov	r2, r3, d0
 801145e:	4816      	ldr	r0, [pc, #88]	@ (80114b8 <tan+0x60>)
 8011460:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011464:	4281      	cmp	r1, r0
 8011466:	d807      	bhi.n	8011478 <tan+0x20>
 8011468:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 80114b0 <tan+0x58>
 801146c:	2001      	movs	r0, #1
 801146e:	b005      	add	sp, #20
 8011470:	f85d eb04 	ldr.w	lr, [sp], #4
 8011474:	f000 b824 	b.w	80114c0 <__kernel_tan>
 8011478:	4810      	ldr	r0, [pc, #64]	@ (80114bc <tan+0x64>)
 801147a:	4281      	cmp	r1, r0
 801147c:	d908      	bls.n	8011490 <tan+0x38>
 801147e:	4610      	mov	r0, r2
 8011480:	4619      	mov	r1, r3
 8011482:	f7ee fea9 	bl	80001d8 <__aeabi_dsub>
 8011486:	ec41 0b10 	vmov	d0, r0, r1
 801148a:	b005      	add	sp, #20
 801148c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011490:	4668      	mov	r0, sp
 8011492:	f000 fa19 	bl	80118c8 <__ieee754_rem_pio2>
 8011496:	0040      	lsls	r0, r0, #1
 8011498:	f000 0002 	and.w	r0, r0, #2
 801149c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114a0:	ed9d 0b00 	vldr	d0, [sp]
 80114a4:	f1c0 0001 	rsb	r0, r0, #1
 80114a8:	f000 f80a 	bl	80114c0 <__kernel_tan>
 80114ac:	e7ed      	b.n	801148a <tan+0x32>
 80114ae:	bf00      	nop
	...
 80114b8:	3fe921fb 	.word	0x3fe921fb
 80114bc:	7fefffff 	.word	0x7fefffff

080114c0 <__kernel_tan>:
 80114c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c4:	ec5b ab10 	vmov	sl, fp, d0
 80114c8:	4bdb      	ldr	r3, [pc, #876]	@ (8011838 <__kernel_tan+0x378>)
 80114ca:	b089      	sub	sp, #36	@ 0x24
 80114cc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 80114d0:	429f      	cmp	r7, r3
 80114d2:	ec59 8b11 	vmov	r8, r9, d1
 80114d6:	4606      	mov	r6, r0
 80114d8:	f8cd b008 	str.w	fp, [sp, #8]
 80114dc:	d85d      	bhi.n	801159a <__kernel_tan+0xda>
 80114de:	4650      	mov	r0, sl
 80114e0:	4659      	mov	r1, fp
 80114e2:	f7ef facb 	bl	8000a7c <__aeabi_d2iz>
 80114e6:	4605      	mov	r5, r0
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d17c      	bne.n	80115e6 <__kernel_tan+0x126>
 80114ec:	1c73      	adds	r3, r6, #1
 80114ee:	4652      	mov	r2, sl
 80114f0:	4313      	orrs	r3, r2
 80114f2:	433b      	orrs	r3, r7
 80114f4:	d110      	bne.n	8011518 <__kernel_tan+0x58>
 80114f6:	ec4b ab10 	vmov	d0, sl, fp
 80114fa:	f000 fbe1 	bl	8011cc0 <fabs>
 80114fe:	49cf      	ldr	r1, [pc, #828]	@ (801183c <__kernel_tan+0x37c>)
 8011500:	ec53 2b10 	vmov	r2, r3, d0
 8011504:	2000      	movs	r0, #0
 8011506:	f7ef f949 	bl	800079c <__aeabi_ddiv>
 801150a:	4682      	mov	sl, r0
 801150c:	468b      	mov	fp, r1
 801150e:	ec4b ab10 	vmov	d0, sl, fp
 8011512:	b009      	add	sp, #36	@ 0x24
 8011514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011518:	2e01      	cmp	r6, #1
 801151a:	d0f8      	beq.n	801150e <__kernel_tan+0x4e>
 801151c:	4642      	mov	r2, r8
 801151e:	464b      	mov	r3, r9
 8011520:	4650      	mov	r0, sl
 8011522:	4659      	mov	r1, fp
 8011524:	f7ee fe5a 	bl	80001dc <__adddf3>
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	460f      	mov	r7, r1
 801152e:	2000      	movs	r0, #0
 8011530:	49c3      	ldr	r1, [pc, #780]	@ (8011840 <__kernel_tan+0x380>)
 8011532:	f7ef f933 	bl	800079c <__aeabi_ddiv>
 8011536:	e9cd 0100 	strd	r0, r1, [sp]
 801153a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801153e:	462e      	mov	r6, r5
 8011540:	4652      	mov	r2, sl
 8011542:	462c      	mov	r4, r5
 8011544:	4630      	mov	r0, r6
 8011546:	461d      	mov	r5, r3
 8011548:	4639      	mov	r1, r7
 801154a:	465b      	mov	r3, fp
 801154c:	f7ee fe44 	bl	80001d8 <__aeabi_dsub>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	4640      	mov	r0, r8
 8011556:	4649      	mov	r1, r9
 8011558:	f7ee fe3e 	bl	80001d8 <__aeabi_dsub>
 801155c:	4632      	mov	r2, r6
 801155e:	462b      	mov	r3, r5
 8011560:	f7ee fff2 	bl	8000548 <__aeabi_dmul>
 8011564:	4632      	mov	r2, r6
 8011566:	4682      	mov	sl, r0
 8011568:	468b      	mov	fp, r1
 801156a:	462b      	mov	r3, r5
 801156c:	4630      	mov	r0, r6
 801156e:	4639      	mov	r1, r7
 8011570:	f7ee ffea 	bl	8000548 <__aeabi_dmul>
 8011574:	4bb1      	ldr	r3, [pc, #708]	@ (801183c <__kernel_tan+0x37c>)
 8011576:	2200      	movs	r2, #0
 8011578:	f7ee fe30 	bl	80001dc <__adddf3>
 801157c:	4602      	mov	r2, r0
 801157e:	460b      	mov	r3, r1
 8011580:	4650      	mov	r0, sl
 8011582:	4659      	mov	r1, fp
 8011584:	f7ee fe2a 	bl	80001dc <__adddf3>
 8011588:	e9dd 2300 	ldrd	r2, r3, [sp]
 801158c:	f7ee ffdc 	bl	8000548 <__aeabi_dmul>
 8011590:	4622      	mov	r2, r4
 8011592:	462b      	mov	r3, r5
 8011594:	f7ee fe22 	bl	80001dc <__adddf3>
 8011598:	e7b7      	b.n	801150a <__kernel_tan+0x4a>
 801159a:	4baa      	ldr	r3, [pc, #680]	@ (8011844 <__kernel_tan+0x384>)
 801159c:	429f      	cmp	r7, r3
 801159e:	d922      	bls.n	80115e6 <__kernel_tan+0x126>
 80115a0:	9b02      	ldr	r3, [sp, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	da05      	bge.n	80115b2 <__kernel_tan+0xf2>
 80115a6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80115aa:	469b      	mov	fp, r3
 80115ac:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80115b0:	4699      	mov	r9, r3
 80115b2:	4652      	mov	r2, sl
 80115b4:	465b      	mov	r3, fp
 80115b6:	a182      	add	r1, pc, #520	@ (adr r1, 80117c0 <__kernel_tan+0x300>)
 80115b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115bc:	f7ee fe0c 	bl	80001d8 <__aeabi_dsub>
 80115c0:	4642      	mov	r2, r8
 80115c2:	464b      	mov	r3, r9
 80115c4:	4604      	mov	r4, r0
 80115c6:	460d      	mov	r5, r1
 80115c8:	a17f      	add	r1, pc, #508	@ (adr r1, 80117c8 <__kernel_tan+0x308>)
 80115ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115ce:	f7ee fe03 	bl	80001d8 <__aeabi_dsub>
 80115d2:	4622      	mov	r2, r4
 80115d4:	462b      	mov	r3, r5
 80115d6:	f7ee fe01 	bl	80001dc <__adddf3>
 80115da:	f04f 0800 	mov.w	r8, #0
 80115de:	4682      	mov	sl, r0
 80115e0:	468b      	mov	fp, r1
 80115e2:	f04f 0900 	mov.w	r9, #0
 80115e6:	4652      	mov	r2, sl
 80115e8:	465b      	mov	r3, fp
 80115ea:	4650      	mov	r0, sl
 80115ec:	4659      	mov	r1, fp
 80115ee:	f7ee ffab 	bl	8000548 <__aeabi_dmul>
 80115f2:	4602      	mov	r2, r0
 80115f4:	460b      	mov	r3, r1
 80115f6:	e9cd 2300 	strd	r2, r3, [sp]
 80115fa:	f7ee ffa5 	bl	8000548 <__aeabi_dmul>
 80115fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011602:	4604      	mov	r4, r0
 8011604:	460d      	mov	r5, r1
 8011606:	4650      	mov	r0, sl
 8011608:	4659      	mov	r1, fp
 801160a:	f7ee ff9d 	bl	8000548 <__aeabi_dmul>
 801160e:	a370      	add	r3, pc, #448	@ (adr r3, 80117d0 <__kernel_tan+0x310>)
 8011610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011618:	4620      	mov	r0, r4
 801161a:	4629      	mov	r1, r5
 801161c:	f7ee ff94 	bl	8000548 <__aeabi_dmul>
 8011620:	a36d      	add	r3, pc, #436	@ (adr r3, 80117d8 <__kernel_tan+0x318>)
 8011622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011626:	f7ee fdd9 	bl	80001dc <__adddf3>
 801162a:	4622      	mov	r2, r4
 801162c:	462b      	mov	r3, r5
 801162e:	f7ee ff8b 	bl	8000548 <__aeabi_dmul>
 8011632:	a36b      	add	r3, pc, #428	@ (adr r3, 80117e0 <__kernel_tan+0x320>)
 8011634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011638:	f7ee fdd0 	bl	80001dc <__adddf3>
 801163c:	4622      	mov	r2, r4
 801163e:	462b      	mov	r3, r5
 8011640:	f7ee ff82 	bl	8000548 <__aeabi_dmul>
 8011644:	a368      	add	r3, pc, #416	@ (adr r3, 80117e8 <__kernel_tan+0x328>)
 8011646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164a:	f7ee fdc7 	bl	80001dc <__adddf3>
 801164e:	4622      	mov	r2, r4
 8011650:	462b      	mov	r3, r5
 8011652:	f7ee ff79 	bl	8000548 <__aeabi_dmul>
 8011656:	a366      	add	r3, pc, #408	@ (adr r3, 80117f0 <__kernel_tan+0x330>)
 8011658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165c:	f7ee fdbe 	bl	80001dc <__adddf3>
 8011660:	4622      	mov	r2, r4
 8011662:	462b      	mov	r3, r5
 8011664:	f7ee ff70 	bl	8000548 <__aeabi_dmul>
 8011668:	a363      	add	r3, pc, #396	@ (adr r3, 80117f8 <__kernel_tan+0x338>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ee fdb5 	bl	80001dc <__adddf3>
 8011672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011676:	f7ee ff67 	bl	8000548 <__aeabi_dmul>
 801167a:	a361      	add	r3, pc, #388	@ (adr r3, 8011800 <__kernel_tan+0x340>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011684:	4620      	mov	r0, r4
 8011686:	4629      	mov	r1, r5
 8011688:	f7ee ff5e 	bl	8000548 <__aeabi_dmul>
 801168c:	a35e      	add	r3, pc, #376	@ (adr r3, 8011808 <__kernel_tan+0x348>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	f7ee fda3 	bl	80001dc <__adddf3>
 8011696:	4622      	mov	r2, r4
 8011698:	462b      	mov	r3, r5
 801169a:	f7ee ff55 	bl	8000548 <__aeabi_dmul>
 801169e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011810 <__kernel_tan+0x350>)
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	f7ee fd9a 	bl	80001dc <__adddf3>
 80116a8:	4622      	mov	r2, r4
 80116aa:	462b      	mov	r3, r5
 80116ac:	f7ee ff4c 	bl	8000548 <__aeabi_dmul>
 80116b0:	a359      	add	r3, pc, #356	@ (adr r3, 8011818 <__kernel_tan+0x358>)
 80116b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b6:	f7ee fd91 	bl	80001dc <__adddf3>
 80116ba:	4622      	mov	r2, r4
 80116bc:	462b      	mov	r3, r5
 80116be:	f7ee ff43 	bl	8000548 <__aeabi_dmul>
 80116c2:	a357      	add	r3, pc, #348	@ (adr r3, 8011820 <__kernel_tan+0x360>)
 80116c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c8:	f7ee fd88 	bl	80001dc <__adddf3>
 80116cc:	4622      	mov	r2, r4
 80116ce:	462b      	mov	r3, r5
 80116d0:	f7ee ff3a 	bl	8000548 <__aeabi_dmul>
 80116d4:	a354      	add	r3, pc, #336	@ (adr r3, 8011828 <__kernel_tan+0x368>)
 80116d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116da:	f7ee fd7f 	bl	80001dc <__adddf3>
 80116de:	4602      	mov	r2, r0
 80116e0:	460b      	mov	r3, r1
 80116e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116e6:	f7ee fd79 	bl	80001dc <__adddf3>
 80116ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116ee:	f7ee ff2b 	bl	8000548 <__aeabi_dmul>
 80116f2:	4642      	mov	r2, r8
 80116f4:	464b      	mov	r3, r9
 80116f6:	f7ee fd71 	bl	80001dc <__adddf3>
 80116fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116fe:	f7ee ff23 	bl	8000548 <__aeabi_dmul>
 8011702:	4642      	mov	r2, r8
 8011704:	464b      	mov	r3, r9
 8011706:	f7ee fd69 	bl	80001dc <__adddf3>
 801170a:	a349      	add	r3, pc, #292	@ (adr r3, 8011830 <__kernel_tan+0x370>)
 801170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011710:	4604      	mov	r4, r0
 8011712:	460d      	mov	r5, r1
 8011714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011718:	f7ee ff16 	bl	8000548 <__aeabi_dmul>
 801171c:	4622      	mov	r2, r4
 801171e:	462b      	mov	r3, r5
 8011720:	f7ee fd5c 	bl	80001dc <__adddf3>
 8011724:	e9cd 0100 	strd	r0, r1, [sp]
 8011728:	460b      	mov	r3, r1
 801172a:	4602      	mov	r2, r0
 801172c:	4659      	mov	r1, fp
 801172e:	4650      	mov	r0, sl
 8011730:	f7ee fd54 	bl	80001dc <__adddf3>
 8011734:	4b43      	ldr	r3, [pc, #268]	@ (8011844 <__kernel_tan+0x384>)
 8011736:	429f      	cmp	r7, r3
 8011738:	4604      	mov	r4, r0
 801173a:	460d      	mov	r5, r1
 801173c:	f240 8084 	bls.w	8011848 <__kernel_tan+0x388>
 8011740:	4630      	mov	r0, r6
 8011742:	f7ee fe97 	bl	8000474 <__aeabi_i2d>
 8011746:	4622      	mov	r2, r4
 8011748:	4680      	mov	r8, r0
 801174a:	4689      	mov	r9, r1
 801174c:	462b      	mov	r3, r5
 801174e:	4620      	mov	r0, r4
 8011750:	4629      	mov	r1, r5
 8011752:	f7ee fef9 	bl	8000548 <__aeabi_dmul>
 8011756:	4642      	mov	r2, r8
 8011758:	4606      	mov	r6, r0
 801175a:	460f      	mov	r7, r1
 801175c:	464b      	mov	r3, r9
 801175e:	4620      	mov	r0, r4
 8011760:	4629      	mov	r1, r5
 8011762:	f7ee fd3b 	bl	80001dc <__adddf3>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4630      	mov	r0, r6
 801176c:	4639      	mov	r1, r7
 801176e:	f7ef f815 	bl	800079c <__aeabi_ddiv>
 8011772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011776:	f7ee fd2f 	bl	80001d8 <__aeabi_dsub>
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	4650      	mov	r0, sl
 8011780:	4659      	mov	r1, fp
 8011782:	f7ee fd29 	bl	80001d8 <__aeabi_dsub>
 8011786:	4602      	mov	r2, r0
 8011788:	460b      	mov	r3, r1
 801178a:	f7ee fd27 	bl	80001dc <__adddf3>
 801178e:	4602      	mov	r2, r0
 8011790:	460b      	mov	r3, r1
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	f7ee fd1f 	bl	80001d8 <__aeabi_dsub>
 801179a:	9b02      	ldr	r3, [sp, #8]
 801179c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80117a0:	f00a 0a02 	and.w	sl, sl, #2
 80117a4:	4604      	mov	r4, r0
 80117a6:	f1ca 0001 	rsb	r0, sl, #1
 80117aa:	460d      	mov	r5, r1
 80117ac:	f7ee fe62 	bl	8000474 <__aeabi_i2d>
 80117b0:	4602      	mov	r2, r0
 80117b2:	460b      	mov	r3, r1
 80117b4:	4620      	mov	r0, r4
 80117b6:	4629      	mov	r1, r5
 80117b8:	f7ee fec6 	bl	8000548 <__aeabi_dmul>
 80117bc:	e6a5      	b.n	801150a <__kernel_tan+0x4a>
 80117be:	bf00      	nop
 80117c0:	54442d18 	.word	0x54442d18
 80117c4:	3fe921fb 	.word	0x3fe921fb
 80117c8:	33145c07 	.word	0x33145c07
 80117cc:	3c81a626 	.word	0x3c81a626
 80117d0:	74bf7ad4 	.word	0x74bf7ad4
 80117d4:	3efb2a70 	.word	0x3efb2a70
 80117d8:	32f0a7e9 	.word	0x32f0a7e9
 80117dc:	3f12b80f 	.word	0x3f12b80f
 80117e0:	1a8d1068 	.word	0x1a8d1068
 80117e4:	3f3026f7 	.word	0x3f3026f7
 80117e8:	fee08315 	.word	0xfee08315
 80117ec:	3f57dbc8 	.word	0x3f57dbc8
 80117f0:	e96e8493 	.word	0xe96e8493
 80117f4:	3f8226e3 	.word	0x3f8226e3
 80117f8:	1bb341fe 	.word	0x1bb341fe
 80117fc:	3faba1ba 	.word	0x3faba1ba
 8011800:	db605373 	.word	0xdb605373
 8011804:	bef375cb 	.word	0xbef375cb
 8011808:	a03792a6 	.word	0xa03792a6
 801180c:	3f147e88 	.word	0x3f147e88
 8011810:	f2f26501 	.word	0xf2f26501
 8011814:	3f4344d8 	.word	0x3f4344d8
 8011818:	c9560328 	.word	0xc9560328
 801181c:	3f6d6d22 	.word	0x3f6d6d22
 8011820:	8406d637 	.word	0x8406d637
 8011824:	3f9664f4 	.word	0x3f9664f4
 8011828:	1110fe7a 	.word	0x1110fe7a
 801182c:	3fc11111 	.word	0x3fc11111
 8011830:	55555563 	.word	0x55555563
 8011834:	3fd55555 	.word	0x3fd55555
 8011838:	3e2fffff 	.word	0x3e2fffff
 801183c:	3ff00000 	.word	0x3ff00000
 8011840:	bff00000 	.word	0xbff00000
 8011844:	3fe59427 	.word	0x3fe59427
 8011848:	2e01      	cmp	r6, #1
 801184a:	d033      	beq.n	80118b4 <__kernel_tan+0x3f4>
 801184c:	f04f 0800 	mov.w	r8, #0
 8011850:	4689      	mov	r9, r1
 8011852:	4602      	mov	r2, r0
 8011854:	460b      	mov	r3, r1
 8011856:	2000      	movs	r0, #0
 8011858:	4918      	ldr	r1, [pc, #96]	@ (80118bc <__kernel_tan+0x3fc>)
 801185a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801185e:	f7ee ff9d 	bl	800079c <__aeabi_ddiv>
 8011862:	4652      	mov	r2, sl
 8011864:	460f      	mov	r7, r1
 8011866:	465b      	mov	r3, fp
 8011868:	4606      	mov	r6, r0
 801186a:	460d      	mov	r5, r1
 801186c:	4640      	mov	r0, r8
 801186e:	4649      	mov	r1, r9
 8011870:	f7ee fcb2 	bl	80001d8 <__aeabi_dsub>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	e9dd 0100 	ldrd	r0, r1, [sp]
 801187c:	f7ee fcac 	bl	80001d8 <__aeabi_dsub>
 8011880:	4642      	mov	r2, r8
 8011882:	463b      	mov	r3, r7
 8011884:	f7ee fe60 	bl	8000548 <__aeabi_dmul>
 8011888:	4642      	mov	r2, r8
 801188a:	4682      	mov	sl, r0
 801188c:	468b      	mov	fp, r1
 801188e:	463b      	mov	r3, r7
 8011890:	4640      	mov	r0, r8
 8011892:	4649      	mov	r1, r9
 8011894:	f7ee fe58 	bl	8000548 <__aeabi_dmul>
 8011898:	4b09      	ldr	r3, [pc, #36]	@ (80118c0 <__kernel_tan+0x400>)
 801189a:	2200      	movs	r2, #0
 801189c:	f7ee fc9e 	bl	80001dc <__adddf3>
 80118a0:	4602      	mov	r2, r0
 80118a2:	460b      	mov	r3, r1
 80118a4:	4650      	mov	r0, sl
 80118a6:	4659      	mov	r1, fp
 80118a8:	f7ee fc98 	bl	80001dc <__adddf3>
 80118ac:	4644      	mov	r4, r8
 80118ae:	4632      	mov	r2, r6
 80118b0:	463b      	mov	r3, r7
 80118b2:	e66b      	b.n	801158c <__kernel_tan+0xcc>
 80118b4:	4682      	mov	sl, r0
 80118b6:	468b      	mov	fp, r1
 80118b8:	e629      	b.n	801150e <__kernel_tan+0x4e>
 80118ba:	bf00      	nop
 80118bc:	bff00000 	.word	0xbff00000
 80118c0:	3ff00000 	.word	0x3ff00000
 80118c4:	00000000 	.word	0x00000000

080118c8 <__ieee754_rem_pio2>:
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	ec57 6b10 	vmov	r6, r7, d0
 80118d0:	4bc5      	ldr	r3, [pc, #788]	@ (8011be8 <__ieee754_rem_pio2+0x320>)
 80118d2:	b08d      	sub	sp, #52	@ 0x34
 80118d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80118d8:	4598      	cmp	r8, r3
 80118da:	4604      	mov	r4, r0
 80118dc:	9704      	str	r7, [sp, #16]
 80118de:	d807      	bhi.n	80118f0 <__ieee754_rem_pio2+0x28>
 80118e0:	2200      	movs	r2, #0
 80118e2:	2300      	movs	r3, #0
 80118e4:	ed80 0b00 	vstr	d0, [r0]
 80118e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80118ec:	2500      	movs	r5, #0
 80118ee:	e028      	b.n	8011942 <__ieee754_rem_pio2+0x7a>
 80118f0:	4bbe      	ldr	r3, [pc, #760]	@ (8011bec <__ieee754_rem_pio2+0x324>)
 80118f2:	4598      	cmp	r8, r3
 80118f4:	d878      	bhi.n	80119e8 <__ieee754_rem_pio2+0x120>
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	4dbd      	ldr	r5, [pc, #756]	@ (8011bf0 <__ieee754_rem_pio2+0x328>)
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	4630      	mov	r0, r6
 80118fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2e8>)
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	4639      	mov	r1, r7
 8011906:	dd38      	ble.n	801197a <__ieee754_rem_pio2+0xb2>
 8011908:	f7ee fc66 	bl	80001d8 <__aeabi_dsub>
 801190c:	45a8      	cmp	r8, r5
 801190e:	4606      	mov	r6, r0
 8011910:	460f      	mov	r7, r1
 8011912:	d01a      	beq.n	801194a <__ieee754_rem_pio2+0x82>
 8011914:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011bb8 <__ieee754_rem_pio2+0x2f0>)
 8011916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191a:	f7ee fc5d 	bl	80001d8 <__aeabi_dsub>
 801191e:	4602      	mov	r2, r0
 8011920:	460b      	mov	r3, r1
 8011922:	4680      	mov	r8, r0
 8011924:	4689      	mov	r9, r1
 8011926:	4630      	mov	r0, r6
 8011928:	4639      	mov	r1, r7
 801192a:	f7ee fc55 	bl	80001d8 <__aeabi_dsub>
 801192e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011bb8 <__ieee754_rem_pio2+0x2f0>)
 8011930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011934:	f7ee fc50 	bl	80001d8 <__aeabi_dsub>
 8011938:	e9c4 8900 	strd	r8, r9, [r4]
 801193c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011940:	2501      	movs	r5, #1
 8011942:	4628      	mov	r0, r5
 8011944:	b00d      	add	sp, #52	@ 0x34
 8011946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194a:	a39d      	add	r3, pc, #628	@ (adr r3, 8011bc0 <__ieee754_rem_pio2+0x2f8>)
 801194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011950:	f7ee fc42 	bl	80001d8 <__aeabi_dsub>
 8011954:	a39c      	add	r3, pc, #624	@ (adr r3, 8011bc8 <__ieee754_rem_pio2+0x300>)
 8011956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195a:	4606      	mov	r6, r0
 801195c:	460f      	mov	r7, r1
 801195e:	f7ee fc3b 	bl	80001d8 <__aeabi_dsub>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	4680      	mov	r8, r0
 8011968:	4689      	mov	r9, r1
 801196a:	4630      	mov	r0, r6
 801196c:	4639      	mov	r1, r7
 801196e:	f7ee fc33 	bl	80001d8 <__aeabi_dsub>
 8011972:	a395      	add	r3, pc, #596	@ (adr r3, 8011bc8 <__ieee754_rem_pio2+0x300>)
 8011974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011978:	e7dc      	b.n	8011934 <__ieee754_rem_pio2+0x6c>
 801197a:	f7ee fc2f 	bl	80001dc <__adddf3>
 801197e:	45a8      	cmp	r8, r5
 8011980:	4606      	mov	r6, r0
 8011982:	460f      	mov	r7, r1
 8011984:	d018      	beq.n	80119b8 <__ieee754_rem_pio2+0xf0>
 8011986:	a38c      	add	r3, pc, #560	@ (adr r3, 8011bb8 <__ieee754_rem_pio2+0x2f0>)
 8011988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198c:	f7ee fc26 	bl	80001dc <__adddf3>
 8011990:	4602      	mov	r2, r0
 8011992:	460b      	mov	r3, r1
 8011994:	4680      	mov	r8, r0
 8011996:	4689      	mov	r9, r1
 8011998:	4630      	mov	r0, r6
 801199a:	4639      	mov	r1, r7
 801199c:	f7ee fc1c 	bl	80001d8 <__aeabi_dsub>
 80119a0:	a385      	add	r3, pc, #532	@ (adr r3, 8011bb8 <__ieee754_rem_pio2+0x2f0>)
 80119a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a6:	f7ee fc19 	bl	80001dc <__adddf3>
 80119aa:	f04f 35ff 	mov.w	r5, #4294967295
 80119ae:	e9c4 8900 	strd	r8, r9, [r4]
 80119b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80119b6:	e7c4      	b.n	8011942 <__ieee754_rem_pio2+0x7a>
 80119b8:	a381      	add	r3, pc, #516	@ (adr r3, 8011bc0 <__ieee754_rem_pio2+0x2f8>)
 80119ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119be:	f7ee fc0d 	bl	80001dc <__adddf3>
 80119c2:	a381      	add	r3, pc, #516	@ (adr r3, 8011bc8 <__ieee754_rem_pio2+0x300>)
 80119c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c8:	4606      	mov	r6, r0
 80119ca:	460f      	mov	r7, r1
 80119cc:	f7ee fc06 	bl	80001dc <__adddf3>
 80119d0:	4602      	mov	r2, r0
 80119d2:	460b      	mov	r3, r1
 80119d4:	4680      	mov	r8, r0
 80119d6:	4689      	mov	r9, r1
 80119d8:	4630      	mov	r0, r6
 80119da:	4639      	mov	r1, r7
 80119dc:	f7ee fbfc 	bl	80001d8 <__aeabi_dsub>
 80119e0:	a379      	add	r3, pc, #484	@ (adr r3, 8011bc8 <__ieee754_rem_pio2+0x300>)
 80119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e6:	e7de      	b.n	80119a6 <__ieee754_rem_pio2+0xde>
 80119e8:	4b82      	ldr	r3, [pc, #520]	@ (8011bf4 <__ieee754_rem_pio2+0x32c>)
 80119ea:	4598      	cmp	r8, r3
 80119ec:	f200 80d1 	bhi.w	8011b92 <__ieee754_rem_pio2+0x2ca>
 80119f0:	f000 f966 	bl	8011cc0 <fabs>
 80119f4:	ec57 6b10 	vmov	r6, r7, d0
 80119f8:	a375      	add	r3, pc, #468	@ (adr r3, 8011bd0 <__ieee754_rem_pio2+0x308>)
 80119fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fe:	4630      	mov	r0, r6
 8011a00:	4639      	mov	r1, r7
 8011a02:	f7ee fda1 	bl	8000548 <__aeabi_dmul>
 8011a06:	4b7c      	ldr	r3, [pc, #496]	@ (8011bf8 <__ieee754_rem_pio2+0x330>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f7ee fbe7 	bl	80001dc <__adddf3>
 8011a0e:	f7ef f835 	bl	8000a7c <__aeabi_d2iz>
 8011a12:	4605      	mov	r5, r0
 8011a14:	f7ee fd2e 	bl	8000474 <__aeabi_i2d>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a20:	a363      	add	r3, pc, #396	@ (adr r3, 8011bb0 <__ieee754_rem_pio2+0x2e8>)
 8011a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a26:	f7ee fd8f 	bl	8000548 <__aeabi_dmul>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	4630      	mov	r0, r6
 8011a30:	4639      	mov	r1, r7
 8011a32:	f7ee fbd1 	bl	80001d8 <__aeabi_dsub>
 8011a36:	a360      	add	r3, pc, #384	@ (adr r3, 8011bb8 <__ieee754_rem_pio2+0x2f0>)
 8011a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3c:	4682      	mov	sl, r0
 8011a3e:	468b      	mov	fp, r1
 8011a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a44:	f7ee fd80 	bl	8000548 <__aeabi_dmul>
 8011a48:	2d1f      	cmp	r5, #31
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	460f      	mov	r7, r1
 8011a4e:	dc0c      	bgt.n	8011a6a <__ieee754_rem_pio2+0x1a2>
 8011a50:	4b6a      	ldr	r3, [pc, #424]	@ (8011bfc <__ieee754_rem_pio2+0x334>)
 8011a52:	1e6a      	subs	r2, r5, #1
 8011a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a58:	4543      	cmp	r3, r8
 8011a5a:	d006      	beq.n	8011a6a <__ieee754_rem_pio2+0x1a2>
 8011a5c:	4632      	mov	r2, r6
 8011a5e:	463b      	mov	r3, r7
 8011a60:	4650      	mov	r0, sl
 8011a62:	4659      	mov	r1, fp
 8011a64:	f7ee fbb8 	bl	80001d8 <__aeabi_dsub>
 8011a68:	e00e      	b.n	8011a88 <__ieee754_rem_pio2+0x1c0>
 8011a6a:	463b      	mov	r3, r7
 8011a6c:	4632      	mov	r2, r6
 8011a6e:	4650      	mov	r0, sl
 8011a70:	4659      	mov	r1, fp
 8011a72:	f7ee fbb1 	bl	80001d8 <__aeabi_dsub>
 8011a76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011a7a:	9305      	str	r3, [sp, #20]
 8011a7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011a80:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011a84:	2b10      	cmp	r3, #16
 8011a86:	dc02      	bgt.n	8011a8e <__ieee754_rem_pio2+0x1c6>
 8011a88:	e9c4 0100 	strd	r0, r1, [r4]
 8011a8c:	e039      	b.n	8011b02 <__ieee754_rem_pio2+0x23a>
 8011a8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8011bc0 <__ieee754_rem_pio2+0x2f8>)
 8011a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a98:	f7ee fd56 	bl	8000548 <__aeabi_dmul>
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	460f      	mov	r7, r1
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	4650      	mov	r0, sl
 8011aa6:	4659      	mov	r1, fp
 8011aa8:	f7ee fb96 	bl	80001d8 <__aeabi_dsub>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	4680      	mov	r8, r0
 8011ab2:	4689      	mov	r9, r1
 8011ab4:	4650      	mov	r0, sl
 8011ab6:	4659      	mov	r1, fp
 8011ab8:	f7ee fb8e 	bl	80001d8 <__aeabi_dsub>
 8011abc:	4632      	mov	r2, r6
 8011abe:	463b      	mov	r3, r7
 8011ac0:	f7ee fb8a 	bl	80001d8 <__aeabi_dsub>
 8011ac4:	a340      	add	r3, pc, #256	@ (adr r3, 8011bc8 <__ieee754_rem_pio2+0x300>)
 8011ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aca:	4606      	mov	r6, r0
 8011acc:	460f      	mov	r7, r1
 8011ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ad2:	f7ee fd39 	bl	8000548 <__aeabi_dmul>
 8011ad6:	4632      	mov	r2, r6
 8011ad8:	463b      	mov	r3, r7
 8011ada:	f7ee fb7d 	bl	80001d8 <__aeabi_dsub>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	4606      	mov	r6, r0
 8011ae4:	460f      	mov	r7, r1
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	4649      	mov	r1, r9
 8011aea:	f7ee fb75 	bl	80001d8 <__aeabi_dsub>
 8011aee:	9a05      	ldr	r2, [sp, #20]
 8011af0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	2b31      	cmp	r3, #49	@ 0x31
 8011af8:	dc20      	bgt.n	8011b3c <__ieee754_rem_pio2+0x274>
 8011afa:	e9c4 0100 	strd	r0, r1, [r4]
 8011afe:	46c2      	mov	sl, r8
 8011b00:	46cb      	mov	fp, r9
 8011b02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011b06:	4650      	mov	r0, sl
 8011b08:	4642      	mov	r2, r8
 8011b0a:	464b      	mov	r3, r9
 8011b0c:	4659      	mov	r1, fp
 8011b0e:	f7ee fb63 	bl	80001d8 <__aeabi_dsub>
 8011b12:	463b      	mov	r3, r7
 8011b14:	4632      	mov	r2, r6
 8011b16:	f7ee fb5f 	bl	80001d8 <__aeabi_dsub>
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011b22:	f6bf af0e 	bge.w	8011942 <__ieee754_rem_pio2+0x7a>
 8011b26:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011b2a:	6063      	str	r3, [r4, #4]
 8011b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011b30:	f8c4 8000 	str.w	r8, [r4]
 8011b34:	60a0      	str	r0, [r4, #8]
 8011b36:	60e3      	str	r3, [r4, #12]
 8011b38:	426d      	negs	r5, r5
 8011b3a:	e702      	b.n	8011942 <__ieee754_rem_pio2+0x7a>
 8011b3c:	a326      	add	r3, pc, #152	@ (adr r3, 8011bd8 <__ieee754_rem_pio2+0x310>)
 8011b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b46:	f7ee fcff 	bl	8000548 <__aeabi_dmul>
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	460f      	mov	r7, r1
 8011b4e:	4602      	mov	r2, r0
 8011b50:	460b      	mov	r3, r1
 8011b52:	4640      	mov	r0, r8
 8011b54:	4649      	mov	r1, r9
 8011b56:	f7ee fb3f 	bl	80001d8 <__aeabi_dsub>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	4682      	mov	sl, r0
 8011b60:	468b      	mov	fp, r1
 8011b62:	4640      	mov	r0, r8
 8011b64:	4649      	mov	r1, r9
 8011b66:	f7ee fb37 	bl	80001d8 <__aeabi_dsub>
 8011b6a:	4632      	mov	r2, r6
 8011b6c:	463b      	mov	r3, r7
 8011b6e:	f7ee fb33 	bl	80001d8 <__aeabi_dsub>
 8011b72:	a31b      	add	r3, pc, #108	@ (adr r3, 8011be0 <__ieee754_rem_pio2+0x318>)
 8011b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b78:	4606      	mov	r6, r0
 8011b7a:	460f      	mov	r7, r1
 8011b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b80:	f7ee fce2 	bl	8000548 <__aeabi_dmul>
 8011b84:	4632      	mov	r2, r6
 8011b86:	463b      	mov	r3, r7
 8011b88:	f7ee fb26 	bl	80001d8 <__aeabi_dsub>
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	460f      	mov	r7, r1
 8011b90:	e764      	b.n	8011a5c <__ieee754_rem_pio2+0x194>
 8011b92:	4b1b      	ldr	r3, [pc, #108]	@ (8011c00 <__ieee754_rem_pio2+0x338>)
 8011b94:	4598      	cmp	r8, r3
 8011b96:	d935      	bls.n	8011c04 <__ieee754_rem_pio2+0x33c>
 8011b98:	4632      	mov	r2, r6
 8011b9a:	463b      	mov	r3, r7
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	f7ee fb1a 	bl	80001d8 <__aeabi_dsub>
 8011ba4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011ba8:	e9c4 0100 	strd	r0, r1, [r4]
 8011bac:	e69e      	b.n	80118ec <__ieee754_rem_pio2+0x24>
 8011bae:	bf00      	nop
 8011bb0:	54400000 	.word	0x54400000
 8011bb4:	3ff921fb 	.word	0x3ff921fb
 8011bb8:	1a626331 	.word	0x1a626331
 8011bbc:	3dd0b461 	.word	0x3dd0b461
 8011bc0:	1a600000 	.word	0x1a600000
 8011bc4:	3dd0b461 	.word	0x3dd0b461
 8011bc8:	2e037073 	.word	0x2e037073
 8011bcc:	3ba3198a 	.word	0x3ba3198a
 8011bd0:	6dc9c883 	.word	0x6dc9c883
 8011bd4:	3fe45f30 	.word	0x3fe45f30
 8011bd8:	2e000000 	.word	0x2e000000
 8011bdc:	3ba3198a 	.word	0x3ba3198a
 8011be0:	252049c1 	.word	0x252049c1
 8011be4:	397b839a 	.word	0x397b839a
 8011be8:	3fe921fb 	.word	0x3fe921fb
 8011bec:	4002d97b 	.word	0x4002d97b
 8011bf0:	3ff921fb 	.word	0x3ff921fb
 8011bf4:	413921fb 	.word	0x413921fb
 8011bf8:	3fe00000 	.word	0x3fe00000
 8011bfc:	08012af4 	.word	0x08012af4
 8011c00:	7fefffff 	.word	0x7fefffff
 8011c04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011c08:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8011c0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011c10:	4630      	mov	r0, r6
 8011c12:	460f      	mov	r7, r1
 8011c14:	f7ee ff32 	bl	8000a7c <__aeabi_d2iz>
 8011c18:	f7ee fc2c 	bl	8000474 <__aeabi_i2d>
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	4630      	mov	r0, r6
 8011c22:	4639      	mov	r1, r7
 8011c24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c28:	f7ee fad6 	bl	80001d8 <__aeabi_dsub>
 8011c2c:	4b22      	ldr	r3, [pc, #136]	@ (8011cb8 <__ieee754_rem_pio2+0x3f0>)
 8011c2e:	2200      	movs	r2, #0
 8011c30:	f7ee fc8a 	bl	8000548 <__aeabi_dmul>
 8011c34:	460f      	mov	r7, r1
 8011c36:	4606      	mov	r6, r0
 8011c38:	f7ee ff20 	bl	8000a7c <__aeabi_d2iz>
 8011c3c:	f7ee fc1a 	bl	8000474 <__aeabi_i2d>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4630      	mov	r0, r6
 8011c46:	4639      	mov	r1, r7
 8011c48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011c4c:	f7ee fac4 	bl	80001d8 <__aeabi_dsub>
 8011c50:	4b19      	ldr	r3, [pc, #100]	@ (8011cb8 <__ieee754_rem_pio2+0x3f0>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	f7ee fc78 	bl	8000548 <__aeabi_dmul>
 8011c58:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011c5c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011c60:	f04f 0803 	mov.w	r8, #3
 8011c64:	2600      	movs	r6, #0
 8011c66:	2700      	movs	r7, #0
 8011c68:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011c6c:	4632      	mov	r2, r6
 8011c6e:	463b      	mov	r3, r7
 8011c70:	46c2      	mov	sl, r8
 8011c72:	f108 38ff 	add.w	r8, r8, #4294967295
 8011c76:	f7ee fecf 	bl	8000a18 <__aeabi_dcmpeq>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d1f4      	bne.n	8011c68 <__ieee754_rem_pio2+0x3a0>
 8011c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8011cbc <__ieee754_rem_pio2+0x3f4>)
 8011c80:	9301      	str	r3, [sp, #4]
 8011c82:	2302      	movs	r3, #2
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	462a      	mov	r2, r5
 8011c88:	4653      	mov	r3, sl
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	a806      	add	r0, sp, #24
 8011c8e:	f000 f81f 	bl	8011cd0 <__kernel_rem_pio2>
 8011c92:	9b04      	ldr	r3, [sp, #16]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	4605      	mov	r5, r0
 8011c98:	f6bf ae53 	bge.w	8011942 <__ieee754_rem_pio2+0x7a>
 8011c9c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011ca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011ca4:	e9c4 2300 	strd	r2, r3, [r4]
 8011ca8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011cb0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011cb4:	e740      	b.n	8011b38 <__ieee754_rem_pio2+0x270>
 8011cb6:	bf00      	nop
 8011cb8:	41700000 	.word	0x41700000
 8011cbc:	08012b74 	.word	0x08012b74

08011cc0 <fabs>:
 8011cc0:	ec51 0b10 	vmov	r0, r1, d0
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011cca:	ec43 2b10 	vmov	d0, r2, r3
 8011cce:	4770      	bx	lr

08011cd0 <__kernel_rem_pio2>:
 8011cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd4:	ed2d 8b02 	vpush	{d8}
 8011cd8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011cdc:	f112 0f14 	cmn.w	r2, #20
 8011ce0:	9306      	str	r3, [sp, #24]
 8011ce2:	9104      	str	r1, [sp, #16]
 8011ce4:	4bc2      	ldr	r3, [pc, #776]	@ (8011ff0 <__kernel_rem_pio2+0x320>)
 8011ce6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011ce8:	9008      	str	r0, [sp, #32]
 8011cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	9b06      	ldr	r3, [sp, #24]
 8011cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011cf6:	bfa8      	it	ge
 8011cf8:	1ed4      	subge	r4, r2, #3
 8011cfa:	9305      	str	r3, [sp, #20]
 8011cfc:	bfb2      	itee	lt
 8011cfe:	2400      	movlt	r4, #0
 8011d00:	2318      	movge	r3, #24
 8011d02:	fb94 f4f3 	sdivge	r4, r4, r3
 8011d06:	f06f 0317 	mvn.w	r3, #23
 8011d0a:	fb04 3303 	mla	r3, r4, r3, r3
 8011d0e:	eb03 0b02 	add.w	fp, r3, r2
 8011d12:	9b00      	ldr	r3, [sp, #0]
 8011d14:	9a05      	ldr	r2, [sp, #20]
 8011d16:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8011fe0 <__kernel_rem_pio2+0x310>
 8011d1a:	eb03 0802 	add.w	r8, r3, r2
 8011d1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011d20:	1aa7      	subs	r7, r4, r2
 8011d22:	ae20      	add	r6, sp, #128	@ 0x80
 8011d24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011d28:	2500      	movs	r5, #0
 8011d2a:	4545      	cmp	r5, r8
 8011d2c:	dd12      	ble.n	8011d54 <__kernel_rem_pio2+0x84>
 8011d2e:	9b06      	ldr	r3, [sp, #24]
 8011d30:	aa20      	add	r2, sp, #128	@ 0x80
 8011d32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011d36:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011d3a:	2700      	movs	r7, #0
 8011d3c:	9b00      	ldr	r3, [sp, #0]
 8011d3e:	429f      	cmp	r7, r3
 8011d40:	dc2e      	bgt.n	8011da0 <__kernel_rem_pio2+0xd0>
 8011d42:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8011fe0 <__kernel_rem_pio2+0x310>
 8011d46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d4e:	46a8      	mov	r8, r5
 8011d50:	2600      	movs	r6, #0
 8011d52:	e01b      	b.n	8011d8c <__kernel_rem_pio2+0xbc>
 8011d54:	42ef      	cmn	r7, r5
 8011d56:	d407      	bmi.n	8011d68 <__kernel_rem_pio2+0x98>
 8011d58:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011d5c:	f7ee fb8a 	bl	8000474 <__aeabi_i2d>
 8011d60:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011d64:	3501      	adds	r5, #1
 8011d66:	e7e0      	b.n	8011d2a <__kernel_rem_pio2+0x5a>
 8011d68:	ec51 0b18 	vmov	r0, r1, d8
 8011d6c:	e7f8      	b.n	8011d60 <__kernel_rem_pio2+0x90>
 8011d6e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011d72:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011d76:	f7ee fbe7 	bl	8000548 <__aeabi_dmul>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d82:	f7ee fa2b 	bl	80001dc <__adddf3>
 8011d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d8a:	3601      	adds	r6, #1
 8011d8c:	9b05      	ldr	r3, [sp, #20]
 8011d8e:	429e      	cmp	r6, r3
 8011d90:	dded      	ble.n	8011d6e <__kernel_rem_pio2+0x9e>
 8011d92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d96:	3701      	adds	r7, #1
 8011d98:	ecaa 7b02 	vstmia	sl!, {d7}
 8011d9c:	3508      	adds	r5, #8
 8011d9e:	e7cd      	b.n	8011d3c <__kernel_rem_pio2+0x6c>
 8011da0:	9b00      	ldr	r3, [sp, #0]
 8011da2:	f8dd 8000 	ldr.w	r8, [sp]
 8011da6:	aa0c      	add	r2, sp, #48	@ 0x30
 8011da8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8011dae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011db0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011db6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dbc:	ab98      	add	r3, sp, #608	@ 0x260
 8011dbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011dc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011dc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011dca:	ac0c      	add	r4, sp, #48	@ 0x30
 8011dcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011dce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011dd2:	46a1      	mov	r9, r4
 8011dd4:	46c2      	mov	sl, r8
 8011dd6:	f1ba 0f00 	cmp.w	sl, #0
 8011dda:	dc77      	bgt.n	8011ecc <__kernel_rem_pio2+0x1fc>
 8011ddc:	4658      	mov	r0, fp
 8011dde:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011de2:	f000 fac5 	bl	8012370 <scalbn>
 8011de6:	ec57 6b10 	vmov	r6, r7, d0
 8011dea:	2200      	movs	r2, #0
 8011dec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011df0:	4630      	mov	r0, r6
 8011df2:	4639      	mov	r1, r7
 8011df4:	f7ee fba8 	bl	8000548 <__aeabi_dmul>
 8011df8:	ec41 0b10 	vmov	d0, r0, r1
 8011dfc:	f000 fb34 	bl	8012468 <floor>
 8011e00:	4b7c      	ldr	r3, [pc, #496]	@ (8011ff4 <__kernel_rem_pio2+0x324>)
 8011e02:	ec51 0b10 	vmov	r0, r1, d0
 8011e06:	2200      	movs	r2, #0
 8011e08:	f7ee fb9e 	bl	8000548 <__aeabi_dmul>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4630      	mov	r0, r6
 8011e12:	4639      	mov	r1, r7
 8011e14:	f7ee f9e0 	bl	80001d8 <__aeabi_dsub>
 8011e18:	460f      	mov	r7, r1
 8011e1a:	4606      	mov	r6, r0
 8011e1c:	f7ee fe2e 	bl	8000a7c <__aeabi_d2iz>
 8011e20:	9002      	str	r0, [sp, #8]
 8011e22:	f7ee fb27 	bl	8000474 <__aeabi_i2d>
 8011e26:	4602      	mov	r2, r0
 8011e28:	460b      	mov	r3, r1
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	4639      	mov	r1, r7
 8011e2e:	f7ee f9d3 	bl	80001d8 <__aeabi_dsub>
 8011e32:	f1bb 0f00 	cmp.w	fp, #0
 8011e36:	4606      	mov	r6, r0
 8011e38:	460f      	mov	r7, r1
 8011e3a:	dd6c      	ble.n	8011f16 <__kernel_rem_pio2+0x246>
 8011e3c:	f108 31ff 	add.w	r1, r8, #4294967295
 8011e40:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e42:	9d02      	ldr	r5, [sp, #8]
 8011e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e48:	f1cb 0018 	rsb	r0, fp, #24
 8011e4c:	fa43 f200 	asr.w	r2, r3, r0
 8011e50:	4415      	add	r5, r2
 8011e52:	4082      	lsls	r2, r0
 8011e54:	1a9b      	subs	r3, r3, r2
 8011e56:	aa0c      	add	r2, sp, #48	@ 0x30
 8011e58:	9502      	str	r5, [sp, #8]
 8011e5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011e5e:	f1cb 0217 	rsb	r2, fp, #23
 8011e62:	fa43 f902 	asr.w	r9, r3, r2
 8011e66:	f1b9 0f00 	cmp.w	r9, #0
 8011e6a:	dd64      	ble.n	8011f36 <__kernel_rem_pio2+0x266>
 8011e6c:	9b02      	ldr	r3, [sp, #8]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	3301      	adds	r3, #1
 8011e72:	9302      	str	r3, [sp, #8]
 8011e74:	4615      	mov	r5, r2
 8011e76:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011e7a:	4590      	cmp	r8, r2
 8011e7c:	f300 80a1 	bgt.w	8011fc2 <__kernel_rem_pio2+0x2f2>
 8011e80:	f1bb 0f00 	cmp.w	fp, #0
 8011e84:	dd07      	ble.n	8011e96 <__kernel_rem_pio2+0x1c6>
 8011e86:	f1bb 0f01 	cmp.w	fp, #1
 8011e8a:	f000 80c1 	beq.w	8012010 <__kernel_rem_pio2+0x340>
 8011e8e:	f1bb 0f02 	cmp.w	fp, #2
 8011e92:	f000 80c8 	beq.w	8012026 <__kernel_rem_pio2+0x356>
 8011e96:	f1b9 0f02 	cmp.w	r9, #2
 8011e9a:	d14c      	bne.n	8011f36 <__kernel_rem_pio2+0x266>
 8011e9c:	4632      	mov	r2, r6
 8011e9e:	463b      	mov	r3, r7
 8011ea0:	4955      	ldr	r1, [pc, #340]	@ (8011ff8 <__kernel_rem_pio2+0x328>)
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	f7ee f998 	bl	80001d8 <__aeabi_dsub>
 8011ea8:	4606      	mov	r6, r0
 8011eaa:	460f      	mov	r7, r1
 8011eac:	2d00      	cmp	r5, #0
 8011eae:	d042      	beq.n	8011f36 <__kernel_rem_pio2+0x266>
 8011eb0:	4658      	mov	r0, fp
 8011eb2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8011fe8 <__kernel_rem_pio2+0x318>
 8011eb6:	f000 fa5b 	bl	8012370 <scalbn>
 8011eba:	4630      	mov	r0, r6
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	ec53 2b10 	vmov	r2, r3, d0
 8011ec2:	f7ee f989 	bl	80001d8 <__aeabi_dsub>
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	460f      	mov	r7, r1
 8011eca:	e034      	b.n	8011f36 <__kernel_rem_pio2+0x266>
 8011ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8011ffc <__kernel_rem_pio2+0x32c>)
 8011ece:	2200      	movs	r2, #0
 8011ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ed4:	f7ee fb38 	bl	8000548 <__aeabi_dmul>
 8011ed8:	f7ee fdd0 	bl	8000a7c <__aeabi_d2iz>
 8011edc:	f7ee faca 	bl	8000474 <__aeabi_i2d>
 8011ee0:	4b47      	ldr	r3, [pc, #284]	@ (8012000 <__kernel_rem_pio2+0x330>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460f      	mov	r7, r1
 8011ee8:	f7ee fb2e 	bl	8000548 <__aeabi_dmul>
 8011eec:	4602      	mov	r2, r0
 8011eee:	460b      	mov	r3, r1
 8011ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ef4:	f7ee f970 	bl	80001d8 <__aeabi_dsub>
 8011ef8:	f7ee fdc0 	bl	8000a7c <__aeabi_d2iz>
 8011efc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011f00:	f849 0b04 	str.w	r0, [r9], #4
 8011f04:	4639      	mov	r1, r7
 8011f06:	4630      	mov	r0, r6
 8011f08:	f7ee f968 	bl	80001dc <__adddf3>
 8011f0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f14:	e75f      	b.n	8011dd6 <__kernel_rem_pio2+0x106>
 8011f16:	d107      	bne.n	8011f28 <__kernel_rem_pio2+0x258>
 8011f18:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f1c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f22:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011f26:	e79e      	b.n	8011e66 <__kernel_rem_pio2+0x196>
 8011f28:	4b36      	ldr	r3, [pc, #216]	@ (8012004 <__kernel_rem_pio2+0x334>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f7ee fd92 	bl	8000a54 <__aeabi_dcmpge>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d143      	bne.n	8011fbc <__kernel_rem_pio2+0x2ec>
 8011f34:	4681      	mov	r9, r0
 8011f36:	2200      	movs	r2, #0
 8011f38:	2300      	movs	r3, #0
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	4639      	mov	r1, r7
 8011f3e:	f7ee fd6b 	bl	8000a18 <__aeabi_dcmpeq>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	f000 80c1 	beq.w	80120ca <__kernel_rem_pio2+0x3fa>
 8011f48:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	9900      	ldr	r1, [sp, #0]
 8011f50:	428b      	cmp	r3, r1
 8011f52:	da70      	bge.n	8012036 <__kernel_rem_pio2+0x366>
 8011f54:	2a00      	cmp	r2, #0
 8011f56:	f000 808b 	beq.w	8012070 <__kernel_rem_pio2+0x3a0>
 8011f5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f60:	f1ab 0b18 	sub.w	fp, fp, #24
 8011f64:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d0f6      	beq.n	8011f5a <__kernel_rem_pio2+0x28a>
 8011f6c:	4658      	mov	r0, fp
 8011f6e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8011fe8 <__kernel_rem_pio2+0x318>
 8011f72:	f000 f9fd 	bl	8012370 <scalbn>
 8011f76:	f108 0301 	add.w	r3, r8, #1
 8011f7a:	00da      	lsls	r2, r3, #3
 8011f7c:	9205      	str	r2, [sp, #20]
 8011f7e:	ec55 4b10 	vmov	r4, r5, d0
 8011f82:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011f84:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8011ffc <__kernel_rem_pio2+0x32c>
 8011f88:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011f8c:	4646      	mov	r6, r8
 8011f8e:	f04f 0a00 	mov.w	sl, #0
 8011f92:	2e00      	cmp	r6, #0
 8011f94:	f280 80d1 	bge.w	801213a <__kernel_rem_pio2+0x46a>
 8011f98:	4644      	mov	r4, r8
 8011f9a:	2c00      	cmp	r4, #0
 8011f9c:	f2c0 80ff 	blt.w	801219e <__kernel_rem_pio2+0x4ce>
 8011fa0:	4b19      	ldr	r3, [pc, #100]	@ (8012008 <__kernel_rem_pio2+0x338>)
 8011fa2:	461f      	mov	r7, r3
 8011fa4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011fa6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011faa:	9306      	str	r3, [sp, #24]
 8011fac:	f04f 0a00 	mov.w	sl, #0
 8011fb0:	f04f 0b00 	mov.w	fp, #0
 8011fb4:	2600      	movs	r6, #0
 8011fb6:	eba8 0504 	sub.w	r5, r8, r4
 8011fba:	e0e4      	b.n	8012186 <__kernel_rem_pio2+0x4b6>
 8011fbc:	f04f 0902 	mov.w	r9, #2
 8011fc0:	e754      	b.n	8011e6c <__kernel_rem_pio2+0x19c>
 8011fc2:	f854 3b04 	ldr.w	r3, [r4], #4
 8011fc6:	bb0d      	cbnz	r5, 801200c <__kernel_rem_pio2+0x33c>
 8011fc8:	b123      	cbz	r3, 8011fd4 <__kernel_rem_pio2+0x304>
 8011fca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	3201      	adds	r2, #1
 8011fd6:	461d      	mov	r5, r3
 8011fd8:	e74f      	b.n	8011e7a <__kernel_rem_pio2+0x1aa>
 8011fda:	bf00      	nop
 8011fdc:	f3af 8000 	nop.w
	...
 8011fec:	3ff00000 	.word	0x3ff00000
 8011ff0:	08012cc0 	.word	0x08012cc0
 8011ff4:	40200000 	.word	0x40200000
 8011ff8:	3ff00000 	.word	0x3ff00000
 8011ffc:	3e700000 	.word	0x3e700000
 8012000:	41700000 	.word	0x41700000
 8012004:	3fe00000 	.word	0x3fe00000
 8012008:	08012c80 	.word	0x08012c80
 801200c:	1acb      	subs	r3, r1, r3
 801200e:	e7de      	b.n	8011fce <__kernel_rem_pio2+0x2fe>
 8012010:	f108 32ff 	add.w	r2, r8, #4294967295
 8012014:	ab0c      	add	r3, sp, #48	@ 0x30
 8012016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801201a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801201e:	a90c      	add	r1, sp, #48	@ 0x30
 8012020:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012024:	e737      	b.n	8011e96 <__kernel_rem_pio2+0x1c6>
 8012026:	f108 32ff 	add.w	r2, r8, #4294967295
 801202a:	ab0c      	add	r3, sp, #48	@ 0x30
 801202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012030:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012034:	e7f3      	b.n	801201e <__kernel_rem_pio2+0x34e>
 8012036:	a90c      	add	r1, sp, #48	@ 0x30
 8012038:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801203c:	3b01      	subs	r3, #1
 801203e:	430a      	orrs	r2, r1
 8012040:	e785      	b.n	8011f4e <__kernel_rem_pio2+0x27e>
 8012042:	3401      	adds	r4, #1
 8012044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012048:	2a00      	cmp	r2, #0
 801204a:	d0fa      	beq.n	8012042 <__kernel_rem_pio2+0x372>
 801204c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801204e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012052:	eb0d 0503 	add.w	r5, sp, r3
 8012056:	9b06      	ldr	r3, [sp, #24]
 8012058:	aa20      	add	r2, sp, #128	@ 0x80
 801205a:	4443      	add	r3, r8
 801205c:	f108 0701 	add.w	r7, r8, #1
 8012060:	3d98      	subs	r5, #152	@ 0x98
 8012062:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012066:	4444      	add	r4, r8
 8012068:	42bc      	cmp	r4, r7
 801206a:	da04      	bge.n	8012076 <__kernel_rem_pio2+0x3a6>
 801206c:	46a0      	mov	r8, r4
 801206e:	e6a2      	b.n	8011db6 <__kernel_rem_pio2+0xe6>
 8012070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012072:	2401      	movs	r4, #1
 8012074:	e7e6      	b.n	8012044 <__kernel_rem_pio2+0x374>
 8012076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012078:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801207c:	f7ee f9fa 	bl	8000474 <__aeabi_i2d>
 8012080:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8012340 <__kernel_rem_pio2+0x670>
 8012084:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012088:	ed8d 7b02 	vstr	d7, [sp, #8]
 801208c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012090:	46b2      	mov	sl, r6
 8012092:	f04f 0800 	mov.w	r8, #0
 8012096:	9b05      	ldr	r3, [sp, #20]
 8012098:	4598      	cmp	r8, r3
 801209a:	dd05      	ble.n	80120a8 <__kernel_rem_pio2+0x3d8>
 801209c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120a0:	3701      	adds	r7, #1
 80120a2:	eca5 7b02 	vstmia	r5!, {d7}
 80120a6:	e7df      	b.n	8012068 <__kernel_rem_pio2+0x398>
 80120a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80120ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80120b0:	f7ee fa4a 	bl	8000548 <__aeabi_dmul>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120bc:	f7ee f88e 	bl	80001dc <__adddf3>
 80120c0:	f108 0801 	add.w	r8, r8, #1
 80120c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120c8:	e7e5      	b.n	8012096 <__kernel_rem_pio2+0x3c6>
 80120ca:	f1cb 0000 	rsb	r0, fp, #0
 80120ce:	ec47 6b10 	vmov	d0, r6, r7
 80120d2:	f000 f94d 	bl	8012370 <scalbn>
 80120d6:	ec55 4b10 	vmov	r4, r5, d0
 80120da:	4b9b      	ldr	r3, [pc, #620]	@ (8012348 <__kernel_rem_pio2+0x678>)
 80120dc:	2200      	movs	r2, #0
 80120de:	4620      	mov	r0, r4
 80120e0:	4629      	mov	r1, r5
 80120e2:	f7ee fcb7 	bl	8000a54 <__aeabi_dcmpge>
 80120e6:	b300      	cbz	r0, 801212a <__kernel_rem_pio2+0x45a>
 80120e8:	4b98      	ldr	r3, [pc, #608]	@ (801234c <__kernel_rem_pio2+0x67c>)
 80120ea:	2200      	movs	r2, #0
 80120ec:	4620      	mov	r0, r4
 80120ee:	4629      	mov	r1, r5
 80120f0:	f7ee fa2a 	bl	8000548 <__aeabi_dmul>
 80120f4:	f7ee fcc2 	bl	8000a7c <__aeabi_d2iz>
 80120f8:	4606      	mov	r6, r0
 80120fa:	f7ee f9bb 	bl	8000474 <__aeabi_i2d>
 80120fe:	4b92      	ldr	r3, [pc, #584]	@ (8012348 <__kernel_rem_pio2+0x678>)
 8012100:	2200      	movs	r2, #0
 8012102:	f7ee fa21 	bl	8000548 <__aeabi_dmul>
 8012106:	460b      	mov	r3, r1
 8012108:	4602      	mov	r2, r0
 801210a:	4629      	mov	r1, r5
 801210c:	4620      	mov	r0, r4
 801210e:	f7ee f863 	bl	80001d8 <__aeabi_dsub>
 8012112:	f7ee fcb3 	bl	8000a7c <__aeabi_d2iz>
 8012116:	ab0c      	add	r3, sp, #48	@ 0x30
 8012118:	f10b 0b18 	add.w	fp, fp, #24
 801211c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012120:	f108 0801 	add.w	r8, r8, #1
 8012124:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012128:	e720      	b.n	8011f6c <__kernel_rem_pio2+0x29c>
 801212a:	4620      	mov	r0, r4
 801212c:	4629      	mov	r1, r5
 801212e:	f7ee fca5 	bl	8000a7c <__aeabi_d2iz>
 8012132:	ab0c      	add	r3, sp, #48	@ 0x30
 8012134:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012138:	e718      	b.n	8011f6c <__kernel_rem_pio2+0x29c>
 801213a:	ab0c      	add	r3, sp, #48	@ 0x30
 801213c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012140:	f7ee f998 	bl	8000474 <__aeabi_i2d>
 8012144:	4622      	mov	r2, r4
 8012146:	462b      	mov	r3, r5
 8012148:	f7ee f9fe 	bl	8000548 <__aeabi_dmul>
 801214c:	4652      	mov	r2, sl
 801214e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012152:	465b      	mov	r3, fp
 8012154:	4620      	mov	r0, r4
 8012156:	4629      	mov	r1, r5
 8012158:	f7ee f9f6 	bl	8000548 <__aeabi_dmul>
 801215c:	3e01      	subs	r6, #1
 801215e:	4604      	mov	r4, r0
 8012160:	460d      	mov	r5, r1
 8012162:	e716      	b.n	8011f92 <__kernel_rem_pio2+0x2c2>
 8012164:	9906      	ldr	r1, [sp, #24]
 8012166:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801216a:	9106      	str	r1, [sp, #24]
 801216c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012170:	f7ee f9ea 	bl	8000548 <__aeabi_dmul>
 8012174:	4602      	mov	r2, r0
 8012176:	460b      	mov	r3, r1
 8012178:	4650      	mov	r0, sl
 801217a:	4659      	mov	r1, fp
 801217c:	f7ee f82e 	bl	80001dc <__adddf3>
 8012180:	3601      	adds	r6, #1
 8012182:	4682      	mov	sl, r0
 8012184:	468b      	mov	fp, r1
 8012186:	9b00      	ldr	r3, [sp, #0]
 8012188:	429e      	cmp	r6, r3
 801218a:	dc01      	bgt.n	8012190 <__kernel_rem_pio2+0x4c0>
 801218c:	42ae      	cmp	r6, r5
 801218e:	dde9      	ble.n	8012164 <__kernel_rem_pio2+0x494>
 8012190:	ab48      	add	r3, sp, #288	@ 0x120
 8012192:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012196:	e9c5 ab00 	strd	sl, fp, [r5]
 801219a:	3c01      	subs	r4, #1
 801219c:	e6fd      	b.n	8011f9a <__kernel_rem_pio2+0x2ca>
 801219e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80121a0:	2b02      	cmp	r3, #2
 80121a2:	dc0b      	bgt.n	80121bc <__kernel_rem_pio2+0x4ec>
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	dc35      	bgt.n	8012214 <__kernel_rem_pio2+0x544>
 80121a8:	d059      	beq.n	801225e <__kernel_rem_pio2+0x58e>
 80121aa:	9b02      	ldr	r3, [sp, #8]
 80121ac:	f003 0007 	and.w	r0, r3, #7
 80121b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80121b4:	ecbd 8b02 	vpop	{d8}
 80121b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80121be:	2b03      	cmp	r3, #3
 80121c0:	d1f3      	bne.n	80121aa <__kernel_rem_pio2+0x4da>
 80121c2:	9b05      	ldr	r3, [sp, #20]
 80121c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80121c8:	eb0d 0403 	add.w	r4, sp, r3
 80121cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80121d0:	4625      	mov	r5, r4
 80121d2:	46c2      	mov	sl, r8
 80121d4:	f1ba 0f00 	cmp.w	sl, #0
 80121d8:	dc69      	bgt.n	80122ae <__kernel_rem_pio2+0x5de>
 80121da:	4645      	mov	r5, r8
 80121dc:	2d01      	cmp	r5, #1
 80121de:	f300 8087 	bgt.w	80122f0 <__kernel_rem_pio2+0x620>
 80121e2:	9c05      	ldr	r4, [sp, #20]
 80121e4:	ab48      	add	r3, sp, #288	@ 0x120
 80121e6:	441c      	add	r4, r3
 80121e8:	2000      	movs	r0, #0
 80121ea:	2100      	movs	r1, #0
 80121ec:	f1b8 0f01 	cmp.w	r8, #1
 80121f0:	f300 809c 	bgt.w	801232c <__kernel_rem_pio2+0x65c>
 80121f4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80121f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80121fc:	f1b9 0f00 	cmp.w	r9, #0
 8012200:	f040 80a6 	bne.w	8012350 <__kernel_rem_pio2+0x680>
 8012204:	9b04      	ldr	r3, [sp, #16]
 8012206:	e9c3 5600 	strd	r5, r6, [r3]
 801220a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801220e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012212:	e7ca      	b.n	80121aa <__kernel_rem_pio2+0x4da>
 8012214:	9d05      	ldr	r5, [sp, #20]
 8012216:	ab48      	add	r3, sp, #288	@ 0x120
 8012218:	441d      	add	r5, r3
 801221a:	4644      	mov	r4, r8
 801221c:	2000      	movs	r0, #0
 801221e:	2100      	movs	r1, #0
 8012220:	2c00      	cmp	r4, #0
 8012222:	da35      	bge.n	8012290 <__kernel_rem_pio2+0x5c0>
 8012224:	f1b9 0f00 	cmp.w	r9, #0
 8012228:	d038      	beq.n	801229c <__kernel_rem_pio2+0x5cc>
 801222a:	4602      	mov	r2, r0
 801222c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012230:	9c04      	ldr	r4, [sp, #16]
 8012232:	e9c4 2300 	strd	r2, r3, [r4]
 8012236:	4602      	mov	r2, r0
 8012238:	460b      	mov	r3, r1
 801223a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801223e:	f7ed ffcb 	bl	80001d8 <__aeabi_dsub>
 8012242:	ad4a      	add	r5, sp, #296	@ 0x128
 8012244:	2401      	movs	r4, #1
 8012246:	45a0      	cmp	r8, r4
 8012248:	da2b      	bge.n	80122a2 <__kernel_rem_pio2+0x5d2>
 801224a:	f1b9 0f00 	cmp.w	r9, #0
 801224e:	d002      	beq.n	8012256 <__kernel_rem_pio2+0x586>
 8012250:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012254:	4619      	mov	r1, r3
 8012256:	9b04      	ldr	r3, [sp, #16]
 8012258:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801225c:	e7a5      	b.n	80121aa <__kernel_rem_pio2+0x4da>
 801225e:	9c05      	ldr	r4, [sp, #20]
 8012260:	ab48      	add	r3, sp, #288	@ 0x120
 8012262:	441c      	add	r4, r3
 8012264:	2000      	movs	r0, #0
 8012266:	2100      	movs	r1, #0
 8012268:	f1b8 0f00 	cmp.w	r8, #0
 801226c:	da09      	bge.n	8012282 <__kernel_rem_pio2+0x5b2>
 801226e:	f1b9 0f00 	cmp.w	r9, #0
 8012272:	d002      	beq.n	801227a <__kernel_rem_pio2+0x5aa>
 8012274:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012278:	4619      	mov	r1, r3
 801227a:	9b04      	ldr	r3, [sp, #16]
 801227c:	e9c3 0100 	strd	r0, r1, [r3]
 8012280:	e793      	b.n	80121aa <__kernel_rem_pio2+0x4da>
 8012282:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012286:	f7ed ffa9 	bl	80001dc <__adddf3>
 801228a:	f108 38ff 	add.w	r8, r8, #4294967295
 801228e:	e7eb      	b.n	8012268 <__kernel_rem_pio2+0x598>
 8012290:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012294:	f7ed ffa2 	bl	80001dc <__adddf3>
 8012298:	3c01      	subs	r4, #1
 801229a:	e7c1      	b.n	8012220 <__kernel_rem_pio2+0x550>
 801229c:	4602      	mov	r2, r0
 801229e:	460b      	mov	r3, r1
 80122a0:	e7c6      	b.n	8012230 <__kernel_rem_pio2+0x560>
 80122a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80122a6:	f7ed ff99 	bl	80001dc <__adddf3>
 80122aa:	3401      	adds	r4, #1
 80122ac:	e7cb      	b.n	8012246 <__kernel_rem_pio2+0x576>
 80122ae:	ed35 7b02 	vldmdb	r5!, {d7}
 80122b2:	ed8d 7b00 	vstr	d7, [sp]
 80122b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80122ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122be:	ec53 2b17 	vmov	r2, r3, d7
 80122c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122c6:	f7ed ff89 	bl	80001dc <__adddf3>
 80122ca:	4602      	mov	r2, r0
 80122cc:	460b      	mov	r3, r1
 80122ce:	4606      	mov	r6, r0
 80122d0:	460f      	mov	r7, r1
 80122d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122d6:	f7ed ff7f 	bl	80001d8 <__aeabi_dsub>
 80122da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122de:	f7ed ff7d 	bl	80001dc <__adddf3>
 80122e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80122e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80122ea:	e9c5 6700 	strd	r6, r7, [r5]
 80122ee:	e771      	b.n	80121d4 <__kernel_rem_pio2+0x504>
 80122f0:	ed34 7b02 	vldmdb	r4!, {d7}
 80122f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80122f8:	ec51 0b17 	vmov	r0, r1, d7
 80122fc:	4652      	mov	r2, sl
 80122fe:	465b      	mov	r3, fp
 8012300:	ed8d 7b00 	vstr	d7, [sp]
 8012304:	f7ed ff6a 	bl	80001dc <__adddf3>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	4606      	mov	r6, r0
 801230e:	460f      	mov	r7, r1
 8012310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012314:	f7ed ff60 	bl	80001d8 <__aeabi_dsub>
 8012318:	4652      	mov	r2, sl
 801231a:	465b      	mov	r3, fp
 801231c:	f7ed ff5e 	bl	80001dc <__adddf3>
 8012320:	3d01      	subs	r5, #1
 8012322:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012326:	e9c4 6700 	strd	r6, r7, [r4]
 801232a:	e757      	b.n	80121dc <__kernel_rem_pio2+0x50c>
 801232c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012330:	f7ed ff54 	bl	80001dc <__adddf3>
 8012334:	f108 38ff 	add.w	r8, r8, #4294967295
 8012338:	e758      	b.n	80121ec <__kernel_rem_pio2+0x51c>
 801233a:	bf00      	nop
 801233c:	f3af 8000 	nop.w
	...
 8012348:	41700000 	.word	0x41700000
 801234c:	3e700000 	.word	0x3e700000
 8012350:	9b04      	ldr	r3, [sp, #16]
 8012352:	9a04      	ldr	r2, [sp, #16]
 8012354:	601d      	str	r5, [r3, #0]
 8012356:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801235a:	605c      	str	r4, [r3, #4]
 801235c:	609f      	str	r7, [r3, #8]
 801235e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8012362:	60d3      	str	r3, [r2, #12]
 8012364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012368:	6110      	str	r0, [r2, #16]
 801236a:	6153      	str	r3, [r2, #20]
 801236c:	e71d      	b.n	80121aa <__kernel_rem_pio2+0x4da>
 801236e:	bf00      	nop

08012370 <scalbn>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	ec55 4b10 	vmov	r4, r5, d0
 8012376:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801237a:	4606      	mov	r6, r0
 801237c:	462b      	mov	r3, r5
 801237e:	b991      	cbnz	r1, 80123a6 <scalbn+0x36>
 8012380:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012384:	4323      	orrs	r3, r4
 8012386:	d03b      	beq.n	8012400 <scalbn+0x90>
 8012388:	4b33      	ldr	r3, [pc, #204]	@ (8012458 <scalbn+0xe8>)
 801238a:	4620      	mov	r0, r4
 801238c:	4629      	mov	r1, r5
 801238e:	2200      	movs	r2, #0
 8012390:	f7ee f8da 	bl	8000548 <__aeabi_dmul>
 8012394:	4b31      	ldr	r3, [pc, #196]	@ (801245c <scalbn+0xec>)
 8012396:	429e      	cmp	r6, r3
 8012398:	4604      	mov	r4, r0
 801239a:	460d      	mov	r5, r1
 801239c:	da0f      	bge.n	80123be <scalbn+0x4e>
 801239e:	a326      	add	r3, pc, #152	@ (adr r3, 8012438 <scalbn+0xc8>)
 80123a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a4:	e01e      	b.n	80123e4 <scalbn+0x74>
 80123a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80123aa:	4291      	cmp	r1, r2
 80123ac:	d10b      	bne.n	80123c6 <scalbn+0x56>
 80123ae:	4622      	mov	r2, r4
 80123b0:	4620      	mov	r0, r4
 80123b2:	4629      	mov	r1, r5
 80123b4:	f7ed ff12 	bl	80001dc <__adddf3>
 80123b8:	4604      	mov	r4, r0
 80123ba:	460d      	mov	r5, r1
 80123bc:	e020      	b.n	8012400 <scalbn+0x90>
 80123be:	460b      	mov	r3, r1
 80123c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80123c4:	3936      	subs	r1, #54	@ 0x36
 80123c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80123ca:	4296      	cmp	r6, r2
 80123cc:	dd0d      	ble.n	80123ea <scalbn+0x7a>
 80123ce:	2d00      	cmp	r5, #0
 80123d0:	a11b      	add	r1, pc, #108	@ (adr r1, 8012440 <scalbn+0xd0>)
 80123d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123d6:	da02      	bge.n	80123de <scalbn+0x6e>
 80123d8:	a11b      	add	r1, pc, #108	@ (adr r1, 8012448 <scalbn+0xd8>)
 80123da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123de:	a318      	add	r3, pc, #96	@ (adr r3, 8012440 <scalbn+0xd0>)
 80123e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e4:	f7ee f8b0 	bl	8000548 <__aeabi_dmul>
 80123e8:	e7e6      	b.n	80123b8 <scalbn+0x48>
 80123ea:	1872      	adds	r2, r6, r1
 80123ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80123f0:	428a      	cmp	r2, r1
 80123f2:	dcec      	bgt.n	80123ce <scalbn+0x5e>
 80123f4:	2a00      	cmp	r2, #0
 80123f6:	dd06      	ble.n	8012406 <scalbn+0x96>
 80123f8:	f36f 531e 	bfc	r3, #20, #11
 80123fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012400:	ec45 4b10 	vmov	d0, r4, r5
 8012404:	bd70      	pop	{r4, r5, r6, pc}
 8012406:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801240a:	da08      	bge.n	801241e <scalbn+0xae>
 801240c:	2d00      	cmp	r5, #0
 801240e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012438 <scalbn+0xc8>)
 8012410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012414:	dac3      	bge.n	801239e <scalbn+0x2e>
 8012416:	a10e      	add	r1, pc, #56	@ (adr r1, 8012450 <scalbn+0xe0>)
 8012418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801241c:	e7bf      	b.n	801239e <scalbn+0x2e>
 801241e:	3236      	adds	r2, #54	@ 0x36
 8012420:	f36f 531e 	bfc	r3, #20, #11
 8012424:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012428:	4620      	mov	r0, r4
 801242a:	4b0d      	ldr	r3, [pc, #52]	@ (8012460 <scalbn+0xf0>)
 801242c:	4629      	mov	r1, r5
 801242e:	2200      	movs	r2, #0
 8012430:	e7d8      	b.n	80123e4 <scalbn+0x74>
 8012432:	bf00      	nop
 8012434:	f3af 8000 	nop.w
 8012438:	c2f8f359 	.word	0xc2f8f359
 801243c:	01a56e1f 	.word	0x01a56e1f
 8012440:	8800759c 	.word	0x8800759c
 8012444:	7e37e43c 	.word	0x7e37e43c
 8012448:	8800759c 	.word	0x8800759c
 801244c:	fe37e43c 	.word	0xfe37e43c
 8012450:	c2f8f359 	.word	0xc2f8f359
 8012454:	81a56e1f 	.word	0x81a56e1f
 8012458:	43500000 	.word	0x43500000
 801245c:	ffff3cb0 	.word	0xffff3cb0
 8012460:	3c900000 	.word	0x3c900000
 8012464:	00000000 	.word	0x00000000

08012468 <floor>:
 8012468:	ec51 0b10 	vmov	r0, r1, d0
 801246c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012474:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012478:	2e13      	cmp	r6, #19
 801247a:	460c      	mov	r4, r1
 801247c:	4605      	mov	r5, r0
 801247e:	4680      	mov	r8, r0
 8012480:	dc34      	bgt.n	80124ec <floor+0x84>
 8012482:	2e00      	cmp	r6, #0
 8012484:	da17      	bge.n	80124b6 <floor+0x4e>
 8012486:	a332      	add	r3, pc, #200	@ (adr r3, 8012550 <floor+0xe8>)
 8012488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248c:	f7ed fea6 	bl	80001dc <__adddf3>
 8012490:	2200      	movs	r2, #0
 8012492:	2300      	movs	r3, #0
 8012494:	f7ee fae8 	bl	8000a68 <__aeabi_dcmpgt>
 8012498:	b150      	cbz	r0, 80124b0 <floor+0x48>
 801249a:	2c00      	cmp	r4, #0
 801249c:	da55      	bge.n	801254a <floor+0xe2>
 801249e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80124a2:	432c      	orrs	r4, r5
 80124a4:	2500      	movs	r5, #0
 80124a6:	42ac      	cmp	r4, r5
 80124a8:	4c2b      	ldr	r4, [pc, #172]	@ (8012558 <floor+0xf0>)
 80124aa:	bf08      	it	eq
 80124ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80124b0:	4621      	mov	r1, r4
 80124b2:	4628      	mov	r0, r5
 80124b4:	e023      	b.n	80124fe <floor+0x96>
 80124b6:	4f29      	ldr	r7, [pc, #164]	@ (801255c <floor+0xf4>)
 80124b8:	4137      	asrs	r7, r6
 80124ba:	ea01 0307 	and.w	r3, r1, r7
 80124be:	4303      	orrs	r3, r0
 80124c0:	d01d      	beq.n	80124fe <floor+0x96>
 80124c2:	a323      	add	r3, pc, #140	@ (adr r3, 8012550 <floor+0xe8>)
 80124c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c8:	f7ed fe88 	bl	80001dc <__adddf3>
 80124cc:	2200      	movs	r2, #0
 80124ce:	2300      	movs	r3, #0
 80124d0:	f7ee faca 	bl	8000a68 <__aeabi_dcmpgt>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d0eb      	beq.n	80124b0 <floor+0x48>
 80124d8:	2c00      	cmp	r4, #0
 80124da:	bfbe      	ittt	lt
 80124dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80124e0:	4133      	asrlt	r3, r6
 80124e2:	18e4      	addlt	r4, r4, r3
 80124e4:	ea24 0407 	bic.w	r4, r4, r7
 80124e8:	2500      	movs	r5, #0
 80124ea:	e7e1      	b.n	80124b0 <floor+0x48>
 80124ec:	2e33      	cmp	r6, #51	@ 0x33
 80124ee:	dd0a      	ble.n	8012506 <floor+0x9e>
 80124f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80124f4:	d103      	bne.n	80124fe <floor+0x96>
 80124f6:	4602      	mov	r2, r0
 80124f8:	460b      	mov	r3, r1
 80124fa:	f7ed fe6f 	bl	80001dc <__adddf3>
 80124fe:	ec41 0b10 	vmov	d0, r0, r1
 8012502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012506:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801250a:	f04f 37ff 	mov.w	r7, #4294967295
 801250e:	40df      	lsrs	r7, r3
 8012510:	4207      	tst	r7, r0
 8012512:	d0f4      	beq.n	80124fe <floor+0x96>
 8012514:	a30e      	add	r3, pc, #56	@ (adr r3, 8012550 <floor+0xe8>)
 8012516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251a:	f7ed fe5f 	bl	80001dc <__adddf3>
 801251e:	2200      	movs	r2, #0
 8012520:	2300      	movs	r3, #0
 8012522:	f7ee faa1 	bl	8000a68 <__aeabi_dcmpgt>
 8012526:	2800      	cmp	r0, #0
 8012528:	d0c2      	beq.n	80124b0 <floor+0x48>
 801252a:	2c00      	cmp	r4, #0
 801252c:	da0a      	bge.n	8012544 <floor+0xdc>
 801252e:	2e14      	cmp	r6, #20
 8012530:	d101      	bne.n	8012536 <floor+0xce>
 8012532:	3401      	adds	r4, #1
 8012534:	e006      	b.n	8012544 <floor+0xdc>
 8012536:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801253a:	2301      	movs	r3, #1
 801253c:	40b3      	lsls	r3, r6
 801253e:	441d      	add	r5, r3
 8012540:	4545      	cmp	r5, r8
 8012542:	d3f6      	bcc.n	8012532 <floor+0xca>
 8012544:	ea25 0507 	bic.w	r5, r5, r7
 8012548:	e7b2      	b.n	80124b0 <floor+0x48>
 801254a:	2500      	movs	r5, #0
 801254c:	462c      	mov	r4, r5
 801254e:	e7af      	b.n	80124b0 <floor+0x48>
 8012550:	8800759c 	.word	0x8800759c
 8012554:	7e37e43c 	.word	0x7e37e43c
 8012558:	bff00000 	.word	0xbff00000
 801255c:	000fffff 	.word	0x000fffff

08012560 <_init>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	bf00      	nop
 8012564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012566:	bc08      	pop	{r3}
 8012568:	469e      	mov	lr, r3
 801256a:	4770      	bx	lr

0801256c <_fini>:
 801256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256e:	bf00      	nop
 8012570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012572:	bc08      	pop	{r3}
 8012574:	469e      	mov	lr, r3
 8012576:	4770      	bx	lr
